{
  "_args": [
    [
      {
        "raw": "node-source-walk@https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
        "scope": null,
        "escapedName": "node-source-walk",
        "name": "node-source-walk",
        "rawSpec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
        "spec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
        "type": "remote"
      },
      "/Users/vedvasavada/Desktop/Desktop/raw_autotester/autotester"
    ]
  ],
  "_from": "node-source-walk@>=3.0.0 <4.0.0",
  "_id": "node-source-walk@3.2.0",
  "_inCache": true,
  "_location": "/node-source-walk",
  "_phantomChildren": {
    "babel-runtime": "6.11.6"
  },
  "_requested": {
    "raw": "node-source-walk@https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
    "scope": null,
    "escapedName": "node-source-walk",
    "name": "node-source-walk",
    "rawSpec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
    "spec": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/detective-amd",
    "/detective-cjs",
    "/detective-es6",
    "/detective-less",
    "/detective-sass",
    "/detective-scss",
    "/get-amd-module-type",
    "/madge/detective-sass",
    "/madge/precinct",
    "/module-definition",
    "/precinct"
  ],
  "_resolved": "https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
  "_shasum": "3c605cc53abdee4b45ab65e947dfb1db7c90f0e3",
  "_shrinkwrap": null,
  "_spec": "node-source-walk@https://registry.npmjs.org/node-source-walk/-/node-source-walk-3.2.0.tgz",
  "_where": "/Users/vedvasavada/Desktop/Desktop/raw_autotester/autotester",
  "author": {
    "name": "Joel Kemp",
    "email": "joel@mrjoelkemp.com",
    "url": "http://www.mrjoelkemp.com/"
  },
  "bugs": {
    "url": "https://github.com/mrjoelkemp/node-source-walk/issues"
  },
  "dependencies": {
    "babylon": "~6.8.1"
  },
  "description": "Execute a callback on every node of a source code's AST and stop walking when you see fit",
  "devDependencies": {
    "jscs": "~2.4.0",
    "jscs-preset-mrjoelkemp": "~1.0.0",
    "mocha": "~2.2.5",
    "sinon": "~1.17.4"
  },
  "homepage": "https://github.com/mrjoelkemp/node-source-walk",
  "keywords": [
    "ast",
    "traversal",
    "acorn",
    "static analysis",
    "source code",
    "walker",
    "jsx"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "node-source-walk",
  "optionalDependencies": {},
  "readme": "### node-source-walk [![npm](http://img.shields.io/npm/v/node-source-walk.svg)](https://npmjs.org/package/node-source-walk) [![npm](http://img.shields.io/npm/dm/node-source-walk.svg)](https://npmjs.org/package/node-source-walk)\n\n> Synchronously execute a callback on every node of a file's AST and stop walking whenever you see fit.\n\n`npm install --save node-source-walk`\n\n### Usage\n\n```javascript\n  var Walker = require('node-source-walk');\n\n  var walker = new Walker();\n\n  // Assume src is the string contents of myfile.js\n  // or the AST of an outside parse of myfile.js\n\n  walker.walk(src, function(node) {\n    if (node.type === whateverImLookingFor) {\n      // No need to keep traversing since we found what we wanted\n      walker.stopWalking();\n    }\n  });\n\n```\n\nBy default, Walker will use `babylon` (supporting ES6, JSX, Flow, and all other available babylon plugins) and the `sourceType: module`, but you can change any of the defaults as follows:\n\n```js\nvar walker = new Walker({\n  sourceType: 'script',\n  // If you don't like experimental plugins\n  plugins: [\n    'jsx',\n    'flow'\n  ]\n});\n```\n\n* The supplied options are passed through to the parser, so you can configure it according to babylon's documentation: https://github.com/babel/babylon\n\n### Swap out the parser\n\nIf you want to supply your own parser, you can do:\n\n```js\nvar walker = new Walker({\n  parser: mySweetParser\n});\n```\n\n* The custom parser must have a `.parse` method that takes in a string and returns an object/AST.\n* All of the other options supplied to the Walker constructor will be passed along as parser options to your chosen parser.\n\n### Public Members\n\n`walk(src, cb)`\n\n* Recursively walks the given `src` from top to bottom\n* `src`: the contents of a file **OR** its (already parsed) AST\n* `cb`: a function that is called for every visited node.\n * The argument passed to `cb` will be the currently visited node.\n\n`moonwalk(node, cb)`\n\n* Recursively walks up an AST starting from the given node. This is a traversal that's in the opposite direction of `walk` and `traverse`.\n* `node`: a valid AST node\n* `cb`: a function that is called for every node (specifically via visiting the parent(s) of every node recursively).\n * The argument passed to `cb` will be the currently visited node.\n\n`stopWalking()`\n\n* Halts further walking of the AST until another manual call of `walk` or `moonwalk`.\n* This is super-beneficial when dealing with large source files (or ASTs)\n\n`traverse(node, cb)`\n\n* Allows you to traverse an AST node and execute a callback on it\n* Callback should expect the first argument to be an AST node, similar to `walk`'s callback.\n\n`parse(src)`\n\n* Uses the options supplied to Walker to parse the given source code string and return its AST\nusing the configured parser (or babylon by default).\n\n## License\n\nMIT\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mrjoelkemp/node-source-walk.git"
  },
  "scripts": {
    "test": "jscs index.js test && mocha test/test.js"
  },
  "version": "3.2.0"
}
