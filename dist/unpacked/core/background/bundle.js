/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Background app entry point
	 */

	__webpack_require__(13).start();


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _api = __webpack_require__(2);

	var _api2 = _interopRequireDefault(_api);

	var Thenable = getNativePromise();

	/**
	 * Get native promise constructor
	 * @returns {*}
	 */
	function getNativePromise() {
	    if (typeof window !== 'undefined' && window.Promise) {
	        return window.Promise;
	    }
	    if (typeof global !== 'undefined' && global.Promise) {
	        return global.Promise;
	    }
	}

	if (!Thenable) {
	    throw new TypeError('Native promise does not support in your environment. Use /out/api function directly');
	}

	/**
	 * @type {ThenChrome}
	 */
	exports['default'] = (0, _api2['default'])(Thenable);
	module.exports = exports['default'];
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports['default'] = create;

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

	var _config = __webpack_require__(3);

	var _config2 = _interopRequireDefault(_config);

	var _wrapper = __webpack_require__(4);

	var _object = __webpack_require__(5);

	/**
	 * @param {Function} Thenable
	 * @returns {ThenChrome}
	 */

	function create(Thenable) {
	    return Object.keys(_config2['default']).reduce(function (result, namespace) {
	        createNamespace(result, namespace);
	        return wrapMethods(result, namespace, _config2['default'][namespace], Thenable);
	    }, {});
	}

	/**
	 * Create namespace
	 * @param {Object} obj
	 * @param {String} namespace
	 * @returns {*}
	 */
	function createNamespace(obj, namespace) {
	    var chromeNamespace = (0, _object.get)(obj, namespace);
	    if (!chromeNamespace) {
	        (0, _object.set)(obj, namespace);
	    }
	    return obj;
	}

	/**
	 * @param {Object} obj
	 * @param {String} namespace
	 * @param {Object} data
	 * @param {Array<String>} data.async
	 * @param {Array<String>} data.sync
	 * @param {Function} Promise constructor
	 * @returns {Object}
	 */
	function wrapMethods(obj, namespace, data, Promise) {
	    (0, _wrapper.wrapAsyncMethods)(obj, namespace, data.async, Promise);
	    (0, _wrapper.wrapSyncMethods)(obj, namespace, data.sync, Promise);
	    return obj;
	}
	module.exports = exports['default'];

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports['default'] = {
	    alarms: {
	        async: ['get', 'getAll', 'clear', 'clearAll'],
	        sync: ['create']
	    },
	    bookmarks: {
	        async: ['get', 'getChildren', 'getRecent', 'getTree', 'getSubTree', 'search', 'create', 'move', 'update', 'remove', 'removeTree']
	    },
	    browserAction: {
	        async: ['getTitle', 'setIcon', 'getPopup', 'getBadgeText', 'getBadgeBackgroundColor'],
	        sync: ['setTitle', 'setPopup', 'setBadgeText', 'setBadgeBackgroundColor', 'enable', 'disable']
	    },
	    browsingData: {
	        async: ['settings', 'remove', 'removeAppcache', 'removeCache', 'removeCookies', 'removeDownloads', 'removeFileSystems', 'removeFormData', 'removeHistory', 'removeIndexedDB', 'removeLocalStorage', 'removePluginData', 'removePasswords', 'removeWebSQL']
	    },
	    commands: {
	        async: ['getAll']
	    },
	    contextMenus: {
	        async: ['create', 'update', 'remove', 'removeAll']
	    },
	    cookies: {
	        async: ['get', 'getAll', 'set', 'remove', 'getAllCookieStores']
	    },
	    'debugger': {
	        async: ['attach', 'detach', 'sendCommand', 'getTargets']
	    },
	    desktopCapture: {
	        async: ['chooseDesktopMedia'],
	        sync: ['cancelChooseDesktopMedia']
	    },
	    'devtools.inspectedWindow': {
	        async: ['eval', 'getResources'],
	        sync: ['reload']
	    },
	    'devtools.network': {
	        async: ['getHAR']
	    },
	    'devtools.panels': {
	        async: ['create', 'setOpenResourceHandler', 'openResource']
	    },
	    dial: {
	        async: ['discoverNow', 'fetchDeviceDescription']
	    },
	    downloads: {
	        async: ['download', 'search', 'pause', 'resume', 'cancel', 'getFileIcon', 'erase', 'removeFile', 'acceptDanger'],
	        sync: ['open', 'show', 'showDefaultFolder', 'drag', 'setShelfEnabled']
	    },
	    extension: {
	        async: ['isAllowedIncognitoAccess', 'isAllowedFileSchemeAccess'],
	        sync: ['getURL', 'getViews', 'getBackgroundPage', 'getExtensionTabs', 'setUpdateUrlData']
	    },
	    fontSettings: {
	        async: ['clearFont', 'getFont', 'setFont', 'getFontList', 'clearDefaultFontSize', 'getDefaultFontSize', 'setDefaultFontSize', 'clearDefaultFixedFontSize', 'getDefaultFixedFontSize', 'setDefaultFixedFontSize', 'clearMinimumFontSize', 'getMinimumFontSize', 'setMinimumFontSize']
	    },
	    gcm: {
	        async: ['register', 'unregister', 'send']
	    },
	    history: {
	        async: ['search', 'getVisits', 'addUrl', 'deleteUrl', 'deleteRange', 'deleteAll']
	    },
	    i18n: {
	        async: ['getAcceptLanguages', 'detectLanguage'],
	        sync: ['getMessage', 'getUILanguage']
	    },
	    identity: {
	        async: ['getAccounts', 'getAuthToken', 'getProfileUserInfo', 'removeCachedAuthToken', 'launchWebAuthFlow'],
	        sync: ['getRedirectURL']
	    },
	    idle: {
	        async: ['queryState'],
	        sync: ['setDetectionInterval']
	    },
	    instanceID: {
	        async: ['getID', 'getCreationTime', 'getToken', 'deleteToken', 'deleteID']
	    },
	    management: {
	        async: ['getAll', 'get', 'getSelf', 'getPermissionWarningsById', 'getPermissionWarningsByManifest', 'setEnabled', 'uninstall', 'uninstallSelf', 'launchApp', 'createAppShortcut', 'setLaunchType', 'generateAppForLink']
	    },
	    notifications: {
	        async: ['create', 'update', 'clear', 'getAll', 'getPermissionLevel']
	    },
	    omnibox: {
	        sync: ['setDefaultSuggestion']
	    },
	    pageAction: {
	        async: ['getTitle', 'setIcon', 'getPopup'],
	        sync: ['show', 'hide', 'setTitle', 'setPopup']
	    },
	    pageCapture: {
	        async: ['saveAsMHTML']
	    },
	    permissions: {
	        async: ['getAll', 'contains', 'request', 'remove']
	    },
	    'privacy.network.networkPredictionEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.alternateErrorPagesEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.autofillEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.passwordSavingEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.safeBrowsingEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.searchSuggestEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.spellingServiceEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.services.translationServiceEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.websites.hyperlinkAuditingEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.websites.referrersEnabled': {
	        async: ['get', 'set', 'clear']
	    },
	    'privacy.websites.thirdPartyCookiesAllowed': {
	        async: ['get', 'set', 'clear']
	    },
	    'proxy.settings': {
	        async: ['get', 'set', 'clear']
	    },
	    runtime: {
	        async: ['getBackgroundPage', 'openOptionsPage', 'setUninstallURL', 'requestUpdateCheck', 'sendMessage', 'sendNativeMessage', 'getPlatformInfo', 'getPackageDirectoryEntry'],
	        sync: ['getManifest', 'getURL', 'reload', 'restart', 'connect', 'connectNative']
	    },
	    sessions: {
	        async: ['getRecentlyClosed', 'getDevices', 'restore']
	    },
	    'storage.local': {
	        async: ['clear', 'get', 'set', 'remove', 'getBytesInUse']
	    },
	    'storage.managed': {
	        async: ['clear', 'get', 'set', 'remove', 'getBytesInUse']
	    },
	    'storage.sync': {
	        async: ['clear', 'get', 'set', 'remove', 'getBytesInUse']
	    },
	    'system.cpu': {
	        async: ['getInfo']
	    },
	    'system.memory': {
	        async: ['getInfo']
	    },
	    'system.storage': {
	        async: ['getInfo', 'ejectDevice', 'getAvailableCapacity']
	    },
	    tabCapture: {
	        async: ['capture', 'getCapturedTabs']
	    },
	    tabs: {
	        async: ['get', 'getCurrent', 'sendRequest', 'sendMessage', 'getSelected', 'getAllInWindow', 'create', 'duplicate', 'query', 'highlight', 'update', 'move', 'reload', 'remove', 'detectLanguage', 'captureVisibleTab', 'executeScript', 'insertCSS', 'setZoom', 'getZoom', 'setZoomSettings', 'getZoomSettings'],
	        sync: ['connect']
	    },
	    topSites: {
	        async: ['get']
	    },
	    tts: {
	        async: ['speak', 'isSpeaking', 'getVoices'],
	        sync: ['stop', 'pause', 'resume']
	    },
	    webNavigation: {
	        async: ['getFrame', 'getAllFrames']
	    },
	    webRequest: {
	        async: ['handlerBehaviorChanged']
	    },
	    windows: {
	        async: ['get', 'getCurrent', 'getLastFocused', 'getAll', 'create', 'update', 'remove']
	    }
	};
	module.exports = exports['default'];

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports.wrapAsyncMethods = wrapAsyncMethods;
	exports.wrapSyncMethods = wrapSyncMethods;

	var _object = __webpack_require__(5);

	/**
	 * chrome api object
	 * @see https://developer.chrome.com/extensions/api_index
	 */
	var chromeApi = getChromeApi();

	/**
	 * Create getters for async methods
	 * @param {Object} obj
	 * @param {String} namespace
	 * @param {Array<String>} asyncMethods
	 * @param {Function} Thenable
	 * @returns {Object}
	 */

	function wrapAsyncMethods(obj, namespace, asyncMethods, Thenable) {
	    if (asyncMethods === undefined) asyncMethods = [];

	    return asyncMethods.reduce(function (result, method) {
	        return appendAsyncMethod(obj, namespace, method, Thenable);
	    }, obj);
	}

	/**
	 * Wrap sync methods to promise
	 * @param {Object} obj
	 * @param {String} namespace
	 * @param {Array<String>} syncMethods
	 * @param {Function} Thenable
	 * @returns {*}
	 */

	function wrapSyncMethods(obj, namespace, syncMethods, Thenable) {
	    if (syncMethods === undefined) syncMethods = [];

	    return syncMethods.reduce(function (result, method) {
	        return appendSyncMethod(obj, namespace, method, Thenable);
	    }, obj);
	}

	/**
	 * Get chrome api object
	 * @returns {chrome}
	 */
	function getChromeApi() {
	    if (typeof window !== 'undefined' && window.chrome) {
	        return window.chrome;
	    }
	    if (typeof global !== 'undefined' && global.chrome) {
	        return global.chrome;
	    }
	}

	/**
	 * Append async method to data
	 * @param {Object} obj
	 * @param {String} namespace
	 * @param {String} method
	 * @param {Function} Thenable
	 * @returns {Object}
	 */
	function appendAsyncMethod(obj, namespace, method, Thenable) {
	    var data = (0, _object.get)(obj, namespace);
	    Object.defineProperty(data, method, {
	        get: function get() {
	            return wrapAsyncMethod(Thenable, namespace, method);
	        }
	    });
	    return obj;
	}

	/**
	 * Wrap sync method
	 * @param {Function} Thenable
	 * @param {String} namespace
	 * @param {String} method
	 * @returns {Function}
	 */
	function wrapAsyncMethod(Thenable, namespace, method) {
	    var _this = this;

	    return function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }

	        return new Thenable(function (resolve, reject) {
	            var chromeNamespace = (0, _object.get)(chromeApi, namespace);
	            args.push(getResolver(resolve, reject, _this));
	            apply(chromeNamespace[method], chromeNamespace, args);
	        });
	    };
	}

	/**
	 *
	 * @param {Function} resolve
	 * @param {Function} reject
	 * @param {*} context
	 * @returns {Function}
	 */
	function getResolver(resolve, reject, context) {
	    return function () {
	        for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	            args[_key2] = arguments[_key2];
	        }

	        if (chromeApi.runtime.lastError) {
	            return reject(chromeApi.runtime.lastError);
	        }
	        return apply(resolve, context, args);
	    };
	}

	/**
	 * Append sync method
	 * @param {Object} obj
	 * @param {String} namespace
	 * @param {String} method
	 * @param {Function} PromiseConstructor
	 * @returns {Object}
	 */
	function appendSyncMethod(obj, namespace, method, PromiseConstructor) {
	    var data = (0, _object.get)(obj, namespace);
	    Object.defineProperty(data, method, {
	        get: function get() {
	            return wrapSyncMethod(PromiseConstructor, namespace, method);
	        }
	    });
	    return obj;
	}

	/**
	 * Wrap sync method
	 * @param {Function} Thenable
	 * @param {String} namespace
	 * @param {String} method
	 * @returns {Function}
	 */
	function wrapSyncMethod(Thenable, namespace, method) {
	    return function () {
	        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	            args[_key3] = arguments[_key3];
	        }

	        return new Thenable(function (resolve, reject) {
	            var chromeNamespace = (0, _object.get)(chromeApi, namespace);
	            try {
	                return resolve(apply(chromeNamespace[method], chromeNamespace, args));
	            } catch (e) {
	                return reject(e);
	            }
	        });
	    };
	}

	/**
	 * For IE compatibility we can't use method.apply.
	 *
	 * Function apply
	 * @param {Function} method
	 * @param {*} context
	 * @param {Array} args
	 * @returns {*}
	 */
	function apply(method, context, args) {
	    return Function.prototype.apply.call(method, context, args);
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	/**
	 * Get nested object by path
	 * @param {Object} object
	 * @param {String} path
	 * @param {String} [delimiter]
	 * @returns {Object|Null}
	 */
	'use strict';

	Object.defineProperty(exports, '__esModule', {
	    value: true
	});
	exports.get = get;
	exports.set = set;

	function get(object, path) {
	    var delimiter = arguments.length <= 2 || arguments[2] === undefined ? '.' : arguments[2];

	    var keys = path.split(delimiter);
	    var data = object;

	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (!data[key]) {
	            return null;
	        }
	        data = data[key];
	    }
	    return data;
	}

	/**
	 * Create nested object by path
	 * @param {Object} obj
	 * @param {String} path
	 * @param {String} [delimiter]
	 * @returns {*}
	 */

	function set(obj, path) {
	    var delimiter = arguments.length <= 2 || arguments[2] === undefined ? '.' : arguments[2];

	    return createNestedObject(obj, path.split(delimiter));
	}

	/**
	 * Create nested objects
	 * @param {Object} obj
	 * @param {Array<String>} keys
	 * @returns {*}
	 */
	function createNestedObject(obj, keys) {
	    if (keys.length) {
	        var nested = obj[keys[0]] = typeof obj[keys[0]] === 'undefined' ? {} : obj[keys[0]];
	        createNestedObject(nested, keys.slice(1, keys.length));
	    }
	    return obj;
	}

/***/ }),
/* 6 */,
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Utils
	 */

	const escapeStringRegexp = __webpack_require__(9);

	/**
	 * Loads script via <script> tag
	 *
	 * @param {String} url
	 * @param {Object} targetDocument
	 * @returns {Promise}
	 */
	exports.loadScript = function (url, doc = document) {
	  return new Promise(function (resolve, reject) {
	    const script = doc.createElement('script');
	    script.type = 'text/javascript';
	    doc.getElementsByTagName('head')[0].appendChild(script);
	    script.onload = () => resolve(script);
	    script.onerror = () => reject(new Error(`Can not load script ${url}`));
	    script.src = url;
	  });
	};

	/**
	 * Remove elements by selector
	 *
	 * @param {String} selector
	 * @param {Document} [doc]
	 */
	exports.removeBySelector = function (selector, doc = document) {
	  [].forEach.call(doc.querySelectorAll(selector), el => {
	    el.parentNode.removeChild(el);
	  });
	};

	/**
	 * Fetch script via window.fetch
	 *
	 * @param {String} url
	 * @returns {Promise}
	 */
	exports.fetchText = function (url) {
	  return window.fetch(url)
	    .then(r => r.text())
	};

	/**
	 * Throws error in next tick
	 *
	 * @param {Error} error
	 */
	exports.asyncThrow = function (error) {
	  setTimeout(() => {
	    throw error;
	  }, 0);
	};

	/**
	 * Copies object without first-level undefined props
	 * Useful for using Object.assign to set defaults
	 *
	 * @param {Object} obj
	 */
	exports.noUndefined = function (obj) {
	  return Object.keys(obj).reduce((res, key) => {
	    if (obj[key] !== undefined) {
	      res[key] = obj[key];
	    }
	    return res;
	  }, {})
	};


	/**
	 * Trim slashes
	 *
	 * @param {String} str
	 * @returns {String}
	 */
	exports.trimSlashes = function (str) {
	  return str.replace(/^\/+|\/+$/g, '');
	};

	/**
	 * Remove useless paths from error stack:
	 * - filesystem:chrome-extension://cidkhbpkgpdkadkjpkfooofilpmfneog/persistent/
	 * - chrome-extension://cidkhbpkgpdkadkjpkfooofilpmfneog/
	 *
	 * @param {String} stack
	 */
	exports.cleanStack = function(stack) {
	  if (typeof stack !== 'string') {
	    return stack;
	  }
	  const url = chrome.runtime.getURL('');
	  const urlFs = `filesystem:${url}persistent/`;
	  const urlRe = new RegExp(escapeStringRegexp(url), 'g');
	  const urlFsRe = new RegExp(escapeStringRegexp(urlFs), 'g');
	  return stack
	    .replace(urlFsRe, '')
	    .replace(urlRe, '')
	};

	/**
	 * Cuts local url
	 *
	 * @param {String} localUrl
	 */
	exports.cutLocalUrl = function (localUrl) {
	  return localUrl
	    .replace(`filesystem:chrome-extension://${chrome.runtime.id}/persistent/`, '')
	    .replace(`chrome-extension://${chrome.runtime.id}/`, '');
	};

	/**
	 * Is valid url
	 *
	 * @param {String} str
	 */
	exports.isValidUrl = function (str) {
	  try {
	    new URL(str);
	    return true;
	  } catch (e) {
	    return false;
	  }
	};

	/**
	 * Safer version of path.join() that can also join url with path
	 * (lib from node-browserify remove second slash after protocol `http://abc` --> `http:/abc`)
	 */
	exports.join = function () {
	  return [].map.call(arguments, arg => exports.trimSlashes(arg)).join('/');
	};


/***/ }),
/* 9 */
/***/ (function(module, exports) {

	'use strict';

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		return str.replace(matchOperatorsRe, '\\$&');
	};


/***/ }),
/* 10 */,
/* 11 */,
/* 12 */
/***/ (function(module, exports) {

	
	exports.UI_URL = chrome.runtime.getURL('core/ui/ui.html');


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Main App controller
	 */

	const fs = __webpack_require__(14);
	const specialUrlCatcher = __webpack_require__(22);
	const uiApi = __webpack_require__(23);
	const {onReady} = __webpack_require__(336);
	const logger = __webpack_require__(88).create('App');

	exports.start = function() {
	  uiApi.init();
	  specialUrlCatcher.start();
	  return fs.init({type: window.PERSISTENT})
	    .then(() => {
	      logger.log('Ready');
	      onReady.dispatch();
	    });
	};


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * HTML5 Filesystem API
	 * @module fs
	 */

	const utils = __webpack_require__(15);
	const errors = __webpack_require__(16);
	const root = __webpack_require__(17);
	const file = __webpack_require__(18);
	const directory = __webpack_require__(19);
	const stat = __webpack_require__(20);
	const quota = __webpack_require__(21);

	/**
	 * Is filesystem API supported by current browser
	 *
	 * @returns {Boolean}
	 */
	exports.isSupported = function () {
	  return Boolean(window.webkitRequestFileSystem);
	};

	/**
	 * Init filesystem
	 *
	 * @param {Object} [options]
	 * @param {Number} [options.type=window.PERSISTENT] window.PERSISTENT | window.TEMPORARY
	 * @param {Number} [options.bytes=1Mb]
	 * @param {Boolean} [options.requestQuota=true] show request quota popup for PERSISTENT type.
	 * (`false` for Chrome extensions with `unlimitedStorage` permission)
	 * @returns {Promise}
	 */
	exports.init = function (options = {}) {
	  const type = options.hasOwnProperty('type') ? options.type : window.PERSISTENT;
	  const bytes = options.bytes || 1024 * 1024;
	  assertType(type);
	  const requestQuota = type === window.PERSISTENT
	    ? (options.requestQuota === undefined ? true : options.requestQuota)
	    : false;
	  return Promise.resolve()
	    .then(() => requestQuota ? quota.requestPersistent(bytes) : bytes)
	    // webkitRequestFileSystem always returns fs even if quota not granted
	    .then(grantedBytes => utils.promiseCall(window, 'webkitRequestFileSystem', type, grantedBytes))
	    .then(fs => {
	      root.set(fs.root, type);
	      return fs;
	    });
	};

	/**
	 * Gets used and granted bytes
	 *
	 * @returns {Promise<{usedBytes, grantedBytes}>}
	 */
	exports.usage = function () {
	  return quota.usage(root.getType());
	};

	/**
	 * Returns root directory
	 *
	 * @returns {FileSystemDirectoryEntry}
	 */
	exports.getRoot = function () {
	  return root.get();
	};

	/**
	 * Reads file content
	 *
	 * @param {String|FileSystemFileEntry} path
	 * @param {Object} [options]
	 * @param {String} [options.type='Text'] how content should be read: Text|ArrayBuffer|BinaryString|DataURL
	 * @returns {Promise<String>}
	 */
	exports.readFile = function (path, options = {}) {
	  return file.get(path)
	    .then(fileEntry => file.read(fileEntry, options));
	};

	/**
	 * Writes data to file
	 *
	 * @param {String} path
	 * @param {String|Blob|File|ArrayBuffer} data
	 * @returns {Promise}
	 */
	exports.writeFile = function (path, data) {
	  return file.get(path, {create: true, overwrite: true})
	    .then(fileEntry => file.write(fileEntry, data, {append: false}));
	};

	/**
	 * Appends data to file
	 *
	 * @param {String|FileSystemFileEntry} path
	 * @param {String|Blob|File|ArrayBuffer} data
	 * @returns {Promise}
	 */
	exports.appendFile = function (path, data) {
	  return file.get(path, {create: true, overwrite: false})
	    .then(fileEntry => file.write(fileEntry, data, {append: true}));
	};

	/**
	 * Removes file
	 *
	 * @param {String|FileSystemFileEntry} path
	 * @returns {Promise}
	 */
	exports.unlink = function (path) {
	  return file.get(path)
	    .then(
	      fileEntry => utils.promiseCall(fileEntry, 'remove'),
	      e => errors.isNotFoundError(e)
	        ? Promise.resolve(false)
	        : Promise.reject(e)
	    );
	};

	/**
	 * Renames file or directory
	 *
	 * @param {String|FileSystemEntry} oldPath
	 * @param {String} newPath
	 * @param {Object} [options]
	 * @param {Boolean} [options.create=false] create missing directories
	 * @returns {Promise<FileSystemEntry>}
	 */
	exports.rename = function (oldPath, newPath, options = {}) {
	  return moveOrCopy(oldPath, newPath, 'moveTo', options);
	};

	/**
	 * Copies file or directory
	 *
	 * @param {String|FileSystemEntry} oldPath
	 * @param {String} newPath
	 * @param {Object} [options]
	 * @param {Boolean} [options.create=false] create missing directories
	 * @returns {Promise<FileSystemEntry>}
	 */
	exports.copy = function (oldPath, newPath, options = {}) {
	  return moveOrCopy(oldPath, newPath, 'copyTo', options);
	};

	/**
	 * Removes directory recursively
	 *
	 * @param {String|FileSystemDirectoryEntry} path
	 * @returns {Promise}
	 */
	exports.rmdir = function (path) {
	  return directory.get(path)
	    .then(
	      dir => dir === root.get()
	        ? Promise.reject('Can not remove root. Use clear() to clear fs.')
	        : utils.promiseCall(dir, 'removeRecursively'),
	      e => errors.isNotFoundError(e)
	        ? Promise.resolve(false)
	        : Promise.reject(e)
	    )
	};

	/**
	 * Creates new directory. If directory already exists - it will not be overwritten.
	 *
	 * @param {String} path
	 * @returns {Promise<FileSystemDirectoryEntry>}
	 */
	exports.mkdir = function (path) {
	  return directory.get(path, {create: true});
	};

	/**
	 * Checks that file or directory exists by provided path
	 *
	 * @param {String} path
	 * @returns {Promise<Boolean>}
	 */
	exports.exists = function (path) {
	  return exports.getEntry(path)
	    .then(() => true, e => errors.isNotFoundError(e)
	      ? false
	      : Promise.reject(e)
	    );
	};

	/**
	 * Gets info about file or directory
	 *
	 * @param {String|FileSystemEntry} path
	 * @returns {Promise<StatObject>}
	 */
	exports.stat = function (path) {
	  return exports.getEntry(path)
	    .then(entry => stat.get(entry));
	};

	/**
	 * Reads directory content
	 *
	 * @param {String|FileSystemDirectoryEntry} path
	 * @param {Object} [options]
	 * @param {Boolean} [options.deep=false] read recursively and attach data as `children` property
	 * @returns {Promise<Array<FileSystemEntry>>}
	 */
	exports.readdir = function (path, options = {}) {
	  return directory.get(path)
	    .then(dir => options.deep
	      ? directory.readDeep(dir)
	      : directory.read(dir)
	    )
	};

	/**
	 * Clears whole filesystem
	 * @returns {Promise}
	 */
	exports.clear = function () {
	  return exports.readdir('/')
	    .then(entries => {
	      const tasks = entries.map(entry => entry.isDirectory
	        ? utils.promiseCall(entry, 'removeRecursively')
	        : utils.promiseCall(entry, 'remove')
	      );
	      return Promise.all(tasks);
	    });
	};

	/**
	 * Gets URL for path
	 *
	 * @param {String|FileSystemEntry} path
	 * @returns {String}
	 */
	exports.getUrl = function (path) {
	  return exports.getEntry(path)
	    .then(entry => entry.toURL())
	};

	/**
	 * Gets file or directory
	 *
	 * @param {String|FileSystemEntry} path
	 * @returns {Promise<FileSystemEntry>}
	 */
	exports.getEntry = function (path) {
	  return file.get(path)
	    .catch(e => errors.isTypeMismatchError(e)
	      ? directory.get(path)
	      : Promise.reject(e)
	    );
	};

	function moveOrCopy(oldPath, newPath, method, options) {
	  if (oldPath === newPath) {
	    return Promise.resolve();
	  }
	  const {
	    dirPath: newParentDirPath,
	    fileName: newName,
	  } = utils.parsePath(newPath);
	  return Promise.all([
	    exports.getEntry(oldPath),
	    directory.get(newParentDirPath, options)
	  ]).then(([enrty, newParent]) => {
	    return utils.promiseCall(enrty, method, newParent, newName);
	  });
	}

	function assertType(type) {
	  if (type !== window.PERSISTENT && type !== window.TEMPORARY) {
	    throw new Error(`Unknown storage type ${type}`);
	  }
	}


/***/ }),
/* 15 */
/***/ (function(module, exports) {

	/**
	 * Utils
	 */

	exports.promiseCall = function (obj, method) {
	  if (!obj) {
	    throw new Error(`Can't call promisified method '${method}' of ${obj}`);
	  }
	  const args = [].slice.call(arguments, 2);
	  return new Promise((resolve, reject) => {
	    // create error before call to capture stack
	    const errback = getErrback(new Error(), method, args, reject);
	    const fullArgs = args.concat([resolve, errback]);
	    return obj[method].apply(obj, fullArgs);
	  });
	};

	exports.parsePath = function (path) {
	  const parts = exports.splitPath(path);
	  const fileName = parts.pop();
	  const dirPath = parts.join('/');
	  return {dirPath, fileName};
	};

	exports.splitPath = function (path = '') {
	  path = path.replace(/^\.\//, ''); // remove './' at start
	  if (path.length > 1 && path.endsWith('/')) {
	    throw new Error(`Path can not end with '/'`);
	  }
	  return path.split('/').filter(Boolean);
	};

	/**
	 * Convert DOMException to regular error to have normal stack trace
	 * Also add some details to error message
	 */
	function getErrback(err, method, args, reject) {
	  return function (e) {
	    let argsStr = '';
	    try {
	      argsStr = JSON.stringify(args);
	    } catch (ex) {
	      argsStr = args.join(', ');
	    }
	    err.name = e.name;
	    err.message = `${e.message} Call: ${method}(${argsStr})`;
	    reject(err);
	  };
	}


/***/ }),
/* 16 */
/***/ (function(module, exports) {

	/**
	 * Errors
	 */

	exports.isNotFoundError = function (e) {
	  return e && e.name === 'NotFoundError';
	};

	exports.isTypeMismatchError = function (e) {
	  return e && e.name === 'TypeMismatchError';
	};


/***/ }),
/* 17 */
/***/ (function(module, exports) {

	/**
	 * Store link to fs root (singleton)
	 */

	let root = null;
	let type = null;

	exports.get = function () {
	  if (!root) {
	    throw new Error('Filesystem not initialized.');
	  } else {
	    return root;
	  }
	};

	exports.set = function (newRoot, newType) {
	  root = newRoot;
	  type = newType;
	};

	exports.getType = function () {
	  return type;
	};


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Operations with files
	 */

	const utils = __webpack_require__(15);
	const errors = __webpack_require__(16);
	const directory = __webpack_require__(19);

	/**
	 * Returns FileEntry by path
	 * If options.create = true will create missing directories and file
	 *
	 * @param {String|FileSystemFileEntry} path
	 * @param {Object} [options]
	 * @param {Boolean} [options.create]
	 * @param {Boolean} [options.overwrite]
	 * @returns {Promise}
	 */
	exports.get = function (path, options = {}) {
	  if (path && typeof path !== 'string') {
	    return path.isFile
	      ? Promise.resolve(path)
	      : Promise.reject(new DOMError('TypeMismatchError', 'Expected file but got directory'));
	  }
	  const {dirPath, fileName} = utils.parsePath(path);
	  return Promise.resolve()
	    .then(() => directory.get(dirPath, options))
	    .then(dir => {
	      if (options.create) {
	        if (options.overwrite) {
	          return createChildFile(dir, fileName);
	        } else {
	          return getChildFile(dir, fileName)
	            .catch(e => errors.isNotFoundError(e)
	              ? createChildFile(dir, fileName)
	              : Promise.reject(e))
	        }
	      } else {
	        return getChildFile(dir, fileName);
	      }
	    });
	};

	/**
	 * Writes to fileEntry using fileWriter
	 *
	 * @param {Object} fileEntry
	 * @param {String} data
	 * @param {Object} [options]
	 * @param {Boolean} [options.append]
	 * @param {String} [options.type] mimetype
	 * @returns {Promise}
	 */
	exports.write = function (fileEntry, data, options = {}) {
	  return utils.promiseCall(fileEntry, 'createWriter')
	    .then(fileWriter => {
	      return new Promise((resolve, reject) => {
	        if (options.append) {
	          fileWriter.seek(fileWriter.length);
	          fileWriter.onwriteend = resolve;
	        } else {
	          let truncated = false;
	          fileWriter.onwriteend = function () {
	            if (!truncated) {
	              truncated = true;
	              this.truncate(this.position);
	            } else {
	              resolve();
	            }
	          };
	        }
	        fileWriter.onerror = reject;
	        const blob = new Blob([data], {type: getMimeTypeByData(data)});
	        fileWriter.write(blob);
	      });
	    })
	    .then(() => fileEntry)
	};

	/**
	 * Reads from fileEntry
	 *
	 * @param {Object} fileEntry
	 * @param {Object} [options]
	 * @param {String} [options.type] how content should be read
	 * @returns {Promise<String>}
	 */
	exports.read = function (fileEntry, options = {}) {
	  return utils.promiseCall(fileEntry, 'file')
	    .then(file => {
	      return new Promise((resolve, reject) => {
	        const reader = new FileReader();
	        reader.onload = () => resolve(reader.result);
	        reader.onerror = () => reject(reader.error);
	        // see: https://developer.mozilla.org/ru/docs/Web/API/FileReader
	        readAs(options.type, reader, file);
	      });
	    });
	};

	function getMimeTypeByData(data) {
	  if (typeof data === 'string') {
	    return 'text/plain';
	  } else {
	    return 'application/octet-binary';
	  }
	}

	function readAs(type, reader, file) {
	  switch (type) {
	    case 'ArrayBuffer':
	      return reader.readAsArrayBuffer(file);
	    case 'BinaryString':
	      return reader.readAsBinaryString(file);
	    case 'DataURL':
	      return reader.readAsDataURL(file);
	    case 'Text':
	    default:
	      return reader.readAsText(file);
	  }
	}

	function createChildFile(parent, fileName) {
	  return utils.promiseCall(parent, 'getFile', fileName, {create: true, exclusive: false});
	}

	function getChildFile(parent, fileName) {
	  return utils.promiseCall(parent, 'getFile', fileName, {create: false});
	}


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Operations with directories
	 */

	const utils = __webpack_require__(15);
	const errors = __webpack_require__(16);
	const root = __webpack_require__(17);

	/**
	 * Returns DirectoryEntry by path
	 * If options.create = true will create missing directories
	 *
	 * @param {String} path
	 * @param {Object} options
	 * @param {Boolean} options.create
	 * @returns {Promise}
	 */
	exports.get = function (path, options = {}) {
	  if (path && typeof path !== 'string') {
	    return path.isDirectory
	      ? Promise.resolve(path)
	      : Promise.reject(new DOMError('TypeMismatchError', 'Expected directory but got file'));
	  }
	  const parts = utils.splitPath(path);
	  return parts.reduce((res, dirName) => {
	    return res.then(dir => {
	      let task = getChildDir(dir, dirName);
	      if (options.create) {
	        task = task.catch(e => errors.isNotFoundError(e)
	          ? createChildDir(dir, dirName)
	          : Promise.reject(e));
	      }
	      return task;
	    });
	  }, Promise.resolve(root.get()));
	};

	/**
	 * Reads dir entries
	 *
	 * @param {Object} dir
	 */
	exports.read = function (dir) {
	  return utils.promiseCall(dir.createReader(), 'readEntries')
	};

	/**
	 * Reads dir entries deeply
	 *
	 * @param {Object} dir
	 * @returns {Promise<Array>}
	 */
	exports.readDeep = function (dir) {
	  return exports.read(dir)
	    .then(entries => {
	      const tasks = entries.map(entry => {
	        if (entry.isDirectory) {
	          return exports.readDeep(entry)
	            .then(subEntries => Object.assign(entry, {children: subEntries}))
	        } else {
	          return Promise.resolve(entry);
	        }
	      });
	      return Promise.all(tasks);
	    });
	};

	function createChildDir(parent, dirName) {
	  return utils.promiseCall(parent, 'getDirectory', dirName, {create: true, exclusive: true});
	}

	function getChildDir(parent, dirName) {
	  return utils.promiseCall(parent, 'getDirectory', dirName, {create: false});
	}


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Stat for file or directory
	 */

	const utils = __webpack_require__(15);

	/**
	 * Gets stat info
	 *
	 * @param {FileSystemEntry} entry
	 * @returns {Promise<StatObject>}
	 */
	exports.get = function (entry) {
	  return utils.promiseCall(entry, 'getMetadata')
	    .then(metadata => {
	      return {
	        isFile: entry.isFile,
	        isDirectory: entry.isDirectory,
	        name: entry.name,
	        fullPath: entry.fullPath,
	        modificationTime: metadata.modificationTime,
	        size: metadata.size,
	      };
	    })
	};


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Requesting quota
	 */

	const utils = __webpack_require__(15);

	exports.requestPersistent = function (bytes) {
	  const storage = getStorageByType(window.PERSISTENT);
	  return utils.promiseCall(storage, 'requestQuota', bytes)
	    .then(grantedBytes => grantedBytes > 0
	      ? Promise.resolve(grantedBytes)
	      : Promise.reject('Quota not granted')
	    );
	};

	exports.usage = function (type) {
	  const storage = getStorageByType(type);
	  return utils.promiseCall(storage, 'queryUsageAndQuota')
	    .then((usedBytes, grantedBytes) => {
	      return {usedBytes, grantedBytes};
	    });
	};

	function getStorageByType(type) {
	  return type === window.PERSISTENT
	    ? navigator.webkitPersistentStorage
	    : navigator.webkitTemporaryStorage;
	}


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Catches special url 'http://autotester' to launch ui
	 */

	const thenChrome = __webpack_require__(1);
	const constants = __webpack_require__(12);

	const SPECIAL_HOSTNAME = 'autotester';

	exports.start = function () {
	  if (!isSelfTest()) {
	    listenTabUpdated();
	    findSpecialTab()
	      .then(tab => tab ? openUi(tab) : null);
	  }
	};

	function findSpecialTab() {
	  return thenChrome.tabs.query({})
	    .then(tabs => tabs.find(isSpecialTab))
	}

	function isSpecialTab(tab) {
	  try {
	    const urlObj = new URL(tab.url);
	    return urlObj.hostname === SPECIAL_HOSTNAME;
	  } catch (e) {
	    return false;
	  }
	}

	function openUi(tab) {
	  thenChrome.tabs.update(tab.id, {url: constants.UI_URL, active: true});
	}

	function listenTabUpdated() {
	  chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
	    if (changeInfo.status === 'loading' && isSpecialTab(tab)) {
	      openUi(tab);
	    }
	  });
	}

	/**
	 * For self test build dont catch special url
	 */
	function isSelfTest() {
	  return chrome.runtime.getManifest().name.indexOf('SELF TEST') === 0;
	}


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Communication with ui page
	 */

	const messaging = __webpack_require__(24);
	const externalEvents = __webpack_require__(25);
	const testsRun = __webpack_require__(27);
	const {
	  onTestsDone,
	  onReady,
	  onSessionStarted,
	  onFileStarted,
	  onTestStarted,
	} = __webpack_require__(336);

	const {
	  RELOAD,
	  TESTS_RUN,
	  TESTS_DONE,
	  SESSION_STARTED,
	  FILE_STARTED,
	  TEST_STARTED,
	} = externalEvents;

	exports.init = function() {
	  messaging.registerEvents(externalEvents);
	  messaging.on(TESTS_RUN, runTests);
	  onReady.addListener(() => messaging.send(RELOAD));
	  onTestsDone.addListener(() => messaging.send(TESTS_DONE));
	  // todo: make this channeling in more automatic way (e.g. event flag isExternal: true)
	  // todo: think also about disabling bi-directional external channels to avoid cyclic flow
	  onSessionStarted.addListener(data => messaging.send(SESSION_STARTED, data));
	  onFileStarted.addListener(data => messaging.send(FILE_STARTED, data));
	  onTestStarted.addListener(data => messaging.send(TEST_STARTED, data));
	  messaging.start();
	};

	function runTests(data) {
	  testsRun.run(data)
	}


/***/ }),
/* 24 */
/***/ (function(module, exports) {

	/**
	 * Control messages flow between bg and tabs
	 * - bg messages are received by all tabs
	 * - tab messages are received only by background
	 * Internal msg format:
	 * {
	 *   name: {String}
	 *   payload: {*}
	 * }
	 *
	 * message - is transport layer, via chrome runtime
	 * event - something that occurs and should be transferred
	 */

	const registeredListeners = new Map();
	const registeredEvents = new Set();
	// todo: will not work for event-pages
	const isBackgroundPage = chrome.extension.getBackgroundPage() === window;

	/**
	 * Start listen messages
	 *
	 * @param {Object} [events] available events
	 */
	exports.start = function (events) {
	  if (events) {
	    exports.registerEvents(events);
	  }
	  chrome.runtime.onMessage.addListener(onMessage);
	};

	/**
	 * Register events
	 */
	exports.registerEvents = function (events) {
	  if (Array.isArray(events)) {
	    events.forEach(key => registeredEvents.add(events[key]));
	  } else if (events && typeof events === 'object') {
	    Object.keys(events).forEach(key => registeredEvents.add(events[key]));
	  } else {
	    throw new Error('Events should be array or object to register');
	  }
	};

	/**
	 * Send message from tab to bg OR visa-versa
	 * @param {String} name
	 * @param {*} payload
	 */
	exports.send = function (name, payload) {
	  assertEventName(name);
	  const msg = wrapKnownMessage({name, payload});
	  return new Promise(resolve => {
	    chrome.runtime.sendMessage(msg, resolve);
	  });
	};

	/**
	 * Add listener to message
	 * @param {String} name
	 * @param {Function} fn
	 */
	exports.on = function (name, fn) {
	  assertEventName(name);
	  const msgListeners = registeredListeners.get(name) || [];
	  msgListeners.push(fn);
	  registeredListeners.set(name, msgListeners);
	};

	function onMessage(msg, sender, sendResponse) {
	  if (!isKnownMessage(msg)) {
	    return;
	  }

	  const fromTabToTab = sender.tab && !isBackgroundPage;
	  const fromBgToBg = !sender.tab && isBackgroundPage;
	  if (fromTabToTab || fromBgToBg) {
	    return;
	  }

	  assertEventName(msg.name);

	  const msgListeners = registeredListeners.get(msg.name);
	  if (msgListeners && msgListeners.length) {
	    let asyncResponse = false;
	    let result;
	    msgListeners.forEach(listener => {
	      try {
	        result = listener(msg.payload, sender, sendResponse);
	      } catch (e) {
	        // we need to re-throw error in next tick to be out of onMessage handler and allow event to bubble
	        // todo: try capture error stack
	        throwAsync(e);
	      }
	      if (result === true) {
	        asyncResponse = true;
	      }
	      if (isPromise(result)) {
	        asyncResponse = true;
	        result.then(
	          data => sendResponse(data),
	          e => sendResponse(e && e.stack || String(e))
	        );
	      }
	    });
	    // if at least some result is true or promise, we should return true
	    // to show that sendResponse will be called asynchroniously
	    return asyncResponse;
	  }
	}

	function assertEventName(name) {
	  if (!registeredEvents.has(name)) {
	    throw new Error(`Unknown event ${name}`);
	  }
	}

	function isKnownMessage(msg) {
	  return msg && msg.isMessaging;
	}

	function wrapKnownMessage(msg) {
	  return Object.assign(msg, {
	    isMessaging: true
	  });
	}

	function isPromise(obj) {
	  return obj && typeof obj.then === 'function';
	}

	function throwAsync(e) {
	  setTimeout(() => {
	    throw e;
	  }, 0);
	}


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * External events.
	 * This file should be included in both bg and tab contexts.
	 */

	const keyMirror = __webpack_require__(26);

	/**
	 * List of all messages
	 */
	module.exports = keyMirror({
	  // from tab
	  TESTS_RUN: null,
	  // from bg
	  RELOAD: null,
	  TESTS_DONE: null,
	  SESSION_STARTED: null,
	  FILE_STARTED: null,
	  TEST_STARTED: null,
	});


/***/ }),
/* 26 */
/***/ (function(module, exports) {

	/**
	 * Copyright 2013-2014 Facebook, Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */

	"use strict";

	/**
	 * Constructs an enumeration with keys equal to their value.
	 *
	 * For example:
	 *
	 *   var COLORS = keyMirror({blue: null, red: null});
	 *   var myColor = COLORS.blue;
	 *   var isColorValid = !!COLORS[myColor];
	 *
	 * The last line could not be performed if the values of the generated enum were
	 * not equal to their keys.
	 *
	 *   Input:  {key1: val1, key2: val2}
	 *   Output: {key1: key1, key2: key2}
	 *
	 * @param {object} obj
	 * @return {object}
	 */
	var keyMirror = function(obj) {
	  var ret = {};
	  var key;
	  if (!(obj instanceof Object && !Array.isArray(obj))) {
	    throw new Error('keyMirror(...): Argument must be an object.');
	  }
	  for (key in obj) {
	    if (!obj.hasOwnProperty(key)) {
	      continue;
	    }
	    ret[key] = key;
	  }
	  return ret;
	};

	module.exports = keyMirror;


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Runs tests
	 */

	const Run = __webpack_require__(28);
	const {
	  onTestsDone,
	  onSessionStarted,
	  onFileStarted,
	  onTestStarted
	} = __webpack_require__(336);

	/**
	 * Run tests
	 *
	 * @param {Object} data
	 * @param {Object} data.target where to run tests
	 * @param {String} [data.baseUrl] base url for files
	 * @param {Array<String>} [data.files] files relative to baseUrl to be downloaded and runned
	 * @param {Array<{path, code}>} [data.snippets] snippets
	 * @param {Boolean} [data.devMode]
	 */
	exports.run = function (data) {
	  try {
	    const run = new Run({
	      uiWindow: getUiWindow(),
	      devMode: data.devMode,
	      engine: 'selenium',
	      target: data.target,
	    });

	    setRunnerListeners(run.runner, data);

	    const runningPromise = data.snippets
	      ? run.runSnippets(data.snippets)
	      : run.runRemoteFiles(data.files, data.baseUrl);

	    return runningPromise
	      .then(done, fail);
	  } catch (e) {
	    fail(e);
	  }
	};

	/**
	 * Returns first autotester ui window
	 */
	function getUiWindow() {
	  const views = chrome.extension.getViews({type: 'tab'});
	  if (views.length) {
	    return views[0];
	  } else {
	    throw new Error('Autotester tab not found!');
	  }
	}

	function setRunnerListeners(runner, data) {
	  runner.onFileStarted.addListener(res => onFileStarted.dispatch(res));
	  runner.onTestStarted.addListener(res => onTestStarted.dispatch(res));
	  runner.onSessionStarted.addListener(res => {
	    onSessionStarted.dispatch({
	      sessionId: res.sessionId,
	      target: data.target,
	    });
	  });
	}

	function done() {
	  onTestsDone.dispatch();
	}

	function fail(e) {
	  onTestsDone.dispatch();
	  throw e;
	}


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Top-level Run class
	 */

	const utils = __webpack_require__(8);
	const Runner = __webpack_require__(29);
	const engines = __webpack_require__(92);
	const loopback = __webpack_require__(294);
	const extras = __webpack_require__(330);
	const networkLogger = __webpack_require__(335);
	const logger = __webpack_require__(88).create('Run');

	const RUNTIME_DIR = 'runtime';

	module.exports = class Run {
	  /**
	   * Constructor
	   *
	   * @param {Object} options
	   * @param {Object} options.uiWindow
	   * @param {Boolean} options.devMode
	   * @param {String} options.engine
	   * @param {Object} options.target {loopback, serverUrl, caps, name}
	   */
	  constructor(options) {
	    this._options = options;
	    this._snippets = [];
	    networkLogger.init();
	    extras.setup();
	    this._setupEngine();
	    this._setupLoopback();
	    this.runner = new Runner();
	  }

	  /**
	   * Run scenarios from array of remote files (paths) and baseUrl
	   *
	   * @param {Array<String>} files relative filepaths
	   * @param {String} baseUrl
	   * @returns {Promise}
	   */
	  runRemoteFiles(files, baseUrl) {
	    logger.log(`Running ${files.length} file(s) from baseUrl: ${baseUrl}`);
	    return Promise.resolve()
	      .then(() => this._fetchRemoteFiles(files, baseUrl))
	      .then(() => this._run())
	  }

	  /**
	   * Run snippets
	   *
	   * @param {Array<{path, code}>} snippets
	   * @returns {Promise}
	   */
	  runSnippets(snippets) {
	    logger.log(`Running ${snippets.length} snippet(s)`);
	    this._snippets = snippets;
	    return Promise.resolve()
	      .then(() => this._run())
	  }

	  _run() {
	    return this.runner.run({
	      tests: this._snippets,
	      localBaseDir: RUNTIME_DIR,
	      uiWindow: this._options.uiWindow,
	      devMode: this._options.devMode,
	      engine: this._options.engine,
	    });
	  }

	  _setupEngine() {
	    logger.log(`Running on target:`, this._options.target);
	    const engine = engines[this._options.engine];
	    engine.setServerUrl(this._options.target.serverUrl);
	    engine.setCapabilities(this._options.target.caps);
	  }

	  _setupLoopback() {
	    if (this._options.target.loopback) {
	      loopback.setup(this._options.target.serverUrl);
	    }
	  }

	  _fetchRemoteFiles(files, baseUrl) {
	    this._snippets.length = 0;
	    const tasks = files.map(file => {
	      const url = utils.join(baseUrl, file);
	      return utils.fetchText(url);
	    });
	    return Promise.all(tasks)
	      .then(texts => {
	        this._snippets = texts.map((text, index) => {
	          return {
	            path: files[index],
	            code: text,
	          };
	        });
	      });
	  }
	};


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Main runner.
	 * There are 3 approaches how to run test files dynamically:
	 *
	 * 1. RUN VIA EVAL: wrap each file into anonymous function and eval
	 * - impossible to debug
	 * - ugly error stack
	 *
	 * 2. RUN IN IFRAME: create iframe and load files from local filesystem
	 * + independent window instance
	 * + easy cleanup: just remove iframe
	 * + better error handling: own onerror event in frame
	 * + easy set any globals, no access to top window globals (only as window.parent.*)
	 * - bugs with instanceof, iframe has own context: we need to load asserts separately, split fake-require function
	 * - need to pass chrome object
	 *
	 * 3. RUN IN TOP WINDOW: load files from local filesystem in main window
	 * - possible dirty top window
	 * - manually remove all script tags with test-files
	 * + no other problems as in #1 and #2
	 *
	 *
	 * Currently we use #2 but maybe move to #3 in future.
	 *
	 * Input: Array<{code, path}>
	 * Steps:
	 * - clean up
	 * - save local
	 * - setup test runner
	 * - inject local files as script tags
	 * - wait until execution ends
	 */

	const Channel = __webpack_require__(30);
	const promise = __webpack_require__(36);
	const fs = __webpack_require__(14);
	const utils = __webpack_require__(8);
	const httpAlias = __webpack_require__(41);
	const MochaRunner = __webpack_require__(83);
	const FileRunner = __webpack_require__(89);
	const globals = __webpack_require__(90);
	const engines = __webpack_require__(92);
	const logger = __webpack_require__(88).create('Runner');

	const DEFAULT_TEST_RUNNER_OPTIONS = {
	  timeout: 30 * 1000,
	  bail: false,
	};

	class Runner {
	  /**
	   * Constructor
	   */
	  constructor() {
	    this._localUrls = [];
	    // todo: use custom flow
	    // todo2: dont use flow at all :)
	    this._flow = promise.controlFlow();
	    // start of file execution
	    this.onFileStarted = new Channel();
	    // start of test execution
	    this.onTestStarted = new Channel();
	    // webdriver session started
	    this.onSessionStarted = new Channel();
	  }

	  /**
	   * Run tests
	   *
	   * @param {Object} params
	   * @param {Array<{path, code, isSetup}>} params.tests
	   * @param {String} params.localBaseDir base directory to save test-files
	   * @param {Object} params.uiWindow
	   * @param {Boolean} params.devMode
	   * @param {String} params.engine
	   */
	  run(params) {
	    // keep this abstraction if someday we will need run in iframe
	    this._context = window;
	    this._params = params;

	    // todo: refactor - remove somewhere else
	    const Targets = __webpack_require__(290);
	    Targets.dontCloseTabs = params.devMode;

	    return Promise.resolve()
	      .then(() => this._cleanBefore())
	      .then(() => this._listenHttp())
	      .then(() => this._saveToLocalFs())
	      .then(() => this._setupTestRunner())
	      .then(() => this._setupGlobals())
	      .then(() => this._runLocalUrls())
	      .then(() => this._testRunner.tryRun())
	      .then(() => this._done(), e => this._fail(e));
	  }

	  /**
	   * Save tests to local filesystem
	   * Use serial approach as in parallel there are errors.
	   */
	  _saveToLocalFs() {
	    return this._params.tests.reduce((res, test) => {
	      const content = wrapCode(test.code);
	      const localPath = utils.join(this._params.localBaseDir, test.path);
	      return res
	        .then(() => fs.writeFile(localPath, content))
	        .then(entry => this._localUrls.push(entry.toURL()))
	    }, Promise.resolve())
	  }

	  _setupTestRunner() {
	    const options = Object.assign({}, DEFAULT_TEST_RUNNER_OPTIONS, {
	      uiWindow: this._params.uiWindow,
	      bail: this._params.devMode,
	    });
	    this._testRunner = new MochaRunner(options);
	    this._testRunner.onTestStarted.addListener(data => this.onTestStarted.dispatch(data));
	    return this._testRunner.loadTo(this._context);
	  }

	  _setupGlobals() {
	    globals.setGlobals(this._context, this._params.uiWindow);
	    engines[this._params.engine].setGlobals(this._context);
	  }

	  _runLocalUrls() {
	    const count = this._localUrls.length;
	    return this._localUrls.reduce((res, url, index) => {
	      return res
	        .then(() => this.onFileStarted.dispatch({index, count, url}))
	        .then(() => new FileRunner(url, this._context).run())
	    }, Promise.resolve());
	  }

	  _listenHttp() {
	    this._subscription = new Channel.Subscription([
	      {
	        channel: httpAlias.onResponse,
	        listener: this._onHttpResponse.bind(this)
	      }
	    ]).on();
	  }

	  _done() {
	    this._cleanAfter();
	    logger.log('Done');
	  }

	  _fail(e) {
	    try {
	      this._cleanAfter();
	    } catch (err) {
	      logger.error('Nested error', err);
	    }
	    throw e;
	  }

	  _cleanBefore() {
	    this._flow.reset();
	    this._localUrls.length = 0;
	    globals.clear(this._context);
	    // todo: dont clean whole dir in future, but currently keep it to test performance
	    return fs.rmdir(this._params.localBaseDir);
	  }

	  _cleanAfter() {
	    this._cleanScriptTags();
	    if (this._subscription) {
	      this._subscription.off();
	    }
	    globals.clear(this._context);
	  }

	  _cleanScriptTags() {
	    utils.removeBySelector('script[src^="filesystem:"]', this._context.document);
	  }

	  _onHttpResponse({request, options, data}) {
	    if (isNewSessionRequest(request, options)) {
	      try {
	        const parsed = JSON.parse(data);
	        this.onSessionStarted.dispatch({
	          sessionId: parsed.sessionId,
	          options: this._options,
	          response: parsed,
	        });
	      } catch (e) {
	        logger.error(`Can not parse response data`, e, data);
	      }
	    }
	  }
	}

	function isNewSessionRequest(request, options) {
	  return options.method === 'POST' && request.uri.endsWith('/session');
	}

	function wrapCode(code) {
	  return [
	    '(function (console) { try { /* <=== Autotester wrapper */ ',
	    code,
	    '} catch(e) {__onTestFileError.dispatch(e)}})(uiConsole); /* <=== Autotester wrapper */'
	  ].join('');
	}

	module.exports = Runner;


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _channel = __webpack_require__(31);

	var _channel2 = _interopRequireDefault(_channel);

	var _eventEmitter = __webpack_require__(32);

	var _eventEmitter2 = _interopRequireDefault(_eventEmitter);

	var _subscription = __webpack_require__(33);

	var _subscription2 = _interopRequireDefault(_subscription);

	var _reactSubscription = __webpack_require__(35);

	var _reactSubscription2 = _interopRequireDefault(_reactSubscription);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	/**
	 * Chnl entry point
	 */

	_channel2.default.EventEmitter = _eventEmitter2.default;
	_channel2.default.Subscription = _subscription2.default;
	_channel2.default.ReactSubscription = _reactSubscription2.default;

	exports.default = _channel2.default;
	/*
	  Can not export additional classes like:

	  export {
	    EventEmitter,
	    Subscription,
	  };

	  because in that case babel's output is not compatible with pure commonjs
	  See: http://stackoverflow.com/questions/33505992/babel-6-changes-how-it-exports-default
	*/

	module.exports = exports['default'];

/***/ }),
/* 31 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Channel
	 */

	var innerEvents = ['onListenerAdded', 'onListenerRemoved', 'onFirstListenerAdded', 'onLastListenerRemoved'];

	var Channel = function () {
	  /**
	   * Constructor
	   * @param {String} [name]
	   * @param {Boolean} [noInnerEvents]
	   */
	  function Channel(name, noInnerEvents) {
	    var _this = this;

	    _classCallCheck(this, Channel);

	    this._listeners = [];
	    this._mute = false;
	    this._accumulate = false;
	    this._accumulatedEvents = [];
	    this._name = name || '';
	    this._noInnerEvents = Boolean(noInnerEvents);
	    if (!noInnerEvents) {
	      innerEvents.forEach(function (eventName) {
	        return _this[eventName] = new Channel(eventName, true);
	      });
	    }
	  }

	  /**
	   * Add listener for event
	   * @param {Function} callback
	   * @param {Object} [context]
	   */


	  _createClass(Channel, [{
	    key: 'addListener',
	    value: function addListener(callback, context) {
	      this._pushListener(callback, context, false);
	    }

	    /**
	     * Add once listener for event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'addOnceListener',
	    value: function addOnceListener(callback, context) {
	      this._pushListener(callback, context, true);
	    }

	    /**
	     * Remove listener from event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'removeListener',
	    value: function removeListener(callback, context) {
	      this._ensureFunction(callback);
	      var index = this._indexOfListener(callback, context);
	      if (index >= 0) {
	        this._listeners.splice(index, 1);
	        this._dispatchInnerRemoveEvents.apply(this, arguments);
	      }
	    }

	    /**
	     * Is listener exist
	     * @param {Function} callback
	     * @param {Object} [context]
	     * @returns {Boolean}
	     */

	  }, {
	    key: 'hasListener',
	    value: function hasListener(callback, context) {
	      this._ensureFunction(callback);
	      return this._indexOfListener(callback, context) >= 0;
	    }

	    /**
	     * Are there any listeners
	     * @returns {Boolean}
	     */

	  }, {
	    key: 'hasListeners',
	    value: function hasListeners() {
	      return this._listeners.length > 0;
	    }

	    /**
	     * Call all listeners with specified params
	     */

	  }, {
	    key: 'dispatch',
	    value: function dispatch() {
	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      this._invokeListeners({ args: args, async: false });
	    }

	    /**
	     * Call all listeners with specified params asynchronously
	     */

	  }, {
	    key: 'dispatchAsync',
	    value: function dispatchAsync() {
	      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      this._invokeListeners({ args: args, async: true });
	    }

	    /**
	     * Mute channel
	     * @param {Object} [options]
	     * @param {Boolean} [options.accumulate] accumulate events and call listeners after .unmute()
	     */

	  }, {
	    key: 'mute',
	    value: function mute() {
	      var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	      this._mute = true;
	      if (options.accumulate) {
	        this._accumulate = true;
	      } else {
	        this._accumulate = false;
	        this._accumulatedEvents = [];
	      }
	    }

	    /**
	     * Unmute channel
	     */

	  }, {
	    key: 'unmute',
	    value: function unmute() {
	      this._mute = false;
	      if (this._accumulate) {
	        this._dispatchAccumulated();
	        this._accumulate = false;
	      }
	    }

	    /**
	     * @param {Object} options
	     * @param {Array} options.args
	     * @param {Boolean} [options.async]
	     * @private
	     */

	  }, {
	    key: '_invokeListeners',
	    value: function _invokeListeners() {
	      var _this2 = this;

	      var options = arguments.length <= 0 || arguments[0] === undefined ? { args: [], async: false } : arguments[0];

	      if (!this._mute) {
	        // ToDo: block adding/removing listeners to channel (throw an error) during dispatch operation
	        var listnersToInvoke = this._listeners.slice();
	        listnersToInvoke.forEach(function (listener) {
	          _this2._invokeListener(listener, options);
	          if (listener.once) {
	            _this2.removeListener(listener.callback, listener.context);
	          }
	        });
	      } else if (this._accumulate) {
	        this._accumulatedEvents.push(options);
	      }
	    }

	    /**
	     * @param {Object} listener
	     * @param {Object} options
	     * @param {Array} options.args
	     * @param {Boolean} options.async
	     * @private
	     */

	  }, {
	    key: '_invokeListener',
	    value: function _invokeListener(listener, options) {
	      if (options.async) {
	        setTimeout(function () {
	          return listener.callback.apply(listener.context, options.args);
	        }, 0);
	      } else {
	        listener.callback.apply(listener.context, options.args);
	      }
	    }

	    /**
	     * Ensure function
	     * @param {Function} callback
	     */

	  }, {
	    key: '_ensureFunction',
	    value: function _ensureFunction(callback) {
	      if (typeof callback !== 'function') {
	        throw new Error('Channel ' + this._name + ': listener is not a function');
	      }
	    }

	    /**
	     * Dispatch inner events when listener is added
	     * @private
	     */

	  }, {
	    key: '_dispatchInnerAddEvents',
	    value: function _dispatchInnerAddEvents() {
	      if (!this._noInnerEvents) {
	        this.onListenerAdded.dispatch.apply(this.onListenerAdded, arguments);
	        if (this._listeners.length === 1) {
	          this.onFirstListenerAdded.dispatch.apply(this.onFirstListenerAdded, arguments);
	        }
	      }
	    }

	    /**
	     * Dispatch inner events when listener is removed
	     * @private
	     */

	  }, {
	    key: '_dispatchInnerRemoveEvents',
	    value: function _dispatchInnerRemoveEvents() {
	      if (!this._noInnerEvents) {
	        this.onListenerRemoved.dispatch.apply(this.onListenerRemoved, arguments);
	        if (this._listeners.length === 0) {
	          this.onLastListenerRemoved.dispatch.apply(this.onLastListenerRemoved, arguments);
	        }
	      }
	    }

	    /**
	     * Find listener index
	     * @param {Function} callback
	     * @param {Object} [context]
	     * @private
	     */

	  }, {
	    key: '_indexOfListener',
	    value: function _indexOfListener(callback, context) {
	      for (var i = 0; i < this._listeners.length; i++) {
	        var listener = this._listeners[i];
	        var equalCallbacks = listener.callback === callback;
	        var emptyContexts = context === undefined && listener.context === undefined;
	        var equalContexts = context === listener.context;
	        if (equalCallbacks && (emptyContexts || equalContexts)) {
	          return i;
	        }
	      }
	    }

	    /**
	     * Dispatch accumulated events
	     * @private
	     */

	  }, {
	    key: '_dispatchAccumulated',
	    value: function _dispatchAccumulated() {
	      var _this3 = this;

	      this._accumulatedEvents.forEach(function (options) {
	        return _this3._invokeListeners(options);
	      });
	      this._accumulatedEvents = [];
	    }

	    /**
	     * Pushes listener
	     * @param {Function} callback
	     * @param {Object} context
	     * @param {Boolean} once
	     */

	  }, {
	    key: '_pushListener',
	    value: function _pushListener(callback, context, once) {
	      this._ensureFunction(callback);
	      this._listeners.push({ callback: callback, context: context, once: once });
	      this._dispatchInnerAddEvents.apply(this, arguments);
	    }
	  }]);

	  return Channel;
	}();

	exports.default = Channel;
	module.exports = exports['default'];

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	imple event emitter based on channel
	

	var _channel = __webpack_require__(31);

	var _channel2 = _interopRequireDefault(_channel);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var EventEmitter = function () {
	  /**
	   * Constructor
	   */
	  function EventEmitter() {
	    _classCallCheck(this, EventEmitter);

	    this._channels = new Map();
	  }

	  /**
	   * Adds listener to specific event
	   *
	   * @param {String} event
	   * @param {Function} callback
	   * @param {Object} [context]
	   */


	  _createClass(EventEmitter, [{
	    key: 'addListener',
	    value: function addListener(event, callback, context) {
	      this._getChannel(event).addListener(callback, context);
	    }

	    /**
	     * Adds listener to specific event (alias to addListener)
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'on',
	    value: function on(event, callback, context) {
	      this.addListener(event, callback, context);
	    }

	    /**
	     * Adds once listener to specific event
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'addOnceListener',
	    value: function addOnceListener(event, callback, context) {
	      this._getChannel(event).addOnceListener(callback, context);
	    }

	    /**
	     * Adds once listener to specific event (alias to addOnceListener)
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'once',
	    value: function once(event, callback, context) {
	      this.addOnceListener(event, callback, context);
	    }

	    /**
	     * Removes listener from specific event
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'removeListener',
	    value: function removeListener(event, callback, context) {
	      this._getChannel(event).removeListener(callback, context);
	    }

	    /**
	     * Removes listener from specific event (alias to removeListener)
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     */

	  }, {
	    key: 'off',
	    value: function off(event, callback, context) {
	      this.removeListener(event, callback, context);
	    }

	    /**
	     * Is listener exist for specific event
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     * @returns {Boolean}
	     */

	  }, {
	    key: 'hasListener',
	    value: function hasListener(event, callback, context) {
	      return this._getChannel(event).hasListener(callback, context);
	    }

	    /**
	     * Is listener exist for specific event (alias to hasListener)
	     *
	     * @param {String} event
	     * @param {Function} callback
	     * @param {Object} [context]
	     * @returns {Boolean}
	     */

	  }, {
	    key: 'has',
	    value: function has(event, callback, context) {
	      return this.hasListener(event, callback, context);
	    }

	    /**
	     * Are there any listeners for specific event
	     *
	     * @returns {Boolean}
	     */

	  }, {
	    key: 'hasListeners',
	    value: function hasListeners(event) {
	      return this._getChannel(event).hasListeners();
	    }

	    /**
	     * Call all listeners for specific event
	     *
	     * @param {String} event
	     * @param {*} args
	     */

	  }, {
	    key: 'dispatch',
	    value: function dispatch(event) {
	      var _getChannel2;

	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      (_getChannel2 = this._getChannel(event)).dispatch.apply(_getChannel2, args);
	    }

	    /**
	     * Call all listeners for specific event
	     *
	     * @param {String} event
	     * @param {*} args
	     */

	  }, {
	    key: 'emit',
	    value: function emit(event) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      this.dispatch.apply(this, [event].concat(args));
	    }

	    /**
	     * Returns channe by event name
	     *
	     * @param {String} event
	     * @returns {Channel}
	     * @private
	     */

	  }, {
	    key: '_getChannel',
	    value: function _getChannel(event) {
	      if (!this._channels.has(event)) {
	        this._channels.set(event, new _channel2.default(event));
	      }
	      return this._channels.get(event);
	    }
	  }]);

	  return EventEmitter;
	}();

	exports.default = EventEmitter;
	module.exports = exports['default'];

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /**
	ubscription is utility class allowing dynamically attach/detach batch of listeners to event channels.
	
	xample:
	this._subscription = new Channel.Subscription([
	{
	channel: chrome.tabs.onUpdated,
	listener: this._onTabUpdated.bind(this)
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        },
	{
	channel: document.getElementById('button'),
	event: 'click',
	listener: this._onButtonClick.bind(this)
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        }
	
	
	this._subscription.on(); // now listeners are attached
	
	this._subscription.off(); // now listeners are detached
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      */

	var _subscriptionItem = __webpack_require__(34);

	var _subscriptionItem2 = _interopRequireDefault(_subscriptionItem);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Subscription = function () {
	  /**
	   * Constructor
	   *
	   * @param {Array<{channel, event, listener}>} items
	   */
	  function Subscription(items) {
	    _classCallCheck(this, Subscription);

	    this._items = items.map(function (params) {
	      return new _subscriptionItem2.default(params);
	    });
	  }

	  /**
	   * Turn on all listeners
	   *
	   * @returns {Subscription}
	   */


	  _createClass(Subscription, [{
	    key: 'on',
	    value: function on() {
	      this._items.forEach(function (item) {
	        return item.on();
	      });
	      return this;
	    }

	    /**
	     * Turn off all listeners
	     *
	     * @returns {Subscription}
	     */

	  }, {
	    key: 'off',
	    value: function off() {
	      this._items.forEach(function (item) {
	        return item.off();
	      });
	      return this;
	    }
	  }]);

	  return Subscription;
	}();

	exports.default = Subscription;
	module.exports = exports['default'];

/***/ }),
/* 34 */
/***/ (function(module, exports) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * Subscription item
	 */

	var SubscriptionItem = function () {
	  /**
	   * Constructor
	   *
	   * @param {Object} params
	   * @param {Object} params.channel
	   * @param {String} [params.event]
	   * @param {Function} params.listener
	   */
	  function SubscriptionItem(params) {
	    _classCallCheck(this, SubscriptionItem);

	    this._params = params;
	    this._isOn = false;
	    this._assertParams();
	  }

	  /**
	   * Turn on listener of channel
	   */


	  _createClass(SubscriptionItem, [{
	    key: 'on',
	    value: function on() {
	      if (!this._isOn) {
	        var channel = this._params.channel;

	        var method = channel.addListener || channel.addEventListener || channel.on;
	        this._applyMethod(method);
	        this._isOn = true;
	      }
	    }

	    /**
	     * Turn off listener of channel
	     */

	  }, {
	    key: 'off',
	    value: function off() {
	      if (this._isOn) {
	        var channel = this._params.channel;

	        var method = channel.removeListener || channel.removeEventListener || channel.off;
	        this._applyMethod(method);
	        this._isOn = false;
	      }
	    }
	  }, {
	    key: '_applyMethod',
	    value: function _applyMethod(method) {
	      var _params = this._params;
	      var channel = _params.channel;
	      var event = _params.event;
	      var listener = _params.listener;

	      var args = event ? [event, listener] : [listener];
	      method.apply(channel, args);
	    }
	  }, {
	    key: '_assertParams',
	    value: function _assertParams() {
	      var _params2 = this._params;
	      var channel = _params2.channel;
	      var event = _params2.event;
	      var listener = _params2.listener;

	      if (!channel || (typeof channel === 'undefined' ? 'undefined' : _typeof(channel)) !== 'object') {
	        throw new Error('Channel should be object');
	      }
	      if (event && typeof event !== 'string') {
	        throw new Error('Event should be string');
	      }
	      if (!listener || typeof listener !== 'function') {
	        throw new Error('Listener should be function');
	      }
	    }
	  }]);

	  return SubscriptionItem;
	}();

	exports.default = SubscriptionItem;
	module.exports = exports['default'];

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _subscription = __webpack_require__(33);

	var _subscription2 = _interopRequireDefault(_subscription);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * ReactSubscription is an utility class that extends Subscription class and allows to subscribe/unsubscribe
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * listeners in ReactComponent callbacks - componentDidMount/componentWillUnmount
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Example:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Before:
	class Button extends React.Component {
	constructor() {
	super();
	this.subscription = new Channel.Subscription([
	{channel: onNewData, listener: this.handleNewData.bind(this)}
	
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     }
	componentDidMount() {
	this.subscription.on();
	}
	componentWillUnmount() {
	this.subscription.off();
	}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   }
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
	fter:
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
	class Button extends React.Component {
	constructor() {
	super();
	new Channel.ReactSubscription(this, [
	{channel: onNewData, listener: this.handleNewData.bind(this)}
	
	}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   }
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

	var ReactSubscription = function (_Subscription) {
	  _inherits(ReactSubscription, _Subscription);

	  /**
	   * Constructor
	   *
	   * @param {ReactComponent} component
	   * @param {Array<{channel, event, listener}>} items
	   */
	  function ReactSubscription(component, items) {
	    _classCallCheck(this, ReactSubscription);

	    var _this = _possibleConstructorReturn(this, (ReactSubscription.__proto__ || Object.getPrototypeOf(ReactSubscription)).call(this, items));

	    _this._overrideComponentCallback(component, 'componentDidMount', 'on');
	    _this._overrideComponentCallback(component, 'componentWillUnmount', 'off');
	    return _this;
	  }

	  /**
	   * @param {ReactComponent} component
	   * @param {String} callbackName
	   * @param {String} methodName
	   * @private
	   */


	  _createClass(ReactSubscription, [{
	    key: '_overrideComponentCallback',
	    value: function _overrideComponentCallback(component, callbackName, methodName) {
	      var _this2 = this;

	      var baseCallback = component[callbackName];
	      component[callbackName] = function () {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	          args[_key] = arguments[_key];
	        }

	        _this2[methodName]();
	        if (typeof baseCallback === 'function') {
	          return baseCallback.apply(component, args);
	        }
	      };
	    }
	  }]);

	  return ReactSubscription;
	}(_subscription2.default);

	exports.default = ReactSubscription;
	module.exports = exports['default'];

/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview
	 *
	 * > ### IMPORTANT NOTICE
	 * >
	 * > The promise manager contained in this module is in the process of being
	 * > phased out in favor of native JavaScript promises. This will be a long
	 * > process and will not be completed until there have been two major LTS Node
	 * > releases (approx. Node v10.0) that support
	 * > [async functions](https://tc39.github.io/ecmascript-asyncawait/).
	 * >
	 * > At this time, the promise manager can be disabled by setting an environment
	 * > variable, `SELENIUM_PROMISE_MANAGER=0`. In the absence of async functions,
	 * > users may use generators with the
	 * > {@link ./promise.consume promise.consume()} function to write "synchronous"
	 * > style tests:
	 * >
	 * > ```js
	 * > const {Builder, By, promise, until} = require('selenium-webdriver');
	 * >
	 * > let result = promise.consume(function* doGoogleSearch() {
	 * >   let driver = new Builder().forBrowser('firefox').build();
	 * >   yield driver.get('http://www.google.com/ncr');
	 * >   yield driver.findElement(By.name('q')).sendKeys('webdriver');
	 * >   yield driver.findElement(By.name('btnG')).click();
	 * >   yield driver.wait(until.titleIs('webdriver - Google Search'), 1000);
	 * >   yield driver.quit();
	 * > });
	 * >
	 * > result.then(_ => console.log('SUCCESS!'),
	 * >             e => console.error('FAILURE: ' + e));
	 * > ```
	 * >
	 * > The motivation behind this change and full deprecation plan are documented
	 * > in [issue 2969](https://github.com/SeleniumHQ/selenium/issues/2969).
	 * >
	 * >
	 *
	 * The promise module is centered around the {@linkplain ControlFlow}, a class
	 * that coordinates the execution of asynchronous tasks. The ControlFlow allows
	 * users to focus on the imperative commands for their script without worrying
	 * about chaining together every single asynchronous action, which can be
	 * tedious and verbose. APIs may be layered on top of the control flow to read
	 * as if they were synchronous. For instance, the core
	 * {@linkplain ./webdriver.WebDriver WebDriver} API is built on top of the
	 * control flow, allowing users to write
	 *
	 *     driver.get('http://www.google.com/ncr');
	 *     driver.findElement({name: 'q'}).sendKeys('webdriver');
	 *     driver.findElement({name: 'btnGn'}).click();
	 *
	 * instead of
	 *
	 *     driver.get('http://www.google.com/ncr')
	 *     .then(function() {
	 *       return driver.findElement({name: 'q'});
	 *     })
	 *     .then(function(q) {
	 *       return q.sendKeys('webdriver');
	 *     })
	 *     .then(function() {
	 *       return driver.findElement({name: 'btnG'});
	 *     })
	 *     .then(function(btnG) {
	 *       return btnG.click();
	 *     });
	 *
	 * ## Tasks and Task Queues
	 *
	 * The control flow is based on the concept of tasks and task queues. Tasks are
	 * functions that define the basic unit of work for the control flow to execute.
	 * Each task is scheduled via {@link ControlFlow#execute()}, which will return
	 * a {@link ManagedPromise} that will be resolved with the task's result.
	 *
	 * A task queue contains all of the tasks scheduled within a single turn of the
	 * [JavaScript event loop][JSEL]. The control flow will create a new task queue
	 * the first time a task is scheduled within an event loop.
	 *
	 *     var flow = promise.controlFlow();
	 *     flow.execute(foo);       // Creates a new task queue and inserts foo.
	 *     flow.execute(bar);       // Inserts bar into the same queue as foo.
	 *     setTimeout(function() {
	 *       flow.execute(baz);     // Creates a new task queue and inserts baz.
	 *     }, 0);
	 *
	 * Whenever the control flow creates a new task queue, it will automatically
	 * begin executing tasks in the next available turn of the event loop. This
	 * execution is [scheduled as a microtask][MicrotasksArticle] like e.g. a
	 * (native) `Promise.then()` callback.
	 *
	 *     setTimeout(() => console.log('a'));
	 *     Promise.resolve().then(() => console.log('b'));  // A native promise.
	 *     flow.execute(() => console.log('c'));
	 *     Promise.resolve().then(() => console.log('d'));
	 *     setTimeout(() => console.log('fin'));
	 *     // b
	 *     // c
	 *     // d
	 *     // a
	 *     // fin
	 *
	 * In the example above, b/c/d is logged before a/fin because native promises
	 * and this module use "microtask" timers, which have a higher priority than
	 * "macrotasks" like `setTimeout`.
	 *
	 * ## Task Execution
	 *
	 * Upon creating a task queue, and whenever an existing queue completes a task,
	 * the control flow will schedule a microtask timer to process any scheduled
	 * tasks. This ensures no task is ever started within the same turn of the
	 * JavaScript event loop in which it was scheduled, nor is a task ever started
	 * within the same turn that another finishes.
	 *
	 * When the execution timer fires, a single task will be dequeued and executed.
	 * There are several important events that may occur while executing a task
	 * function:
	 *
	 * 1. A new task queue is created by a call to {@link ControlFlow#execute()}.
	 *    Any tasks scheduled within this task queue are considered subtasks of the
	 *    current task.
	 * 2. The task function throws an error. Any scheduled tasks are immediately
	 *    discarded and the task's promised result (previously returned by
	 *    {@link ControlFlow#execute()}) is immediately rejected with the thrown
	 *    error.
	 * 3. The task function returns successfully.
	 *
	 * If a task function created a new task queue, the control flow will wait for
	 * that queue to complete before processing the task result. If the queue
	 * completes without error, the flow will settle the task's promise with the
	 * value originally returned by the task function. On the other hand, if the task
	 * queue terminates with an error, the task's promise will be rejected with that
	 * error.
	 *
	 *     flow.execute(function() {
	 *       flow.execute(() => console.log('a'));
	 *       flow.execute(() => console.log('b'));
	 *     });
	 *     flow.execute(() => console.log('c'));
	 *     // a
	 *     // b
	 *     // c
	 *
	 * ## ManagedPromise Integration
	 *
	 * In addition to the {@link ControlFlow} class, the promise module also exports
	 * a [Promises/A+] {@linkplain ManagedPromise implementation} that is deeply
	 * integrated with the ControlFlow. First and foremost, each promise
	 * {@linkplain ManagedPromise#then() callback} is scheduled with the
	 * control flow as a task. As a result, each callback is invoked in its own turn
	 * of the JavaScript event loop with its own task queue. If any tasks are
	 * scheduled within a callback, the callback's promised result will not be
	 * settled until the task queue has completed.
	 *
	 *     promise.fulfilled().then(function() {
	 *       flow.execute(function() {
	 *         console.log('b');
	 *       });
	 *     }).then(() => console.log('a'));
	 *     // b
	 *     // a
	 *
	 * ### Scheduling ManagedPromise Callbacks <a id="scheduling_callbacks"></a>
	 *
	 * How callbacks are scheduled in the control flow depends on when they are
	 * attached to the promise. Callbacks attached to a _previously_ resolved
	 * promise are immediately enqueued as subtasks of the currently running task.
	 *
	 *     var p = promise.fulfilled();
	 *     flow.execute(function() {
	 *       flow.execute(() => console.log('A'));
	 *       p.then(      () => console.log('B'));
	 *       flow.execute(() => console.log('C'));
	 *       p.then(      () => console.log('D'));
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // fin
	 *
	 * When a promise is resolved while a task function is on the call stack, any
	 * callbacks also registered in that stack frame are scheduled as if the promise
	 * were already resolved:
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       flow.execute(  () => console.log('A'));
	 *       d.promise.then(() => console.log('B'));
	 *       flow.execute(  () => console.log('C'));
	 *       d.promise.then(() => console.log('D'));
	 *
	 *       d.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // fin
	 *
	 * Callbacks attached to an _unresolved_ promise within a task function are
	 * only weakly scheduled as subtasks and will be dropped if they reach the
	 * front of the queue before the promise is resolved. In the example below, the
	 * callbacks for `B` & `D` are dropped as sub-tasks since they are attached to
	 * an unresolved promise when they reach the front of the task queue.
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       flow.execute(  () => console.log('A'));
	 *       d.promise.then(() => console.log('B'));
	 *       flow.execute(  () => console.log('C'));
	 *       d.promise.then(() => console.log('D'));
	 *
	 *       setTimeout(d.fulfill, 20);
	 *     }).then(function() {
	 *       console.log('fin')
	 *     });
	 *     // A
	 *     // C
	 *     // fin
	 *     // B
	 *     // D
	 *
	 * If a promise is resolved while a task function is on the call stack, any
	 * previously registered and unqueued callbacks (i.e. either attached while no
	 * task was on the call stack, or previously dropped as described above) act as
	 * _interrupts_ and are inserted at the front of the task queue. If multiple
	 * promises are fulfilled, their interrupts are enqueued in the order the
	 * promises are resolved.
	 *
	 *     var d1 = promise.defer();
	 *     d1.promise.then(() => console.log('A'));
	 *
	 *     var d2 = promise.defer();
	 *     d2.promise.then(() => console.log('B'));
	 *
	 *     flow.execute(function() {
	 *       d1.promise.then(() => console.log('C'));
	 *       flow.execute(() => console.log('D'));
	 *     });
	 *     flow.execute(function() {
	 *       flow.execute(() => console.log('E'));
	 *       flow.execute(() => console.log('F'));
	 *       d1.fulfill();
	 *       d2.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // D
	 *     // A
	 *     // C
	 *     // B
	 *     // E
	 *     // F
	 *     // fin
	 *
	 * Within a task function (or callback), each step of a promise chain acts as
	 * an interrupt on the task queue:
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       d.promise.
	 *           then(() => console.log('A')).
	 *           then(() => console.log('B')).
	 *           then(() => console.log('C')).
	 *           then(() => console.log('D'));
	 *
	 *       flow.execute(() => console.log('E'));
	 *       d.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // E
	 *     // fin
	 *
	 * If there are multiple promise chains derived from a single promise, they are
	 * processed in the order created:
	 *
	 *     var d = promise.defer();
	 *     flow.execute(function() {
	 *       var chain = d.promise.then(() => console.log('A'));
	 *
	 *       chain.then(() => console.log('B')).
	 *           then(() => console.log('C'));
	 *
	 *       chain.then(() => console.log('D')).
	 *           then(() => console.log('E'));
	 *
	 *       flow.execute(() => console.log('F'));
	 *
	 *       d.fulfill();
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // E
	 *     // F
	 *     // fin
	 *
	 * Even though a subtask's promised result will never resolve while the task
	 * function is on the stack, it will be treated as a promise resolved within the
	 * task. In all other scenarios, a task's promise behaves just like a normal
	 * promise. In the sample below, `C/D` is logged before `B` because the
	 * resolution of `subtask1` interrupts the flow of the enclosing task. Within
	 * the final subtask, `E/F` is logged in order because `subtask1` is a resolved
	 * promise when that task runs.
	 *
	 *     flow.execute(function() {
	 *       var subtask1 = flow.execute(() => console.log('A'));
	 *       var subtask2 = flow.execute(() => console.log('B'));
	 *
	 *       subtask1.then(() => console.log('C'));
	 *       subtask1.then(() => console.log('D'));
	 *
	 *       flow.execute(function() {
	 *         flow.execute(() => console.log('E'));
	 *         subtask1.then(() => console.log('F'));
	 *       });
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // C
	 *     // D
	 *     // B
	 *     // E
	 *     // F
	 *     // fin
	 *
	 * Finally, consider the following:
	 *
	 *     var d = promise.defer();
	 *     d.promise.then(() => console.log('A'));
	 *     d.promise.then(() => console.log('B'));
	 *
	 *     flow.execute(function() {
	 *       flow.execute(  () => console.log('C'));
	 *       d.promise.then(() => console.log('D'));
	 *
	 *       flow.execute(  () => console.log('E'));
	 *       d.promise.then(() => console.log('F'));
	 *
	 *       d.fulfill();
	 *
	 *       flow.execute(  () => console.log('G'));
	 *       d.promise.then(() => console.log('H'));
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // A
	 *     // B
	 *     // C
	 *     // D
	 *     // E
	 *     // F
	 *     // G
	 *     // H
	 *     // fin
	 *
	 * In this example, callbacks are registered on `d.promise` both before and
	 * during the invocation of the task function. When `d.fulfill()` is called,
	 * the callbacks registered before the task (`A` & `B`) are registered as
	 * interrupts. The remaining callbacks were all attached within the task and
	 * are scheduled in the flow as standard tasks.
	 *
	 * ## Generator Support
	 *
	 * [Generators][GF] may be scheduled as tasks within a control flow or attached
	 * as callbacks to a promise. Each time the generator yields a promise, the
	 * control flow will wait for that promise to settle before executing the next
	 * iteration of the generator. The yielded promise's fulfilled value will be
	 * passed back into the generator:
	 *
	 *     flow.execute(function* () {
	 *       var d = promise.defer();
	 *
	 *       setTimeout(() => console.log('...waiting...'), 25);
	 *       setTimeout(() => d.fulfill(123), 50);
	 *
	 *       console.log('start: ' + Date.now());
	 *
	 *       var value = yield d.promise;
	 *       console.log('mid: %d; value = %d', Date.now(), value);
	 *
	 *       yield promise.delayed(10);
	 *       console.log('end: ' + Date.now());
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // start: 0
	 *     // ...waiting...
	 *     // mid: 50; value = 123
	 *     // end: 60
	 *     // fin
	 *
	 * Yielding the result of a promise chain will wait for the entire chain to
	 * complete:
	 *
	 *     promise.fulfilled().then(function* () {
	 *       console.log('start: ' + Date.now());
	 *
	 *       var value = yield flow.
	 *           execute(() => console.log('A')).
	 *           then(   () => console.log('B')).
	 *           then(   () => 123);
	 *
	 *       console.log('mid: %s; value = %d', Date.now(), value);
	 *
	 *       yield flow.execute(() => console.log('C'));
	 *     }).then(function() {
	 *       console.log('fin');
	 *     });
	 *     // start: 0
	 *     // A
	 *     // B
	 *     // mid: 2; value = 123
	 *     // C
	 *     // fin
	 *
	 * Yielding a _rejected_ promise will cause the rejected value to be thrown
	 * within the generator function:
	 *
	 *     flow.execute(function* () {
	 *       console.log('start: ' + Date.now());
	 *       try {
	 *         yield promise.delayed(10).then(function() {
	 *           throw Error('boom');
	 *         });
	 *       } catch (ex) {
	 *         console.log('caught time: ' + Date.now());
	 *         console.log(ex.message);
	 *       }
	 *     });
	 *     // start: 0
	 *     // caught time: 10
	 *     // boom
	 *
	 * # Error Handling
	 *
	 * ES6 promises do not require users to handle a promise rejections. This can
	 * result in subtle bugs as the rejections are silently "swallowed" by the
	 * Promise class.
	 *
	 *     Promise.reject(Error('boom'));
	 *     // ... *crickets* ...
	 *
	 * Selenium's promise module, on the other hand, requires that every rejection
	 * be explicitly handled. When a {@linkplain ManagedPromise ManagedPromise} is
	 * rejected and no callbacks are defined on that promise, it is considered an
	 * _unhandled rejection_ and reported to the active task queue. If the rejection
	 * remains unhandled after a single turn of the [event loop][JSEL] (scheduled
	 * with a microtask), it will propagate up the stack.
	 *
	 * ## Error Propagation
	 *
	 * If an unhandled rejection occurs within a task function, that task's promised
	 * result is rejected and all remaining subtasks are discarded:
	 *
	 *     flow.execute(function() {
	 *       // No callbacks registered on promise -> unhandled rejection
	 *       promise.rejected(Error('boom'));
	 *       flow.execute(function() { console.log('this will never run'); });
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // boom
	 *
	 * The promised results for discarded tasks are silently rejected with a
	 * cancellation error and existing callback chains will never fire.
	 *
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom'));
	 *       flow.execute(function() { console.log('a'); }).
	 *           then(function() { console.log('b'); });
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // boom
	 *
	 * An unhandled rejection takes precedence over a task function's returned
	 * result, even if that value is another promise:
	 *
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom'));
	 *       return flow.execute(someOtherTask);
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // boom
	 *
	 * If there are multiple unhandled rejections within a task, they are packaged
	 * in a {@link MultipleUnhandledRejectionError}, which has an `errors` property
	 * that is a `Set` of the recorded unhandled rejections:
	 *
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom1'));
	 *       promise.rejected(Error('boom2'));
	 *     }).catch(function(ex) {
	 *       console.log(ex instanceof MultipleUnhandledRejectionError);
	 *       for (var e of ex.errors) {
	 *         console.log(e.message);
	 *       }
	 *     });
	 *     // boom1
	 *     // boom2
	 *
	 * When a subtask is discarded due to an unreported rejection in its parent
	 * frame, the existing callbacks on that task will never settle and the
	 * callbacks will not be invoked. If a new callback is attached to the subtask
	 * _after_ it has been discarded, it is handled the same as adding a callback
	 * to a cancelled promise: the error-callback path is invoked. This behavior is
	 * intended to handle cases where the user saves a reference to a task promise,
	 * as illustrated below.
	 *
	 *     var subTask;
	 *     flow.execute(function() {
	 *       promise.rejected(Error('boom'));
	 *       subTask = flow.execute(function() {});
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     }).then(function() {
	 *       return subTask.then(
	 *           () => console.log('subtask success!'),
	 *           (e) => console.log('subtask failed:\n' + e));
	 *     });
	 *     // boom
	 *     // subtask failed:
	 *     // DiscardedTaskError: Task was discarded due to a previous failure: boom
	 *
	 * When a subtask fails, its promised result is treated the same as any other
	 * promise: it must be handled within one turn of the rejection or the unhandled
	 * rejection is propagated to the parent task. This means users can catch errors
	 * from complex flows from the top level task:
	 *
	 *     flow.execute(function() {
	 *       flow.execute(function() {
	 *         flow.execute(function() {
	 *           throw Error('fail!');
	 *         });
	 *       });
	 *     }).catch(function(e) {
	 *       console.log(e.message);
	 *     });
	 *     // fail!
	 *
	 * ## Unhandled Rejection Events
	 *
	 * When an unhandled rejection propagates to the root of the control flow, the
	 * flow will emit an __uncaughtException__ event. If no listeners are registered
	 * on the flow, the error will be rethrown to the global error handler: an
	 * __uncaughtException__ event from the
	 * [`process`](https://nodejs.org/api/process.html) object in node, or
	 * `window.onerror` when running in a browser.
	 *
	 * Bottom line: you __*must*__ handle rejected promises.
	 *
	 * # Promises/A+ Compatibility
	 *
	 * This `promise` module is compliant with the [Promises/A+] specification
	 * except for sections `2.2.6.1` and `2.2.6.2`:
	 *
	 * >
	 * > - `then` may be called multiple times on the same promise.
	 * >    - If/when `promise` is fulfilled, all respective `onFulfilled` callbacks
	 * >      must execute in the order of their originating calls to `then`.
	 * >    - If/when `promise` is rejected, all respective `onRejected` callbacks
	 * >      must execute in the order of their originating calls to `then`.
	 * >
	 *
	 * Specifically, the conformance tests contain the following scenario (for
	 * brevity, only the fulfillment version is shown):
	 *
	 *     var p1 = Promise.resolve();
	 *     p1.then(function() {
	 *       console.log('A');
	 *       p1.then(() => console.log('B'));
	 *     });
	 *     p1.then(() => console.log('C'));
	 *     // A
	 *     // C
	 *     // B
	 *
	 * Since the [ControlFlow](#scheduling_callbacks) executes promise callbacks as
	 * tasks, with this module, the result would be:
	 *
	 *     var p2 = promise.fulfilled();
	 *     p2.then(function() {
	 *       console.log('A');
	 *       p2.then(() => console.log('B');
	 *     });
	 *     p2.then(() => console.log('C'));
	 *     // A
	 *     // B
	 *     // C
	 *
	 * [JSEL]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop
	 * [GF]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*
	 * [Promises/A+]: https://promisesaplus.com/
	 * [MicrotasksArticle]: https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/
	 */

	'use strict';

	const error = __webpack_require__(38);
	const events = __webpack_require__(39);
	const logging = __webpack_require__(40);


	/**
	 * Alias to help with readability and differentiate types.
	 * @const
	 */
	const NativePromise = Promise;


	/**
	 * Whether to append traces of `then` to rejection errors.
	 * @type {boolean}
	 */
	var LONG_STACK_TRACES = false;  // TODO: this should not be CONSTANT_CASE


	/** @const */
	const LOG = logging.getLogger('promise');


	const UNIQUE_IDS = new WeakMap;
	let nextId = 1;


	function getUid(obj) {
	  let id = UNIQUE_IDS.get(obj);
	  if (!id) {
	    id = nextId;
	    nextId += 1;
	    UNIQUE_IDS.set(obj, id);
	  }
	  return id;
	}


	/**
	 * Runs the given function after a microtask yield.
	 * @param {function()} fn The function to run.
	 */
	function asyncRun(fn) {
	  NativePromise.resolve().then(function() {
	    try {
	      fn();
	    } catch (ignored) {
	      // Do nothing.
	    }
	  });
	}

	/**
	 * @param {number} level What level of verbosity to log with.
	 * @param {(string|function(this: T): string)} loggable The message to log.
	 * @param {T=} opt_self The object in whose context to run the loggable
	 *     function.
	 * @template T
	 */
	function vlog(level, loggable, opt_self) {
	  var logLevel = logging.Level.FINE;
	  if (level > 1) {
	    logLevel = logging.Level.FINEST;
	  } else if (level > 0) {
	    logLevel = logging.Level.FINER;
	  }

	  if (typeof loggable === 'function') {
	    loggable = loggable.bind(opt_self);
	  }

	  LOG.log(logLevel, loggable);
	}


	/**
	 * Generates an error to capture the current stack trace.
	 * @param {string} name Error name for this stack trace.
	 * @param {string} msg Message to record.
	 * @param {Function=} opt_topFn The function that should appear at the top of
	 *     the stack; only applicable in V8.
	 * @return {!Error} The generated error.
	 */
	function captureStackTrace(name, msg, opt_topFn) {
	  var e = Error(msg);
	  e.name = name;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(e, opt_topFn);
	  } else {
	    var stack = Error().stack;
	    if (stack) {
	      e.stack = e.toString();
	      e.stack += '\n' + stack;
	    }
	  }
	  return e;
	}


	/**
	 * Error used when the computation of a promise is cancelled.
	 */
	class CancellationError extends Error {
	  /**
	   * @param {string=} opt_msg The cancellation message.
	   */
	  constructor(opt_msg) {
	    super(opt_msg);

	    /** @override */
	    this.name = this.constructor.name;

	    /** @private {boolean} */
	    this.silent_ = false;
	  }

	  /**
	   * Wraps the given error in a CancellationError.
	   *
	   * @param {*} error The error to wrap.
	   * @param {string=} opt_msg The prefix message to use.
	   * @return {!CancellationError} A cancellation error.
	   */
	  static wrap(error, opt_msg) {
	    var message;
	    if (error instanceof CancellationError) {
	      return new CancellationError(
	          opt_msg ? (opt_msg + ': ' + error.message) : error.message);
	    } else if (opt_msg) {
	      message = opt_msg;
	      if (error) {
	        message += ': ' + error;
	      }
	      return new CancellationError(message);
	    }
	    if (error) {
	      message = error + '';
	    }
	    return new CancellationError(message);
	  }
	}


	/**
	 * Error used to cancel tasks when a control flow is reset.
	 * @final
	 */
	class FlowResetError extends CancellationError {
	  constructor() {
	    super('ControlFlow was reset');
	    this.silent_ = true;
	  }
	}


	/**
	 * Error used to cancel tasks that have been discarded due to an uncaught error
	 * reported earlier in the control flow.
	 * @final
	 */
	class DiscardedTaskError extends CancellationError {
	  /** @param {*} error The original error. */
	  constructor(error) {
	    if (error instanceof DiscardedTaskError) {
	      return /** @type {!DiscardedTaskError} */(error);
	    }

	    var msg = '';
	    if (error) {
	      msg = ': ' + (
	          typeof error.message === 'string' ? error.message : error);
	    }

	    super('Task was discarded due to a previous failure' + msg);
	    this.silent_ = true;
	  }
	}


	/**
	 * Error used when there are multiple unhandled promise rejections detected
	 * within a task or callback.
	 *
	 * @final
	 */
	class MultipleUnhandledRejectionError extends Error {
	  /**
	   * @param {!(Set<*>)} errors The errors to report.
	   */
	  constructor(errors) {
	    super('Multiple unhandled promise rejections reported');

	    /** @override */
	    this.name = this.constructor.name;

	    /** @type {!Set<*>} */
	    this.errors = errors;
	  }
	}


	/**
	 * Property used to flag constructor's as implementing the Thenable interface
	 * for runtime type checking.
	 * @const
	 */
	const IMPLEMENTED_BY_SYMBOL = Symbol('promise.Thenable');
	const CANCELLABLE_SYMBOL = Symbol('promise.CancellableThenable');


	/**
	 * @param {function(new: ?)} ctor
	 * @param {!Object} symbol
	 */
	function addMarkerSymbol(ctor, symbol) {
	  try {
	    ctor.prototype[symbol] = true;
	  } catch (ignored) {
	    // Property access denied?
	  }
	}


	/**
	 * @param {*} object
	 * @param {!Object} symbol
	 * @return {boolean}
	 */
	function hasMarkerSymbol(object, symbol) {
	  if (!object) {
	    return false;
	  }
	  try {
	    return !!object[symbol];
	  } catch (e) {
	    return false;  // Property access seems to be forbidden.
	  }
	}


	/**
	 * Thenable is a promise-like object with a {@code then} method which may be
	 * used to schedule callbacks on a promised value.
	 *
	 * @record
	 * @extends {IThenable<T>}
	 * @template T
	 */
	class Thenable {
	  /**
	   * Adds a property to a class prototype to allow runtime checks of whether
	   * instances of that class implement the Thenable interface.
	   * @param {function(new: Thenable, ...?)} ctor The
	   *     constructor whose prototype to modify.
	   */
	  static addImplementation(ctor) {
	    addMarkerSymbol(ctor, IMPLEMENTED_BY_SYMBOL);
	  }

	  /**
	   * Checks if an object has been tagged for implementing the Thenable
	   * interface as defined by {@link Thenable.addImplementation}.
	   * @param {*} object The object to test.
	   * @return {boolean} Whether the object is an implementation of the Thenable
	   *     interface.
	   */
	  static isImplementation(object) {
	    return hasMarkerSymbol(object, IMPLEMENTED_BY_SYMBOL);
	  }

	  /**
	   * Registers listeners for when this instance is resolved.
	   *
	   * @param {?(function(T): (R|IThenable<R>))=} opt_callback The
	   *     function to call if this promise is successfully resolved. The function
	   *     should expect a single argument: the promise's resolved value.
	   * @param {?(function(*): (R|IThenable<R>))=} opt_errback
	   *     The function to call if this promise is rejected. The function should
	   *     expect a single argument: the rejection reason.
	   * @return {!Thenable<R>} A new promise which will be resolved with the result
	   *     of the invoked callback.
	   * @template R
	   */
	  then(opt_callback, opt_errback) {}

	  /**
	   * Registers a listener for when this promise is rejected. This is synonymous
	   * with the {@code catch} clause in a synchronous API:
	   *
	   *     // Synchronous API:
	   *     try {
	   *       doSynchronousWork();
	   *     } catch (ex) {
	   *       console.error(ex);
	   *     }
	   *
	   *     // Asynchronous promise API:
	   *     doAsynchronousWork().catch(function(ex) {
	   *       console.error(ex);
	   *     });
	   *
	   * @param {function(*): (R|IThenable<R>)} errback The
	   *     function to call if this promise is rejected. The function should
	   *     expect a single argument: the rejection reason.
	   * @return {!Thenable<R>} A new promise which will be resolved with the result
	   *     of the invoked callback.
	   * @template R
	   */
	  catch(errback) {}
	}


	/**
	 * Marker interface for objects that allow consumers to request the cancellation
	 * of a promise-based operation. A cancelled promise will be rejected with a
	 * {@link CancellationError}.
	 *
	 * This interface is considered package-private and should not be used outside
	 * of selenium-webdriver.
	 *
	 * @interface
	 * @extends {Thenable<T>}
	 * @template T
	 * @package
	 */
	class CancellableThenable {
	  /**
	   * @param {function(new: CancellableThenable, ...?)} ctor
	   */
	  static addImplementation(ctor) {
	    Thenable.addImplementation(ctor);
	    addMarkerSymbol(ctor, CANCELLABLE_SYMBOL);
	  }

	  /**
	   * @param {*} object
	   * @return {boolean}
	   */
	  static isImplementation(object) {
	    return hasMarkerSymbol(object, CANCELLABLE_SYMBOL);
	  }

	  /**
	   * Requests the cancellation of the computation of this promise's value,
	   * rejecting the promise in the process. This method is a no-op if the promise
	   * has already been resolved.
	   *
	   * @param {(string|Error)=} opt_reason The reason this promise is being
	   *     cancelled. This value will be wrapped in a {@link CancellationError}.
	   */
	  cancel(opt_reason) {}
	}


	/**
	 * @enum {string}
	 */
	const PromiseState = {
	  PENDING: 'pending',
	  BLOCKED: 'blocked',
	  REJECTED: 'rejected',
	  FULFILLED: 'fulfilled'
	};


	/**
	 * Internal map used to store cancellation handlers for {@link ManagedPromise}
	 * objects. This is an internal implementation detail used by the
	 * {@link TaskQueue} class to monitor for when a promise is cancelled without
	 * generating an extra promise via then().
	 *
	 * @const {!WeakMap<!ManagedPromise, function(!CancellationError)>}
	 */
	const ON_CANCEL_HANDLER = new WeakMap;

	const SKIP_LOG = Symbol('skip-log');
	const FLOW_LOG = logging.getLogger('promise.ControlFlow');


	/**
	 * Represents the eventual value of a completed operation. Each promise may be
	 * in one of three states: pending, fulfilled, or rejected. Each promise starts
	 * in the pending state and may make a single transition to either a
	 * fulfilled or rejected state, at which point the promise is considered
	 * resolved.
	 *
	 * @implements {CancellableThenable<T>}
	 * @template T
	 * @see http://promises-aplus.github.io/promises-spec/
	 */
	class ManagedPromise {
	  /**
	   * @param {function(
	   *           function((T|IThenable<T>|Thenable)=),
	   *           function(*=))} resolver
	   *     Function that is invoked immediately to begin computation of this
	   *     promise's value. The function should accept a pair of callback
	   *     functions, one for fulfilling the promise and another for rejecting it.
	   * @param {ControlFlow=} opt_flow The control flow
	   *     this instance was created under. Defaults to the currently active flow.
	   * @param {?=} opt_skipLog An internal parameter used to skip logging the
	   *     creation of this promise. This parameter has no effect unless it is
	   *     strictly equal to an internal symbol. In other words, this parameter
	   *     is always ignored for external code.
	   */
	  constructor(resolver, opt_flow, opt_skipLog) {
	    if (!usePromiseManager()) {
	      throw TypeError(
	        'Unable to create a managed promise instance: the promise manager has'
	            + ' been disabled by the SELENIUM_PROMISE_MANAGER environment'
	            + ' variable: ' + process.env['SELENIUM_PROMISE_MANAGER']);
	    } else if (opt_skipLog !== SKIP_LOG) {
	      FLOW_LOG.warning(() => {
	        let e =
	            captureStackTrace(
	                'ManagedPromiseError',
	                'Creating a new managed Promise. This call will fail when the'
	                    + ' promise manager is disabled',
	            ManagedPromise)
	        return e.stack;
	      });
	    }

	    getUid(this);

	    /** @private {!ControlFlow} */
	    this.flow_ = opt_flow || controlFlow();

	    /** @private {Error} */
	    this.stack_ = null;
	    if (LONG_STACK_TRACES) {
	      this.stack_ = captureStackTrace('ManagedPromise', 'new', this.constructor);
	    }

	    /** @private {Thenable<?>} */
	    this.parent_ = null;

	    /** @private {Array<!Task>} */
	    this.callbacks_ = null;

	    /** @private {PromiseState} */
	    this.state_ = PromiseState.PENDING;

	    /** @private {boolean} */
	    this.handled_ = false;

	    /** @private {*} */
	    this.value_ = undefined;

	    /** @private {TaskQueue} */
	    this.queue_ = null;

	    try {
	      var self = this;
	      resolver(function(value) {
	        self.resolve_(PromiseState.FULFILLED, value);
	      }, function(reason) {
	        self.resolve_(PromiseState.REJECTED, reason);
	      });
	    } catch (ex) {
	      this.resolve_(PromiseState.REJECTED, ex);
	    }
	  }

	  /**
	   * Creates a promise that is immediately resolved with the given value.
	   *
	   * @param {T=} opt_value The value to resolve.
	   * @return {!ManagedPromise<T>} A promise resolved with the given value.
	   * @template T
	   */
	  static resolve(opt_value) {
	    if (opt_value instanceof ManagedPromise) {
	      return opt_value;
	    }
	    return new ManagedPromise(resolve => resolve(opt_value));
	  }

	  /**
	   * Creates a promise that is immediately rejected with the given reason.
	   *
	   * @param {*=} opt_reason The rejection reason.
	   * @return {!ManagedPromise<?>} A new rejected promise.
	   */
	  static reject(opt_reason) {
	    return new ManagedPromise((_, reject) => reject(opt_reason));
	  }

	  /** @override */
	  toString() {
	    return 'ManagedPromise::' + getUid(this) +
	      ' {[[PromiseStatus]]: "' + this.state_ + '"}';
	  }

	  /**
	   * Resolves this promise. If the new value is itself a promise, this function
	   * will wait for it to be resolved before notifying the registered listeners.
	   * @param {PromiseState} newState The promise's new state.
	   * @param {*} newValue The promise's new value.
	   * @throws {TypeError} If {@code newValue === this}.
	   * @private
	   */
	  resolve_(newState, newValue) {
	    if (PromiseState.PENDING !== this.state_) {
	      return;
	    }

	    if (newValue === this) {
	      // See promise a+, 2.3.1
	      // http://promises-aplus.github.io/promises-spec/#point-48
	      newValue = new TypeError('A promise may not resolve to itself');
	      newState = PromiseState.REJECTED;
	    }

	    this.parent_ = null;
	    this.state_ = PromiseState.BLOCKED;

	    if (newState !== PromiseState.REJECTED) {
	      if (Thenable.isImplementation(newValue)) {
	        // 2.3.2
	        newValue = /** @type {!Thenable} */(newValue);
	        this.parent_ = newValue;
	        newValue.then(
	            this.unblockAndResolve_.bind(this, PromiseState.FULFILLED),
	            this.unblockAndResolve_.bind(this, PromiseState.REJECTED));
	        return;

	      } else if (newValue
	          && (typeof newValue === 'object' || typeof newValue === 'function')) {
	        // 2.3.3

	        try {
	          // 2.3.3.1
	          var then = newValue['then'];
	        } catch (e) {
	          // 2.3.3.2
	          this.state_ = PromiseState.REJECTED;
	          this.value_ = e;
	          this.scheduleNotifications_();
	          return;
	        }

	        if (typeof then === 'function') {
	          // 2.3.3.3
	          this.invokeThen_(/** @type {!Object} */(newValue), then);
	          return;
	        }
	      }
	    }

	    if (newState === PromiseState.REJECTED &&
	        isError(newValue) && newValue.stack && this.stack_) {
	      newValue.stack += '\nFrom: ' + (this.stack_.stack || this.stack_);
	    }

	    // 2.3.3.4 and 2.3.4
	    this.state_ = newState;
	    this.value_ = newValue;
	    this.scheduleNotifications_();
	  }

	  /**
	   * Invokes a thenable's "then" method according to 2.3.3.3 of the promise
	   * A+ spec.
	   * @param {!Object} x The thenable object.
	   * @param {!Function} then The "then" function to invoke.
	   * @private
	   */
	  invokeThen_(x, then) {
	    var called = false;
	    var self = this;

	    var resolvePromise = function(value) {
	      if (!called) {  // 2.3.3.3.3
	        called = true;
	        // 2.3.3.3.1
	        self.unblockAndResolve_(PromiseState.FULFILLED, value);
	      }
	    };

	    var rejectPromise = function(reason) {
	      if (!called) {  // 2.3.3.3.3
	        called = true;
	        // 2.3.3.3.2
	        self.unblockAndResolve_(PromiseState.REJECTED, reason);
	      }
	    };

	    try {
	      // 2.3.3.3
	      then.call(x, resolvePromise, rejectPromise);
	    } catch (e) {
	      // 2.3.3.3.4.2
	      rejectPromise(e);
	    }
	  }

	  /**
	   * @param {PromiseState} newState The promise's new state.
	   * @param {*} newValue The promise's new value.
	   * @private
	   */
	  unblockAndResolve_(newState, newValue) {
	    if (this.state_ === PromiseState.BLOCKED) {
	      this.state_ = PromiseState.PENDING;
	      this.resolve_(newState, newValue);
	    }
	  }

	  /**
	   * @private
	   */
	  scheduleNotifications_() {
	    vlog(2, () => this + ' scheduling notifications', this);

	    ON_CANCEL_HANDLER.delete(this);
	    if (this.value_ instanceof CancellationError
	        && this.value_.silent_) {
	      this.callbacks_ = null;
	    }

	    if (!this.queue_) {
	      this.queue_ = this.flow_.getActiveQueue_();
	    }

	    if (!this.handled_ &&
	        this.state_ === PromiseState.REJECTED &&
	        !(this.value_ instanceof CancellationError)) {
	      this.queue_.addUnhandledRejection(this);
	    }
	    this.queue_.scheduleCallbacks(this);
	  }

	  /** @override */
	  cancel(opt_reason) {
	    if (!canCancel(this)) {
	      return;
	    }

	    if (this.parent_ && canCancel(this.parent_)) {
	      /** @type {!CancellableThenable} */(this.parent_).cancel(opt_reason);
	    } else {
	      var reason = CancellationError.wrap(opt_reason);
	      let onCancel = ON_CANCEL_HANDLER.get(this);
	      if (onCancel) {
	        onCancel(reason);
	        ON_CANCEL_HANDLER.delete(this);
	      }

	      if (this.state_ === PromiseState.BLOCKED) {
	        this.unblockAndResolve_(PromiseState.REJECTED, reason);
	      } else {
	        this.resolve_(PromiseState.REJECTED, reason);
	      }
	    }

	    function canCancel(promise) {
	      if (!(promise instanceof ManagedPromise)) {
	        return CancellableThenable.isImplementation(promise);
	      }
	      return promise.state_ === PromiseState.PENDING
	          || promise.state_ === PromiseState.BLOCKED;
	    }
	  }

	  /** @override */
	  then(opt_callback, opt_errback) {
	    return this.addCallback_(
	        opt_callback, opt_errback, 'then', ManagedPromise.prototype.then);
	  }

	  /** @override */
	  catch(errback) {
	    return this.addCallback_(
	        null, errback, 'catch', ManagedPromise.prototype.catch);
	  }

	  /**
	   * @param {function(): (R|IThenable<R>)} callback
	   * @return {!ManagedPromise<R>}
	   * @template R
	   * @see ./promise.finally()
	   */
	  finally(callback) {
	    let result = thenFinally(this, callback);
	    return /** @type {!ManagedPromise} */(result);
	  }

	  /**
	   * Registers a new callback with this promise
	   * @param {(function(T): (R|IThenable<R>)|null|undefined)} callback The
	   *    fulfillment callback.
	   * @param {(function(*): (R|IThenable<R>)|null|undefined)} errback The
	   *    rejection callback.
	   * @param {string} name The callback name.
	   * @param {!Function} fn The function to use as the top of the stack when
	   *     recording the callback's creation point.
	   * @return {!ManagedPromise<R>} A new promise which will be resolved with the
	   *     result of the invoked callback.
	   * @template R
	   * @private
	   */
	  addCallback_(callback, errback, name, fn) {
	    if (typeof callback !== 'function' && typeof errback !== 'function') {
	      return this;
	    }

	    this.handled_ = true;
	    if (this.queue_) {
	      this.queue_.clearUnhandledRejection(this);
	    }

	    var cb = new Task(
	        this.flow_,
	        this.invokeCallback_.bind(this, callback, errback),
	        name,
	        LONG_STACK_TRACES ? {name: 'Promise', top: fn} : undefined);
	    cb.promise.parent_ = this;

	    if (this.state_ !== PromiseState.PENDING &&
	        this.state_ !== PromiseState.BLOCKED) {
	      this.flow_.getActiveQueue_().enqueue(cb);
	    } else {
	      if (!this.callbacks_) {
	        this.callbacks_ = [];
	      }
	      this.callbacks_.push(cb);
	      cb.blocked = true;
	      this.flow_.getActiveQueue_().enqueue(cb);
	    }

	    return cb.promise;
	  }

	  /**
	   * Invokes a callback function attached to this promise.
	   * @param {(function(T): (R|IThenable<R>)|null|undefined)} callback The
	   *    fulfillment callback.
	   * @param {(function(*): (R|IThenable<R>)|null|undefined)} errback The
	   *    rejection callback.
	   * @template R
	   * @private
	   */
	  invokeCallback_(callback, errback) {
	    var callbackFn = callback;
	    if (this.state_ === PromiseState.REJECTED) {
	      callbackFn = errback;
	    }

	    if (typeof callbackFn === 'function') {
	      if (isGenerator(callbackFn)) {
	        return consume(callbackFn, null, this.value_);
	      }
	      return callbackFn(this.value_);
	    } else if (this.state_ === PromiseState.REJECTED) {
	      throw this.value_;
	    } else {
	      return this.value_;
	    }
	  }
	}
	CancellableThenable.addImplementation(ManagedPromise);


	/**
	 * @param {!ManagedPromise} promise
	 * @return {boolean}
	 */
	function isPending(promise) {
	  return promise.state_ === PromiseState.PENDING;
	}


	/**
	 * Structural interface for a deferred promise resolver.
	 * @record
	 * @template T
	 */
	function Resolver() {}


	/**
	 * The promised value for this resolver.
	 * @type {!Thenable<T>}
	 */
	Resolver.prototype.promise;


	/**
	 * Resolves the promised value with the given `value`.
	 * @param {T|Thenable<T>} value
	 * @return {void}
	 */
	Resolver.prototype.resolve;


	/**
	 * Rejects the promised value with the given `reason`.
	 * @param {*} reason
	 * @return {void}
	 */
	Resolver.prototype.reject;


	/**
	 * Represents a value that will be resolved at some point in the future. This
	 * class represents the protected "producer" half of a ManagedPromise - each Deferred
	 * has a {@code promise} property that may be returned to consumers for
	 * registering callbacks, reserving the ability to resolve the deferred to the
	 * producer.
	 *
	 * If this Deferred is rejected and there are no listeners registered before
	 * the next turn of the event loop, the rejection will be passed to the
	 * {@link ControlFlow} as an unhandled failure.
	 *
	 * @template T
	 * @implements {Resolver<T>}
	 */
	class Deferred {
	  /**
	   * @param {ControlFlow=} opt_flow The control flow this instance was
	   *     created under. This should only be provided during unit tests.
	   * @param {?=} opt_skipLog An internal parameter used to skip logging the
	   *     creation of this promise. This parameter has no effect unless it is
	   *     strictly equal to an internal symbol. In other words, this parameter
	   *     is always ignored for external code.
	   */
	  constructor(opt_flow, opt_skipLog) {
	    var fulfill, reject;

	    /** @type {!ManagedPromise<T>} */
	    this.promise = new ManagedPromise(function(f, r) {
	      fulfill = f;
	      reject = r;
	    }, opt_flow, opt_skipLog);

	    var self = this;
	    var checkNotSelf = function(value) {
	      if (value === self) {
	        throw new TypeError('May not resolve a Deferred with itself');
	      }
	    };

	    /**
	     * Resolves this deferred with the given value. It is safe to call this as a
	     * normal function (with no bound "this").
	     * @param {(T|IThenable<T>|Thenable)=} opt_value The fulfilled value.
	     * @const
	     */
	    this.resolve = function(opt_value) {
	      checkNotSelf(opt_value);
	      fulfill(opt_value);
	    };

	    /**
	     * An alias for {@link #resolve}.
	     * @const
	     */
	    this.fulfill = this.resolve;

	    /**
	     * Rejects this promise with the given reason. It is safe to call this as a
	     * normal function (with no bound "this").
	     * @param {*=} opt_reason The rejection reason.
	     * @const
	     */
	    this.reject = function(opt_reason) {
	      checkNotSelf(opt_reason);
	      reject(opt_reason);
	    };
	  }
	}


	/**
	 * Tests if a value is an Error-like object. This is more than an straight
	 * instanceof check since the value may originate from another context.
	 * @param {*} value The value to test.
	 * @return {boolean} Whether the value is an error.
	 */
	function isError(value) {
	  return value instanceof Error ||
	      (!!value && typeof value === 'object'
	          && typeof value.message === 'string');
	}


	/**
	 * Determines whether a {@code value} should be treated as a promise.
	 * Any object whose "then" property is a function will be considered a promise.
	 *
	 * @param {?} value The value to test.
	 * @return {boolean} Whether the value is a promise.
	 */
	function isPromise(value) {
	  try {
	    // Use array notation so the Closure compiler does not obfuscate away our
	    // contract.
	    return value
	        && (typeof value === 'object' || typeof value === 'function')
	        && typeof value['then'] === 'function';
	  } catch (ex) {
	    return false;
	  }
	}


	/**
	 * Creates a promise that will be resolved at a set time in the future.
	 * @param {number} ms The amount of time, in milliseconds, to wait before
	 *     resolving the promise.
	 * @return {!Thenable} The promise.
	 */
	function delayed(ms) {
	  return createPromise(resolve => {
	    setTimeout(() => resolve(), ms);
	  });
	}


	/**
	 * Creates a new deferred resolver.
	 *
	 * If the promise manager is currently enabled, this function will return a
	 * {@link Deferred} instance. Otherwise, it will return a resolver for a
	 * {@linkplain NativePromise native promise}.
	 *
	 * @return {!Resolver<T>} A new deferred resolver.
	 * @template T
	 */
	function defer() {
	  if (usePromiseManager()) {
	    return new Deferred();
	  }
	  let resolve, reject;
	  let promise = new NativePromise((_resolve, _reject) => {
	    resolve = _resolve;
	    reject = _reject;
	  });
	  return {promise, resolve, reject};
	}


	/**
	 * Creates a promise that has been resolved with the given value.
	 *
	 * If the promise manager is currently enabled, this function will return a
	 * {@linkplain ManagedPromise managed promise}. Otherwise, it will return a
	 * {@linkplain NativePromise native promise}.
	 *
	 * @param {T=} opt_value The resolved value.
	 * @return {!Thenable<T>} The resolved promise.
	 * @template T
	 */
	function fulfilled(opt_value) {
	  let ctor = usePromiseManager() ? ManagedPromise : NativePromise;
	  if (opt_value instanceof ctor) {
	    return /** @type {!Thenable} */(opt_value);
	  }

	  if (usePromiseManager()) {
	    // We can skip logging warnings about creating a managed promise because
	    // this function will automatically switch to use a native promise when
	    // the promise manager is disabled.
	    return new ManagedPromise(
	        resolve => resolve(opt_value), undefined, SKIP_LOG);
	  }
	  return NativePromise.resolve(opt_value);
	}


	/**
	 * Creates a promise that has been rejected with the given reason.
	 *
	 * If the promise manager is currently enabled, this function will return a
	 * {@linkplain ManagedPromise managed promise}. Otherwise, it will return a
	 * {@linkplain NativePromise native promise}.
	 *
	 * @param {*=} opt_reason The rejection reason; may be any value, but is
	 *     usually an Error or a string.
	 * @return {!Thenable<?>} The rejected promise.
	 */
	function rejected(opt_reason) {
	  if (usePromiseManager()) {
	    // We can skip logging warnings about creating a managed promise because
	    // this function will automatically switch to use a native promise when
	    // the promise manager is disabled.
	    return new ManagedPromise(
	        (_, reject) => reject(opt_reason), undefined, SKIP_LOG);
	  }
	  return NativePromise.reject(opt_reason);
	}


	/**
	 * Wraps a function that expects a node-style callback as its final
	 * argument. This callback expects two arguments: an error value (which will be
	 * null if the call succeeded), and the success value as the second argument.
	 * The callback will the resolve or reject the returned promise, based on its
	 * arguments.
	 * @param {!Function} fn The function to wrap.
	 * @param {...?} var_args The arguments to apply to the function, excluding the
	 *     final callback.
	 * @return {!Thenable} A promise that will be resolved with the
	 *     result of the provided function's callback.
	 */
	function checkedNodeCall(fn, var_args) {
	  let args = Array.prototype.slice.call(arguments, 1);
	  return createPromise(function(fulfill, reject) {
	    try {
	      args.push(function(error, value) {
	        error ? reject(error) : fulfill(value);
	      });
	      fn.apply(undefined, args);
	    } catch (ex) {
	      reject(ex);
	    }
	  });
	}

	/**
	 * Registers a listener to invoke when a promise is resolved, regardless
	 * of whether the promise's value was successfully computed. This function
	 * is synonymous with the {@code finally} clause in a synchronous API:
	 *
	 *     // Synchronous API:
	 *     try {
	 *       doSynchronousWork();
	 *     } finally {
	 *       cleanUp();
	 *     }
	 *
	 *     // Asynchronous promise API:
	 *     doAsynchronousWork().finally(cleanUp);
	 *
	 * __Note:__ similar to the {@code finally} clause, if the registered
	 * callback returns a rejected promise or throws an error, it will silently
	 * replace the rejection error (if any) from this promise:
	 *
	 *     try {
	 *       throw Error('one');
	 *     } finally {
	 *       throw Error('two');  // Hides Error: one
	 *     }
	 *
	 *     let p = Promise.reject(Error('one'));
	 *     promise.finally(p, function() {
	 *       throw Error('two');  // Hides Error: one
	 *     });
	 *
	 * @param {!IThenable<?>} promise The promise to add the listener to.
	 * @param {function(): (R|IThenable<R>)} callback The function to call when
	 *     the promise is resolved.
	 * @return {!IThenable<R>} A promise that will be resolved with the callback
	 *     result.
	 * @template R
	 */
	function thenFinally(promise, callback) {
	  let error;
	  let mustThrow = false;
	  return promise.then(function() {
	    return callback();
	  }, function(err) {
	    error = err;
	    mustThrow = true;
	    return callback();
	  }).then(function() {
	    if (mustThrow) {
	      throw error;
	    }
	  });
	}


	/**
	 * Registers an observer on a promised {@code value}, returning a new promise
	 * that will be resolved when the value is. If {@code value} is not a promise,
	 * then the return promise will be immediately resolved.
	 * @param {*} value The value to observe.
	 * @param {Function=} opt_callback The function to call when the value is
	 *     resolved successfully.
	 * @param {Function=} opt_errback The function to call when the value is
	 *     rejected.
	 * @return {!Thenable} A new promise.
	 * @deprecated Use `promise.fulfilled(value).then(opt_callback, opt_errback)`
	 */
	function when(value, opt_callback, opt_errback) {
	  return fulfilled(value).then(opt_callback, opt_errback);
	}


	/**
	 * Invokes the appropriate callback function as soon as a promised `value` is
	 * resolved.
	 *
	 * @param {*} value The value to observe.
	 * @param {Function} callback The function to call when the value is
	 *     resolved successfully.
	 * @param {Function=} opt_errback The function to call when the value is
	 *     rejected.
	 */
	function asap(value, callback, opt_errback) {
	  if (isPromise(value)) {
	    value.then(callback, opt_errback);

	  } else if (callback) {
	    callback(value);
	  }
	}


	/**
	 * Given an array of promises, will return a promise that will be fulfilled
	 * with the fulfillment values of the input array's values. If any of the
	 * input array's promises are rejected, the returned promise will be rejected
	 * with the same reason.
	 *
	 * @param {!Array<(T|!ManagedPromise<T>)>} arr An array of
	 *     promises to wait on.
	 * @return {!Thenable<!Array<T>>} A promise that is
	 *     fulfilled with an array containing the fulfilled values of the
	 *     input array, or rejected with the same reason as the first
	 *     rejected value.
	 * @template T
	 */
	function all(arr) {
	  return createPromise(function(fulfill, reject) {
	    var n = arr.length;
	    var values = [];

	    if (!n) {
	      fulfill(values);
	      return;
	    }

	    var toFulfill = n;
	    var onFulfilled = function(index, value) {
	      values[index] = value;
	      toFulfill--;
	      if (toFulfill == 0) {
	        fulfill(values);
	      }
	    };

	    function processPromise(index) {
	      asap(arr[index], function(value) {
	        onFulfilled(index, value);
	      }, reject);
	    }

	    for (var i = 0; i < n; ++i) {
	      processPromise(i);
	    }
	  });
	}


	/**
	 * Calls a function for each element in an array and inserts the result into a
	 * new array, which is used as the fulfillment value of the promise returned
	 * by this function.
	 *
	 * If the return value of the mapping function is a promise, this function
	 * will wait for it to be fulfilled before inserting it into the new array.
	 *
	 * If the mapping function throws or returns a rejected promise, the
	 * promise returned by this function will be rejected with the same reason.
	 * Only the first failure will be reported; all subsequent errors will be
	 * silently ignored.
	 *
	 * @param {!(Array<TYPE>|ManagedPromise<!Array<TYPE>>)} arr The
	 *     array to iterator over, or a promise that will resolve to said array.
	 * @param {function(this: SELF, TYPE, number, !Array<TYPE>): ?} fn The
	 *     function to call for each element in the array. This function should
	 *     expect three arguments (the element, the index, and the array itself.
	 * @param {SELF=} opt_self The object to be used as the value of 'this' within
	 *     {@code fn}.
	 * @template TYPE, SELF
	 */
	function map(arr, fn, opt_self) {
	  return createPromise(resolve => resolve(arr)).then(v => {
	    if (!Array.isArray(v)) {
	      throw TypeError('not an array');
	    }
	    var arr = /** @type {!Array} */(v);
	    return createPromise(function(fulfill, reject) {
	      var n = arr.length;
	      var values = new Array(n);
	      (function processNext(i) {
	        for (; i < n; i++) {
	          if (i in arr) {
	            break;
	          }
	        }
	        if (i >= n) {
	          fulfill(values);
	          return;
	        }
	        try {
	          asap(
	              fn.call(opt_self, arr[i], i, /** @type {!Array} */(arr)),
	              function(value) {
	                values[i] = value;
	                processNext(i + 1);
	              },
	              reject);
	        } catch (ex) {
	          reject(ex);
	        }
	      })(0);
	    });
	  });
	}


	/**
	 * Calls a function for each element in an array, and if the function returns
	 * true adds the element to a new array.
	 *
	 * If the return value of the filter function is a promise, this function
	 * will wait for it to be fulfilled before determining whether to insert the
	 * element into the new array.
	 *
	 * If the filter function throws or returns a rejected promise, the promise
	 * returned by this function will be rejected with the same reason. Only the
	 * first failure will be reported; all subsequent errors will be silently
	 * ignored.
	 *
	 * @param {!(Array<TYPE>|ManagedPromise<!Array<TYPE>>)} arr The
	 *     array to iterator over, or a promise that will resolve to said array.
	 * @param {function(this: SELF, TYPE, number, !Array<TYPE>): (
	 *             boolean|ManagedPromise<boolean>)} fn The function
	 *     to call for each element in the array.
	 * @param {SELF=} opt_self The object to be used as the value of 'this' within
	 *     {@code fn}.
	 * @template TYPE, SELF
	 */
	function filter(arr, fn, opt_self) {
	  return createPromise(resolve => resolve(arr)).then(v => {
	    if (!Array.isArray(v)) {
	      throw TypeError('not an array');
	    }
	    var arr = /** @type {!Array} */(v);
	    return createPromise(function(fulfill, reject) {
	      var n = arr.length;
	      var values = [];
	      var valuesLength = 0;
	      (function processNext(i) {
	        for (; i < n; i++) {
	          if (i in arr) {
	            break;
	          }
	        }
	        if (i >= n) {
	          fulfill(values);
	          return;
	        }
	        try {
	          var value = arr[i];
	          var include = fn.call(opt_self, value, i, /** @type {!Array} */(arr));
	          asap(include, function(include) {
	            if (include) {
	              values[valuesLength++] = value;
	            }
	            processNext(i + 1);
	            }, reject);
	        } catch (ex) {
	          reject(ex);
	        }
	      })(0);
	    });
	  });
	}


	/**
	 * Returns a promise that will be resolved with the input value in a
	 * fully-resolved state. If the value is an array, each element will be fully
	 * resolved. Likewise, if the value is an object, all keys will be fully
	 * resolved. In both cases, all nested arrays and objects will also be
	 * fully resolved.  All fields are resolved in place; the returned promise will
	 * resolve on {@code value} and not a copy.
	 *
	 * Warning: This function makes no checks against objects that contain
	 * cyclical references:
	 *
	 *     var value = {};
	 *     value['self'] = value;
	 *     promise.fullyResolved(value);  // Stack overflow.
	 *
	 * @param {*} value The value to fully resolve.
	 * @return {!Thenable} A promise for a fully resolved version
	 *     of the input value.
	 */
	function fullyResolved(value) {
	  if (isPromise(value)) {
	    return fulfilled(value).then(fullyResolveValue);
	  }
	  return fullyResolveValue(value);
	}


	/**
	 * @param {*} value The value to fully resolve. If a promise, assumed to
	 *     already be resolved.
	 * @return {!Thenable} A promise for a fully resolved version
	 *     of the input value.
	 */
	function fullyResolveValue(value) {
	  if (Array.isArray(value)) {
	    return fullyResolveKeys(/** @type {!Array} */ (value));
	  }

	  if (isPromise(value)) {
	    if (isPromise(value)) {
	      // We get here when the original input value is a promise that
	      // resolves to itself. When the user provides us with such a promise,
	      // trust that it counts as a "fully resolved" value and return it.
	      // Of course, since it's already a promise, we can just return it
	      // to the user instead of wrapping it in another promise.
	      return /** @type {!ManagedPromise} */ (value);
	    }
	  }

	  if (value && typeof value === 'object') {
	    return fullyResolveKeys(/** @type {!Object} */ (value));
	  }

	  if (typeof value === 'function') {
	    return fullyResolveKeys(/** @type {!Object} */ (value));
	  }

	  return createPromise(resolve => resolve(value));
	}


	/**
	 * @param {!(Array|Object)} obj the object to resolve.
	 * @return {!Thenable} A promise that will be resolved with the
	 *     input object once all of its values have been fully resolved.
	 */
	function fullyResolveKeys(obj) {
	  var isArray = Array.isArray(obj);
	  var numKeys = isArray ? obj.length : (function() {
	    let n = 0;
	    for (let key in obj) {
	      n += 1;
	    }
	    return n;
	  })();

	  if (!numKeys) {
	    return createPromise(resolve => resolve(obj));
	  }

	  function forEachProperty(obj, fn) {
	    for (let key in obj) {
	      fn.call(null, obj[key], key, obj);
	    }
	  }

	  function forEachElement(arr, fn) {
	    arr.forEach(fn);
	  }

	  var numResolved = 0;
	  return createPromise(function(fulfill, reject) {
	    var forEachKey = isArray ? forEachElement: forEachProperty;

	    forEachKey(obj, function(partialValue, key) {
	      if (!Array.isArray(partialValue)
	          && (!partialValue || typeof partialValue !== 'object')) {
	        maybeResolveValue();
	        return;
	      }

	      fullyResolved(partialValue).then(
	          function(resolvedValue) {
	            obj[key] = resolvedValue;
	            maybeResolveValue();
	          },
	          reject);
	    });

	    function maybeResolveValue() {
	      if (++numResolved == numKeys) {
	        fulfill(obj);
	      }
	    }
	  });
	}


	//////////////////////////////////////////////////////////////////////////////
	//
	//  ControlFlow
	//
	//////////////////////////////////////////////////////////////////////////////


	/**
	 * Defines methods for coordinating the execution of asynchronous tasks.
	 * @record
	 */
	class Scheduler {
	  /**
	   * Schedules a task for execution. If the task function is a generator, the
	   * task will be executed using {@link ./promise.consume consume()}.
	   *
	   * @param {function(): (T|IThenable<T>)} fn The function to call to start the
	   *     task.
	   * @param {string=} opt_description A description of the task for debugging
	   *     purposes.
	   * @return {!Thenable<T>} A promise that will be resolved with the task
	   *     result.
	   * @template T
	   */
	  execute(fn, opt_description) {}

	  /**
	   * Creates a new promise using the given resolver function.
	   *
	   * @param {function(
	   *             function((T|IThenable<T>|Thenable|null)=),
	   *             function(*=))} resolver
	   * @return {!Thenable<T>}
	   * @template T
	   */
	  promise(resolver) {}

	  /**
	   * Schedules a `setTimeout` call.
	   *
	   * @param {number} ms The timeout delay, in milliseconds.
	   * @param {string=} opt_description A description to accompany the timeout.
	   * @return {!Thenable<void>} A promise that will be resolved when the timeout
	   *     fires.
	   */
	  timeout(ms, opt_description) {}

	  /**
	   * Schedules a task to wait for a condition to hold.
	   *
	   * If the condition is defined as a function, it may return any value. Promise
	   * will be resolved before testing if the condition holds (resolution time
	   * counts towards the timeout). Once resolved, values are always evaluated as
	   * booleans.
	   *
	   * If the condition function throws, or returns a rejected promise, the
	   * wait task will fail.
	   *
	   * If the condition is defined as a promise, the scheduler will wait for it to
	   * settle. If the timeout expires before the promise settles, the promise
	   * returned by this function will be rejected.
	   *
	   * If this function is invoked with `timeout === 0`, or the timeout is
	   * omitted, this scheduler will wait indefinitely for the condition to be
	   * satisfied.
	   *
	   * @param {(!IThenable<T>|function())} condition The condition to poll,
	   *     or a promise to wait on.
	   * @param {number=} opt_timeout How long to wait, in milliseconds, for the
	   *     condition to hold before timing out. If omitted, the flow will wait
	   *     indefinitely.
	   * @param {string=} opt_message An optional error message to include if the
	   *     wait times out; defaults to the empty string.
	   * @return {!Thenable<T>} A promise that will be fulfilled
	   *     when the condition has been satisfied. The promise shall be rejected
	   *     if the wait times out waiting for the condition.
	   * @throws {TypeError} If condition is not a function or promise or if timeout
	   *     is not a number >= 0.
	   * @template T
	   */
	  wait(condition, opt_timeout, opt_message) {}
	}


	let USE_PROMISE_MANAGER;
	function usePromiseManager() {
	  if (typeof USE_PROMISE_MANAGER !== 'undefined') {
	    return !!USE_PROMISE_MANAGER;
	  }
	  return process.env['SELENIUM_PROMISE_MANAGER'] === undefined
	      || !/^0|false$/i.test(process.env['SELENIUM_PROMISE_MANAGER']);
	}


	/**
	 * Creates a new promise with the given `resolver` function. If the promise
	 * manager is currently enabled, the returned promise will be a
	 * {@linkplain ManagedPromise} instance. Otherwise, it will be a native promise.
	 *
	 * @param {function(
	 *             function((T|IThenable<T>|Thenable|null)=),
	 *             function(*=))} resolver
	 * @return {!Thenable<T>}
	 * @template T
	 */
	function createPromise(resolver) {
	  let ctor = usePromiseManager() ? ManagedPromise : NativePromise;
	  return new ctor(resolver);
	}


	/**
	 * @param {!Scheduler} scheduler The scheduler to use.
	 * @param {(!IThenable<T>|function())} condition The condition to poll,
	 *     or a promise to wait on.
	 * @param {number=} opt_timeout How long to wait, in milliseconds, for the
	 *     condition to hold before timing out. If omitted, the flow will wait
	 *     indefinitely.
	 * @param {string=} opt_message An optional error message to include if the
	 *     wait times out; defaults to the empty string.
	 * @return {!Thenable<T>} A promise that will be fulfilled
	 *     when the condition has been satisfied. The promise shall be rejected
	 *     if the wait times out waiting for the condition.
	 * @throws {TypeError} If condition is not a function or promise or if timeout
	 *     is not a number >= 0.
	 * @template T
	 */
	function scheduleWait(scheduler, condition, opt_timeout, opt_message) {
	  let timeout = opt_timeout || 0;
	  if (typeof timeout !== 'number' || timeout < 0) {
	    throw TypeError('timeout must be a number >= 0: ' + timeout);
	  }

	  if (isPromise(condition)) {
	    return scheduler.execute(function() {
	      if (!timeout) {
	        return condition;
	      }
	      return scheduler.promise(function(fulfill, reject) {
	        let start = Date.now();
	        let timer = setTimeout(function() {
	          timer = null;
	          reject(
	              new error.TimeoutError(
	                  (opt_message ? opt_message + '\n' : '')
	                      + 'Timed out waiting for promise to resolve after '
	                      + (Date.now() - start) + 'ms'));
	        }, timeout);

	        /** @type {Thenable} */(condition).then(
	          function(value) {
	            timer && clearTimeout(timer);
	            fulfill(value);
	          },
	          function(error) {
	            timer && clearTimeout(timer);
	            reject(error);
	          });
	      });
	    }, opt_message || '<anonymous wait: promise resolution>');
	  }

	  if (typeof condition !== 'function') {
	    throw TypeError('Invalid condition; must be a function or promise: ' +
	        typeof condition);
	  }

	  if (isGenerator(condition)) {
	    let original = condition;
	    condition = () => consume(original);
	  }

	  return scheduler.execute(function() {
	    var startTime = Date.now();
	    return scheduler.promise(function(fulfill, reject) {
	      pollCondition();

	      function pollCondition() {
	        var conditionFn = /** @type {function()} */(condition);
	        scheduler.execute(conditionFn).then(function(value) {
	          var elapsed = Date.now() - startTime;
	          if (!!value) {
	            fulfill(value);
	          } else if (timeout && elapsed >= timeout) {
	            reject(
	                new error.TimeoutError(
	                    (opt_message ? opt_message + '\n' : '')
	                        + `Wait timed out after ${elapsed}ms`));
	          } else {
	            // Do not use asyncRun here because we need a non-micro yield
	            // here so the UI thread is given a chance when running in a
	            // browser.
	            setTimeout(pollCondition, 0);
	          }
	        }, reject);
	      }
	    });
	  }, opt_message || '<anonymous wait>');
	}


	/**
	 * A scheduler that executes all tasks immediately, with no coordination. This
	 * class is an event emitter for API compatibility with the {@link ControlFlow},
	 * however, it emits no events.
	 *
	 * @implements {Scheduler}
	 */
	class SimpleScheduler extends events.EventEmitter {
	  /** @override */
	  execute(fn) {
	    return this.promise((resolve, reject) => {
	      try {
	        if (isGenerator(fn)) {
	          consume(fn).then(resolve, reject);
	        } else {
	          resolve(fn.call(undefined));
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    });
	  }

	  /** @override */
	  promise(resolver) {
	    return new NativePromise(resolver);
	  }

	  /** @override */
	  timeout(ms) {
	    return this.promise(resolve => setTimeout(_ => resolve(), ms));
	  }

	  /** @override */
	  wait(condition, opt_timeout, opt_message) {
	    return scheduleWait(this, condition, opt_timeout, opt_message);
	  }
	}
	const SIMPLE_SCHEDULER = new SimpleScheduler;


	/**
	 * Handles the execution of scheduled tasks, each of which may be an
	 * asynchronous operation. The control flow will ensure tasks are executed in
	 * the order scheduled, starting each task only once those before it have
	 * completed.
	 *
	 * Each task scheduled within this flow may return a {@link ManagedPromise} to
	 * indicate it is an asynchronous operation. The ControlFlow will wait for such
	 * promises to be resolved before marking the task as completed.
	 *
	 * Tasks and each callback registered on a {@link ManagedPromise} will be run
	 * in their own ControlFlow frame. Any tasks scheduled within a frame will take
	 * priority over previously scheduled tasks. Furthermore, if any of the tasks in
	 * the frame fail, the remainder of the tasks in that frame will be discarded
	 * and the failure will be propagated to the user through the callback/task's
	 * promised result.
	 *
	 * Each time a ControlFlow empties its task queue, it will fire an
	 * {@link ControlFlow.EventType.IDLE IDLE} event. Conversely, whenever
	 * the flow terminates due to an unhandled error, it will remove all
	 * remaining tasks in its queue and fire an
	 * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION UNCAUGHT_EXCEPTION} event.
	 * If there are no listeners registered with the flow, the error will be
	 * rethrown to the global error handler.
	 *
	 * Refer to the {@link ./promise} module documentation for a detailed
	 * explanation of how the ControlFlow coordinates task execution.
	 *
	 * @implements {Scheduler}
	 * @final
	 */
	class ControlFlow extends events.EventEmitter {
	  constructor() {
	    if (!usePromiseManager()) {
	      throw TypeError(
	          'Cannot instantiate control flow when the promise manager has'
	              + ' been disabled');
	    }

	    super();

	    /** @private {boolean} */
	    this.propagateUnhandledRejections_ = true;

	    /** @private {TaskQueue} */
	    this.activeQueue_ = null;

	    /** @private {Set<TaskQueue>} */
	    this.taskQueues_ = null;

	    /**
	     * Microtask that controls shutting down the control flow. Upon shut down,
	     * the flow will emit an
	     * {@link ControlFlow.EventType.IDLE} event. Idle events
	     * always follow a brief timeout in order to catch latent errors from the
	     * last completed task. If this task had a callback registered, but no
	     * errback, and the task fails, the unhandled failure would not be reported
	     * by the promise system until the next turn of the event loop:
	     *
	     *   // Schedule 1 task that fails.
	     *   var result = promise.controlFlow().execute(
	     *       () => promise.rejected('failed'), 'example');
	     *   // Set a callback on the result. This delays reporting the unhandled
	     *   // failure for 1 turn of the event loop.
	     *   result.then(function() {});
	     *
	     * @private {MicroTask}
	     */
	    this.shutdownTask_ = null;

	    /**
	     * ID for a long running interval used to keep a Node.js process running
	     * while a control flow's event loop is still working. This is a cheap hack
	     * required since JS events are only scheduled to run when there is
	     * _actually_ something to run. When a control flow is waiting on a task,
	     * there will be nothing in the JS event loop and the process would
	     * terminate without this.
	     * @private
	     */
	    this.hold_ = null;
	  }

	  /**
	   * Returns a string representation of this control flow, which is its current
	   * {@linkplain #getSchedule() schedule}, sans task stack traces.
	   * @return {string} The string representation of this control flow.
	   * @override
	   */
	  toString() {
	    return this.getSchedule();
	  }

	  /**
	   * Sets whether any unhandled rejections should propagate up through the
	   * control flow stack and cause rejections within parent tasks. If error
	   * propagation is disabled, tasks will not be aborted when an unhandled
	   * promise rejection is detected, but the rejection _will_ trigger an
	   * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION} event.
	   *
	   * The default behavior is to propagate all unhandled rejections. _The use
	   * of this option is highly discouraged._
	   *
	   * @param {boolean} propagate whether to propagate errors.
	   */
	  setPropagateUnhandledRejections(propagate) {
	    this.propagateUnhandledRejections_ = propagate;
	  }

	  /**
	   * @return {boolean} Whether this flow is currently idle.
	   */
	  isIdle() {
	    return !this.shutdownTask_ && (!this.taskQueues_ || !this.taskQueues_.size);
	  }

	  /**
	   * Resets this instance, clearing its queue and removing all event listeners.
	   */
	  reset() {
	    this.cancelQueues_(new FlowResetError);
	    this.emit(ControlFlow.EventType.RESET);
	    this.removeAllListeners();
	    this.cancelShutdown_();
	  }

	  /**
	   * Generates an annotated string describing the internal state of this control
	   * flow, including the currently executing as well as pending tasks. If
	   * {@code opt_includeStackTraces === true}, the string will include the
	   * stack trace from when each task was scheduled.
	   * @param {string=} opt_includeStackTraces Whether to include the stack traces
	   * from when each task was scheduled. Defaults to false.
	   * @return {string} String representation of this flow's internal state.
	   */
	  getSchedule(opt_includeStackTraces) {
	    var ret = 'ControlFlow::' + getUid(this);
	    var activeQueue = this.activeQueue_;
	    if (!this.taskQueues_ || !this.taskQueues_.size) {
	      return ret;
	    }
	    var childIndent = '| ';
	    for (var q of this.taskQueues_) {
	      ret += '\n' + printQ(q, childIndent);
	    }
	    return ret;

	    function printQ(q, indent) {
	      var ret = q.toString();
	      if (q === activeQueue) {
	        ret = '(active) ' + ret;
	      }
	      var prefix = indent + childIndent;
	      if (q.pending_) {
	        if (q.pending_.q.state_ !== TaskQueueState.FINISHED) {
	          ret += '\n' + prefix + '(pending) ' + q.pending_.task;
	          ret += '\n' + printQ(q.pending_.q, prefix + childIndent);
	        } else {
	          ret += '\n' + prefix + '(blocked) ' + q.pending_.task;
	        }
	      }
	      if (q.interrupts_) {
	        q.interrupts_.forEach((task) => {
	          ret += '\n' + prefix + task;
	        });
	      }
	      if (q.tasks_) {
	        q.tasks_.forEach((task) => ret += printTask(task, '\n' + prefix));
	      }
	      return indent + ret;
	    }

	    function printTask(task, prefix) {
	      var ret = prefix + task;
	      if (opt_includeStackTraces && task.promise.stack_) {
	        ret += prefix + childIndent
	            + (task.promise.stack_.stack || task.promise.stack_)
	                  .replace(/\n/g, prefix);
	      }
	      return ret;
	    }
	  }

	  /**
	   * Returns the currently active task queue for this flow. If there is no
	   * active queue, one will be created.
	   * @return {!TaskQueue} the currently active task queue for this flow.
	   * @private
	   */
	  getActiveQueue_() {
	    if (this.activeQueue_) {
	      return this.activeQueue_;
	    }

	    this.activeQueue_ = new TaskQueue(this);
	    if (!this.taskQueues_) {
	      this.taskQueues_ = new Set();
	    }
	    this.taskQueues_.add(this.activeQueue_);
	    this.activeQueue_
	        .once('end', this.onQueueEnd_, this)
	        .once('error', this.onQueueError_, this);

	    asyncRun(() => this.activeQueue_ = null);
	    this.activeQueue_.start();
	    return this.activeQueue_;
	  }

	  /** @override */
	  execute(fn, opt_description) {
	    if (isGenerator(fn)) {
	      let original = fn;
	      fn = () => consume(original);
	    }

	    if (!this.hold_) {
	      let holdIntervalMs = 2147483647;  // 2^31-1; max timer length for Node.js
	      this.hold_ = setInterval(function() {}, holdIntervalMs);
	    }

	    let task = new Task(
	        this, fn, opt_description || '<anonymous>',
	        {name: 'Task', top: ControlFlow.prototype.execute},
	        true);

	    let q = this.getActiveQueue_();

	    for (let i = q.tasks_.length; i > 0; i--) {
	      let previousTask = q.tasks_[i - 1];
	      if (previousTask.userTask_) {
	        FLOW_LOG.warning(() => {
	          return `Detected scheduling of an unchained task.
	When the promise manager is disabled, unchained tasks will not wait for
	previously scheduled tasks to finish before starting to execute.
	New task: ${task.promise.stack_.stack}
	Previous task: ${previousTask.promise.stack_.stack}`.split(/\n/).join('\n    ');
	        });
	        break;
	      }
	    }

	    q.enqueue(task);
	    this.emit(ControlFlow.EventType.SCHEDULE_TASK, task.description);
	    return task.promise;
	  }

	  /** @override */
	  promise(resolver) {
	    return new ManagedPromise(resolver, this, SKIP_LOG);
	  }

	  /** @override */
	  timeout(ms, opt_description) {
	    return this.execute(() => {
	      return this.promise(resolve => setTimeout(() => resolve(), ms));
	    }, opt_description);
	  }

	  /** @override */
	  wait(condition, opt_timeout, opt_message) {
	    return scheduleWait(this, condition, opt_timeout, opt_message);
	  }

	  /**
	   * Executes a function in the next available turn of the JavaScript event
	   * loop. This ensures the function runs with its own task queue and any
	   * scheduled tasks will run in "parallel" to those scheduled in the current
	   * function.
	   *
	   *     flow.execute(() => console.log('a'));
	   *     flow.execute(() => console.log('b'));
	   *     flow.execute(() => console.log('c'));
	   *     flow.async(() => {
	   *        flow.execute(() => console.log('d'));
	   *        flow.execute(() => console.log('e'));
	   *     });
	   *     flow.async(() => {
	   *        flow.execute(() => console.log('f'));
	   *        flow.execute(() => console.log('g'));
	   *     });
	   *     flow.once('idle', () => console.log('fin'));
	   *     // a
	   *     // d
	   *     // f
	   *     // b
	   *     // e
	   *     // g
	   *     // c
	   *     // fin
	   *
	   * If the function itself throws, the error will be treated the same as an
	   * unhandled rejection within the control flow.
	   *
	   * __NOTE__: This function is considered _unstable_.
	   *
	   * @param {!Function} fn The function to execute.
	   * @param {Object=} opt_self The object in whose context to run the function.
	   * @param {...*} var_args Any arguments to pass to the function.
	   */
	  async(fn, opt_self, var_args) {
	    asyncRun(() => {
	      // Clear any lingering queues, forces getActiveQueue_ to create a new one.
	      this.activeQueue_ = null;
	      var q = this.getActiveQueue_();
	      try {
	        q.execute_(fn.bind(opt_self, var_args));
	      } catch (ex) {
	        var cancellationError = CancellationError.wrap(ex,
	            'Function passed to ControlFlow.async() threw');
	        cancellationError.silent_ = true;
	        q.abort_(cancellationError);
	      } finally {
	        this.activeQueue_ = null;
	      }
	    });
	  }

	  /**
	   * Event handler for when a task queue is exhausted. This starts the shutdown
	   * sequence for this instance if there are no remaining task queues: after
	   * one turn of the event loop, this object will emit the
	   * {@link ControlFlow.EventType.IDLE IDLE} event to signal
	   * listeners that it has completed. During this wait, if another task is
	   * scheduled, the shutdown will be aborted.
	   *
	   * @param {!TaskQueue} q the completed task queue.
	   * @private
	   */
	  onQueueEnd_(q) {
	    if (!this.taskQueues_) {
	      return;
	    }
	    this.taskQueues_.delete(q);

	    vlog(1, () => q + ' has finished');
	    vlog(1, () => this.taskQueues_.size + ' queues remain\n' + this, this);

	    if (!this.taskQueues_.size) {
	      if (this.shutdownTask_) {
	        throw Error('Already have a shutdown task??');
	      }
	      vlog(1, () => 'Scheduling shutdown\n' + this);
	      this.shutdownTask_ = new MicroTask(() => this.shutdown_());
	    }
	  }

	  /**
	   * Event handler for when a task queue terminates with an error. This triggers
	   * the cancellation of all other task queues and a
	   * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION} event.
	   * If there are no error event listeners registered with this instance, the
	   * error will be rethrown to the global error handler.
	   *
	   * @param {*} error the error that caused the task queue to terminate.
	   * @param {!TaskQueue} q the task queue.
	   * @private
	   */
	  onQueueError_(error, q) {
	    if (this.taskQueues_) {
	      this.taskQueues_.delete(q);
	    }
	    this.cancelQueues_(CancellationError.wrap(
	        error, 'There was an uncaught error in the control flow'));
	    this.cancelShutdown_();
	    this.cancelHold_();

	    setTimeout(() => {
	      let listeners = this.listeners(ControlFlow.EventType.UNCAUGHT_EXCEPTION);
	      if (!listeners.size) {
	        throw error;
	      } else {
	        this.reportUncaughtException_(error);
	      }
	    }, 0);
	  }

	  /**
	   * Cancels all remaining task queues.
	   * @param {!CancellationError} reason The cancellation reason.
	   * @private
	   */
	  cancelQueues_(reason) {
	    reason.silent_ = true;
	    if (this.taskQueues_) {
	      for (var q of this.taskQueues_) {
	        q.removeAllListeners();
	        q.abort_(reason);
	      }
	      this.taskQueues_.clear();
	      this.taskQueues_ = null;
	    }
	  }

	  /**
	   * Reports an uncaught exception using a
	   * {@link ControlFlow.EventType.UNCAUGHT_EXCEPTION} event.
	   *
	   * @param {*} e the error to report.
	   * @private
	   */
	  reportUncaughtException_(e) {
	    this.emit(ControlFlow.EventType.UNCAUGHT_EXCEPTION, e);
	  }

	  /** @private */
	  cancelHold_() {
	    if (this.hold_) {
	      clearInterval(this.hold_);
	      this.hold_ = null;
	    }
	  }

	  /** @private */
	  shutdown_() {
	    vlog(1, () => 'Going idle: ' + this);
	    this.cancelHold_();
	    this.shutdownTask_ = null;
	    this.emit(ControlFlow.EventType.IDLE);
	  }

	  /**
	   * Cancels the shutdown sequence if it is currently scheduled.
	   * @private
	   */
	  cancelShutdown_() {
	    if (this.shutdownTask_) {
	      this.shutdownTask_.cancel();
	      this.shutdownTask_ = null;
	    }
	  }
	}


	/**
	 * Events that may be emitted by an {@link ControlFlow}.
	 * @enum {string}
	 */
	ControlFlow.EventType = {

	  /** Emitted when all tasks have been successfully executed. */
	  IDLE: 'idle',

	  /** Emitted when a ControlFlow has been reset. */
	  RESET: 'reset',

	  /** Emitted whenever a new task has been scheduled. */
	  SCHEDULE_TASK: 'scheduleTask',

	  /**
	   * Emitted whenever a control flow aborts due to an unhandled promise
	   * rejection. This event will be emitted along with the offending rejection
	   * reason. Upon emitting this event, the control flow will empty its task
	   * queue and revert to its initial state.
	   */
	  UNCAUGHT_EXCEPTION: 'uncaughtException'
	};


	/**
	 * Wraps a function to execute as a cancellable micro task.
	 * @final
	 */
	class MicroTask {
	  /**
	   * @param {function()} fn The function to run as a micro task.
	   */
	  constructor(fn) {
	    /** @private {boolean} */
	    this.cancelled_ = false;
	    asyncRun(() => {
	      if (!this.cancelled_) {
	        fn();
	      }
	    });
	  }

	  /**
	   * Runs the given function after a microtask yield.
	   * @param {function()} fn The function to run.
	   */
	  static run(fn) {
	    NativePromise.resolve().then(function() {
	      try {
	        fn();
	      } catch (ignored) {
	        // Do nothing.
	      }
	    });
	  }

	  /**
	   * Cancels the execution of this task. Note: this will not prevent the task
	   * timer from firing, just the invocation of the wrapped function.
	   */
	  cancel() {
	    this.cancelled_ = true;
	  }
	}


	/**
	 * A task to be executed by a {@link ControlFlow}.
	 *
	 * @template T
	 * @final
	 */
	class Task extends Deferred {
	  /**
	   * @param {!ControlFlow} flow The flow this instances belongs
	   *     to.
	   * @param {function(): (T|!ManagedPromise<T>)} fn The function to
	   *     call when the task executes. If it returns a
	   *     {@link ManagedPromise}, the flow will wait for it to be
	   *     resolved before starting the next task.
	   * @param {string} description A description of the task for debugging.
	   * @param {{name: string, top: !Function}=} opt_stackOptions Options to use
	   *     when capturing the stacktrace for when this task was created.
	   * @param {boolean=} opt_isUserTask Whether this task was explicitly scheduled
	   *     by the use of the promise manager.
	   */
	  constructor(flow, fn, description, opt_stackOptions, opt_isUserTask) {
	    super(flow, SKIP_LOG);
	    getUid(this);

	    /** @type {function(): (T|!ManagedPromise<T>)} */
	    this.execute = fn;

	    /** @type {string} */
	    this.description = description;

	    /** @type {TaskQueue} */
	    this.queue = null;

	    /** @private @const {boolean} */
	    this.userTask_ = !!opt_isUserTask;

	    /**
	     * Whether this task is considered block. A blocked task may be registered
	     * in a task queue, but will be dropped if it is still blocked when it
	     * reaches the front of the queue. A dropped task may always be rescheduled.
	     *
	     * Blocked tasks are used when a callback is attached to an unsettled
	     * promise to reserve a spot in line (in a manner of speaking). If the
	     * promise is not settled before the callback reaches the front of the
	     * of the queue, it will be dropped. Once the promise is settled, the
	     * dropped task will be rescheduled as an interrupt on the currently task
	     * queue.
	     *
	     * @type {boolean}
	     */
	    this.blocked = false;

	    if (opt_stackOptions) {
	      this.promise.stack_ = captureStackTrace(
	          opt_stackOptions.name, this.description, opt_stackOptions.top);
	    }
	  }

	  /** @override */
	  toString() {
	    return 'Task::' + getUid(this) + '<' + this.description + '>';
	  }
	}


	/** @enum {string} */
	const TaskQueueState = {
	  NEW: 'new',
	  STARTED: 'started',
	  FINISHED: 'finished'
	};


	/**
	 * @final
	 */
	class TaskQueue extends events.EventEmitter {
	  /** @param {!ControlFlow} flow . */
	  constructor(flow) {
	    super();

	    /** @private {string} */
	    this.name_ = 'TaskQueue::' + getUid(this);

	    /** @private {!ControlFlow} */
	    this.flow_ = flow;

	    /** @private {!Array<!Task>} */
	    this.tasks_ = [];

	    /** @private {Array<!Task>} */
	    this.interrupts_ = null;

	    /** @private {({task: !Task, q: !TaskQueue}|null)} */
	    this.pending_ = null;

	    /** @private {TaskQueue} */
	    this.subQ_ = null;

	    /** @private {TaskQueueState} */
	    this.state_ = TaskQueueState.NEW;

	    /** @private {!Set<!ManagedPromise>} */
	    this.unhandledRejections_ = new Set();
	  }

	  /** @override */
	  toString() {
	    return 'TaskQueue::' + getUid(this);
	  }

	  /**
	   * @param {!ManagedPromise} promise .
	   */
	  addUnhandledRejection(promise) {
	    // TODO: node 4.0.0+
	    vlog(2, () => this + ' registering unhandled rejection: ' + promise, this);
	    this.unhandledRejections_.add(promise);
	  }

	  /**
	   * @param {!ManagedPromise} promise .
	   */
	  clearUnhandledRejection(promise) {
	    var deleted = this.unhandledRejections_.delete(promise);
	    if (deleted) {
	      // TODO: node 4.0.0+
	      vlog(2, () => this + ' clearing unhandled rejection: ' + promise, this);
	    }
	  }

	  /**
	   * Enqueues a new task for execution.
	   * @param {!Task} task The task to enqueue.
	   * @throws {Error} If this instance has already started execution.
	   */
	  enqueue(task) {
	    if (this.state_ !== TaskQueueState.NEW) {
	      throw Error('TaskQueue has started: ' + this);
	    }

	    if (task.queue) {
	      throw Error('Task is already scheduled in another queue');
	    }

	    this.tasks_.push(task);
	    task.queue = this;
	    ON_CANCEL_HANDLER.set(
	        task.promise,
	        (e) => this.onTaskCancelled_(task, e));

	    vlog(1, () => this + '.enqueue(' + task + ')', this);
	    vlog(2, () => this.flow_.toString(), this);
	  }

	  /**
	   * Schedules the callbacks registered on the given promise in this queue.
	   *
	   * @param {!ManagedPromise} promise the promise whose callbacks should be
	   *     registered as interrupts in this task queue.
	   * @throws {Error} if this queue has already finished.
	   */
	  scheduleCallbacks(promise) {
	    if (this.state_ === TaskQueueState.FINISHED) {
	      throw new Error('cannot interrupt a finished q(' + this + ')');
	    }

	    if (this.pending_ && this.pending_.task.promise === promise) {
	      this.pending_.task.promise.queue_ = null;
	      this.pending_ = null;
	      asyncRun(() => this.executeNext_());
	    }

	    if (!promise.callbacks_) {
	      return;
	    }
	    promise.callbacks_.forEach(function(cb) {
	      cb.blocked = false;
	      if (cb.queue) {
	        return;
	      }

	      ON_CANCEL_HANDLER.set(
	          cb.promise,
	          (e) => this.onTaskCancelled_(cb, e));

	      if (cb.queue === this && this.tasks_.indexOf(cb) !== -1) {
	        return;
	      }

	      if (cb.queue) {
	        cb.queue.dropTask_(cb);
	      }

	      cb.queue = this;
	      if (!this.interrupts_) {
	        this.interrupts_ = [];
	      }
	      this.interrupts_.push(cb);
	    }, this);
	    promise.callbacks_ = null;
	    vlog(2, () => this + ' interrupted\n' + this.flow_, this);
	  }

	  /**
	   * Starts executing tasks in this queue. Once called, no further tasks may
	   * be {@linkplain #enqueue() enqueued} with this instance.
	   *
	   * @throws {Error} if this queue has already been started.
	   */
	  start() {
	    if (this.state_ !== TaskQueueState.NEW) {
	      throw new Error('TaskQueue has already started');
	    }
	    // Always asynchronously execute next, even if there doesn't look like
	    // there is anything in the queue. This will catch pending unhandled
	    // rejections that were registered before start was called.
	    asyncRun(() => this.executeNext_());
	  }

	  /**
	   * Aborts this task queue. If there are any scheduled tasks, they are silently
	   * cancelled and discarded (their callbacks will never fire). If this queue
	   * has a _pending_ task, the abortion error is used to cancel that task.
	   * Otherwise, this queue will emit an error event.
	   *
	   * @param {*} error The abortion reason.
	   * @private
	   */
	  abort_(error) {
	    var cancellation;

	    if (error instanceof FlowResetError) {
	      cancellation = error;
	    } else {
	      cancellation = new DiscardedTaskError(error);
	    }

	    if (this.interrupts_ && this.interrupts_.length) {
	      this.interrupts_.forEach((t) => t.reject(cancellation));
	      this.interrupts_ = [];
	    }

	    if (this.tasks_ && this.tasks_.length) {
	      this.tasks_.forEach((t) => t.reject(cancellation));
	      this.tasks_ = [];
	    }

	    // Now that all of the remaining tasks have been silently cancelled (e.g. no
	    // existing callbacks on those tasks will fire), clear the silence bit on
	    // the cancellation error. This ensures additional callbacks registered in
	    // the future will actually execute.
	    cancellation.silent_ = false;

	    if (this.pending_) {
	      vlog(2, () => this + '.abort(); cancelling pending task', this);
	      this.pending_.task.promise.cancel(
	          /** @type {!CancellationError} */(error));

	    } else {
	      vlog(2, () => this + '.abort(); emitting error event', this);
	      this.emit('error', error, this);
	    }
	  }

	  /** @private */
	  executeNext_() {
	    if (this.state_ === TaskQueueState.FINISHED) {
	      return;
	    }
	    this.state_ = TaskQueueState.STARTED;

	    if (this.pending_ !== null || this.processUnhandledRejections_()) {
	      return;
	    }

	    var task;
	    do {
	      task = this.getNextTask_();
	    } while (task && !isPending(task.promise));

	    if (!task) {
	      this.state_ = TaskQueueState.FINISHED;
	      this.tasks_ = [];
	      this.interrupts_ = null;
	      vlog(2, () => this + '.emit(end)', this);
	      this.emit('end', this);
	      return;
	    }

	    let result = undefined;
	    this.subQ_ = new TaskQueue(this.flow_);

	    this.subQ_.once('end', () => {  // On task completion.
	      this.subQ_ = null;
	      this.pending_ && this.pending_.task.resolve(result);
	    });

	    this.subQ_.once('error', e => {  // On task failure.
	      this.subQ_ = null;
	      if (Thenable.isImplementation(result)) {
	        result.cancel(CancellationError.wrap(e));
	      }
	      this.pending_ && this.pending_.task.reject(e);
	    });
	    vlog(2, () => `${this} created ${this.subQ_} for ${task}`);

	    try {
	      this.pending_ = {task: task, q: this.subQ_};
	      task.promise.queue_ = this;
	      result = this.subQ_.execute_(task.execute);
	      this.subQ_.start();
	    } catch (ex) {
	      this.subQ_.abort_(ex);
	    }
	  }

	  /**
	   * @param {!Function} fn .
	   * @return {T} .
	   * @template T
	   * @private
	   */
	  execute_(fn) {
	    try {
	      activeFlows.push(this.flow_);
	      this.flow_.activeQueue_ = this;
	      return fn();
	    } finally {
	      this.flow_.activeQueue_ = null;
	      activeFlows.pop();
	    }
	  }

	  /**
	   * Process any unhandled rejections registered with this task queue. If there
	   * is a rejection, this queue will be aborted with the rejection error. If
	   * there are multiple rejections registered, this queue will be aborted with
	   * a {@link MultipleUnhandledRejectionError}.
	   * @return {boolean} whether there was an unhandled rejection.
	   * @private
	   */
	  processUnhandledRejections_() {
	    if (!this.unhandledRejections_.size) {
	      return false;
	    }

	    var errors = new Set();
	    for (var rejection of this.unhandledRejections_) {
	      errors.add(rejection.value_);
	    }
	    this.unhandledRejections_.clear();

	    var errorToReport = errors.size === 1
	        ? errors.values().next().value
	        : new MultipleUnhandledRejectionError(errors);

	    vlog(1, () => this + ' aborting due to unhandled rejections', this);
	    if (this.flow_.propagateUnhandledRejections_) {
	      this.abort_(errorToReport);
	      return true;
	    } else {
	      vlog(1, 'error propagation disabled; reporting to control flow');
	      this.flow_.reportUncaughtException_(errorToReport);
	      return false;
	    }
	  }

	  /**
	   * @param {!Task} task The task to drop.
	   * @private
	   */
	  dropTask_(task) {
	    var index;
	    if (this.interrupts_) {
	      index = this.interrupts_.indexOf(task);
	      if (index != -1) {
	        task.queue = null;
	        this.interrupts_.splice(index, 1);
	        return;
	      }
	    }

	    index = this.tasks_.indexOf(task);
	    if (index != -1) {
	      task.queue = null;
	      this.tasks_.splice(index, 1);
	    }
	  }

	  /**
	   * @param {!Task} task The task that was cancelled.
	   * @param {!CancellationError} reason The cancellation reason.
	   * @private
	   */
	  onTaskCancelled_(task, reason) {
	    if (this.pending_ && this.pending_.task === task) {
	      this.pending_.q.abort_(reason);
	    } else {
	      this.dropTask_(task);
	    }
	  }

	  /**
	   * @return {(Task|undefined)} the next task scheduled within this queue,
	   *     if any.
	   * @private
	   */
	  getNextTask_() {
	    var task = undefined;
	    while (true) {
	      if (this.interrupts_) {
	        task = this.interrupts_.shift();
	      }
	      if (!task && this.tasks_) {
	        task = this.tasks_.shift();
	      }
	      if (task && task.blocked) {
	        vlog(2, () => this + ' skipping blocked task ' + task, this);
	        task.queue = null;
	        task = null;
	        // TODO: recurse when tail-call optimization is available in node.
	      } else {
	        break;
	      }
	    }
	    return task;
	  }
	}



	/**
	 * The default flow to use if no others are active.
	 * @type {ControlFlow}
	 */
	var defaultFlow;


	/**
	 * A stack of active control flows, with the top of the stack used to schedule
	 * commands. When there are multiple flows on the stack, the flow at index N
	 * represents a callback triggered within a task owned by the flow at index
	 * N-1.
	 * @type {!Array<!ControlFlow>}
	 */
	var activeFlows = [];


	/**
	 * Changes the default flow to use when no others are active.
	 * @param {!ControlFlow} flow The new default flow.
	 * @throws {Error} If the default flow is not currently active.
	 */
	function setDefaultFlow(flow) {
	  if (!usePromiseManager()) {
	    throw Error(
	        'You  may not change set the control flow when the promise'
	            +' manager is disabled');
	  }
	  if (activeFlows.length) {
	    throw Error('You may only change the default flow while it is active');
	  }
	  defaultFlow = flow;
	}


	/**
	 * @return {!ControlFlow} The currently active control flow.
	 * @suppress {checkTypes}
	 */
	function controlFlow() {
	  if (!usePromiseManager()) {
	    return SIMPLE_SCHEDULER;
	  }

	  if (activeFlows.length) {
	    return activeFlows[activeFlows.length - 1];
	  }

	  if (!defaultFlow) {
	    defaultFlow = new ControlFlow;
	  }
	  return defaultFlow;
	}


	/**
	 * Creates a new control flow. The provided callback will be invoked as the
	 * first task within the new flow, with the flow as its sole argument. Returns
	 * a promise that resolves to the callback result.
	 * @param {function(!ControlFlow)} callback The entry point
	 *     to the newly created flow.
	 * @return {!Thenable} A promise that resolves to the callback result.
	 */
	function createFlow(callback) {
	  var flow = new ControlFlow;
	  return flow.execute(function() {
	    return callback(flow);
	  });
	}


	/**
	 * Tests is a function is a generator.
	 * @param {!Function} fn The function to test.
	 * @return {boolean} Whether the function is a generator.
	 */
	function isGenerator(fn) {
	  return fn.constructor.name === 'GeneratorFunction';
	}


	/**
	 * Consumes a {@code GeneratorFunction}. Each time the generator yields a
	 * promise, this function will wait for it to be fulfilled before feeding the
	 * fulfilled value back into {@code next}. Likewise, if a yielded promise is
	 * rejected, the rejection error will be passed to {@code throw}.
	 *
	 * __Example 1:__ the Fibonacci Sequence.
	 *
	 *     promise.consume(function* fibonacci() {
	 *       var n1 = 1, n2 = 1;
	 *       for (var i = 0; i < 4; ++i) {
	 *         var tmp = yield n1 + n2;
	 *         n1 = n2;
	 *         n2 = tmp;
	 *       }
	 *       return n1 + n2;
	 *     }).then(function(result) {
	 *       console.log(result);  // 13
	 *     });
	 *
	 * __Example 2:__ a generator that throws.
	 *
	 *     promise.consume(function* () {
	 *       yield promise.delayed(250).then(function() {
	 *         throw Error('boom');
	 *       });
	 *     }).catch(function(e) {
	 *       console.log(e.toString());  // Error: boom
	 *     });
	 *
	 * @param {!Function} generatorFn The generator function to execute.
	 * @param {Object=} opt_self The object to use as "this" when invoking the
	 *     initial generator.
	 * @param {...*} var_args Any arguments to pass to the initial generator.
	 * @return {!Thenable<?>} A promise that will resolve to the
	 *     generator's final result.
	 * @throws {TypeError} If the given function is not a generator.
	 */
	function consume(generatorFn, opt_self, ...var_args) {
	  if (!isGenerator(generatorFn)) {
	    throw new TypeError('Input is not a GeneratorFunction: ' +
	        generatorFn.constructor.name);
	  }

	  let ret;
	  return ret = createPromise((resolve, reject) => {
	    let generator = generatorFn.apply(opt_self, var_args);
	    callNext();

	    /** @param {*=} opt_value . */
	    function callNext(opt_value) {
	      pump(generator.next, opt_value);
	    }

	    /** @param {*=} opt_error . */
	    function callThrow(opt_error) {
	      pump(generator.throw, opt_error);
	    }

	    function pump(fn, opt_arg) {
	      if (ret instanceof ManagedPromise && !isPending(ret)) {
	        return;  // Deferred was cancelled; silently abort.
	      }

	      try {
	        var result = fn.call(generator, opt_arg);
	      } catch (ex) {
	        reject(ex);
	        return;
	      }

	      if (result.done) {
	        resolve(result.value);
	        return;
	      }

	      asap(result.value, callNext, callThrow);
	    }
	  });
	}


	// PUBLIC API


	module.exports = {
	  CancellableThenable: CancellableThenable,
	  CancellationError: CancellationError,
	  ControlFlow: ControlFlow,
	  Deferred: Deferred,
	  MultipleUnhandledRejectionError: MultipleUnhandledRejectionError,
	  Thenable: Thenable,
	  Promise: ManagedPromise,
	  Resolver: Resolver,
	  Scheduler: Scheduler,
	  all: all,
	  asap: asap,
	  captureStackTrace: captureStackTrace,
	  checkedNodeCall: checkedNodeCall,
	  consume: consume,
	  controlFlow: controlFlow,
	  createFlow: createFlow,
	  createPromise: createPromise,
	  defer: defer,
	  delayed: delayed,
	  filter: filter,
	  finally: thenFinally,
	  fulfilled: fulfilled,
	  fullyResolved: fullyResolved,
	  isGenerator: isGenerator,
	  isPromise: isPromise,
	  map: map,
	  rejected: rejected,
	  setDefaultFlow: setDefaultFlow,
	  when: when,

	  /**
	   * Indicates whether the promise manager is currently enabled. When disabled,
	   * attempting to use the {@link ControlFlow} or {@link ManagedPromise Promise}
	   * classes will generate an error.
	   *
	   * The promise manager is currently enabled by default, but may be disabled
	   * by setting the environment variable `SELENIUM_PROMISE_MANAGER=0` or by
	   * setting this property to false. Setting this property will always take
	   * precedence over the use of the environment variable.
	   *
	   * @return {boolean} Whether the promise manager is enabled.
	   * @see <https://github.com/SeleniumHQ/selenium/issues/2969>
	   */
	  get USE_PROMISE_MANAGER() { return usePromiseManager(); },
	  set USE_PROMISE_MANAGER(/** boolean */value) { USE_PROMISE_MANAGER = value; },

	  get LONG_STACK_TRACES() { return LONG_STACK_TRACES; },
	  set LONG_STACK_TRACES(v) { LONG_STACK_TRACES = v; },
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 37 */
/***/ (function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * The base WebDriver error type. This error type is only used directly when a
	 * more appropriate category is not defined for the offending error.
	 */
	class WebDriverError extends Error {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);

	    /** @override */
	    this.name = this.constructor.name;
	  }
	}


	/**
	 * An attempt was made to select an element that cannot be selected.
	 */
	class ElementNotSelectableError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An element command could not be completed because the element is not visible
	 * on the page.
	 */
	class ElementNotVisibleError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The arguments passed to a command are either invalid or malformed.
	 */
	class InvalidArgumentError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An illegal attempt was made to set a cookie under a different domain than
	 * the current page.
	 */
	class InvalidCookieDomainError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The coordinates provided to an interactions operation are invalid.
	 */
	class InvalidElementCoordinatesError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An element command could not be completed because the element is in an
	 * invalid state, e.g. attempting to click an element that is no longer attached
	 * to the document.
	 */
	class InvalidElementStateError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * Argument was an invalid selector.
	 */
	class InvalidSelectorError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * Occurs when a command is directed to a session that does not exist.
	 */
	class NoSuchSessionError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An error occurred while executing JavaScript supplied by the user.
	 */
	class JavascriptError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The target for mouse interaction is not in the browser’s viewport and cannot
	 * be brought into that viewport.
	 */
	class MoveTargetOutOfBoundsError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An attempt was made to operate on a modal dialog when one was not open.
	 */
	class NoSuchAlertError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An element could not be located on the page using the given search
	 * parameters.
	 */
	class NoSuchElementError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A request to switch to a frame could not be satisfied because the frame
	 * could not be found.
	 */
	class NoSuchFrameError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A request to switch to a window could not be satisfied because the window
	 * could not be found.
	 */
	class NoSuchWindowError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A script did not complete before its timeout expired.
	 */
	class ScriptTimeoutError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A new session could not be created.
	 */
	class SessionNotCreatedError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}



	/**
	 * An element command failed because the referenced element is no longer
	 * attached to the DOM.
	 */
	class StaleElementReferenceError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * An operation did not complete before its timeout expired.
	 */
	class TimeoutError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A request to set a cookie’s value could not be satisfied.
	 */
	class UnableToSetCookieError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A screen capture operation was not possible.
	 */
	class UnableToCaptureScreenError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * A modal dialog was open, blocking this operation.
	 */
	class UnexpectedAlertOpenError extends WebDriverError {
	  /**
	   * @param {string=} opt_error the error message, if any.
	   * @param {string=} opt_text the text of the open dialog, if available.
	   */
	  constructor(opt_error, opt_text) {
	    super(opt_error);

	    /** @private {(string|undefined)} */
	    this.text_ = opt_text;
	  }

	  /**
	   * @return {(string|undefined)} The text displayed with the unhandled alert,
	   *     if available.
	   */
	  getAlertText() {
	    return this.text_;
	  }
	}


	/**
	 * A command could not be executed because the remote end is not aware of it.
	 */
	class UnknownCommandError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * The requested command matched a known URL but did not match an method for
	 * that URL.
	 */
	class UnknownMethodError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}


	/**
	 * Reports an unsupported operation.
	 */
	class UnsupportedOperationError extends WebDriverError {
	  /** @param {string=} opt_error the error message, if any. */
	  constructor(opt_error) {
	    super(opt_error);
	  }
	}

	// TODO(jleyba): Define UnknownError as an alias of WebDriverError?


	/**
	 * Enum of legacy error codes.
	 * TODO: remove this when all code paths have been switched to the new error
	 * types.
	 * @deprecated
	 * @enum {number}
	 */
	const ErrorCode = {
	  SUCCESS: 0,
	  NO_SUCH_ELEMENT: 7,
	  NO_SUCH_FRAME: 8,
	  UNKNOWN_COMMAND: 9,
	  UNSUPPORTED_OPERATION: 9,
	  STALE_ELEMENT_REFERENCE: 10,
	  ELEMENT_NOT_VISIBLE: 11,
	  INVALID_ELEMENT_STATE: 12,
	  UNKNOWN_ERROR: 13,
	  ELEMENT_NOT_SELECTABLE: 15,
	  JAVASCRIPT_ERROR: 17,
	  XPATH_LOOKUP_ERROR: 19,
	  TIMEOUT: 21,
	  NO_SUCH_WINDOW: 23,
	  INVALID_COOKIE_DOMAIN: 24,
	  UNABLE_TO_SET_COOKIE: 25,
	  UNEXPECTED_ALERT_OPEN: 26,
	  NO_SUCH_ALERT: 27,
	  SCRIPT_TIMEOUT: 28,
	  INVALID_ELEMENT_COORDINATES: 29,
	  IME_NOT_AVAILABLE: 30,
	  IME_ENGINE_ACTIVATION_FAILED: 31,
	  INVALID_SELECTOR_ERROR: 32,
	  SESSION_NOT_CREATED: 33,
	  MOVE_TARGET_OUT_OF_BOUNDS: 34,
	  SQL_DATABASE_ERROR: 35,
	  INVALID_XPATH_SELECTOR: 51,
	  INVALID_XPATH_SELECTOR_RETURN_TYPE: 52,
	  METHOD_NOT_ALLOWED: 405
	};


	const LEGACY_ERROR_CODE_TO_TYPE = new Map([
	    [ErrorCode.NO_SUCH_ELEMENT, NoSuchElementError],
	    [ErrorCode.NO_SUCH_FRAME, NoSuchFrameError],
	    [ErrorCode.UNSUPPORTED_OPERATION, UnsupportedOperationError],
	    [ErrorCode.STALE_ELEMENT_REFERENCE, StaleElementReferenceError],
	    [ErrorCode.ELEMENT_NOT_VISIBLE, ElementNotVisibleError],
	    [ErrorCode.INVALID_ELEMENT_STATE, InvalidElementStateError],
	    [ErrorCode.UNKNOWN_ERROR, WebDriverError],
	    [ErrorCode.ELEMENT_NOT_SELECTABLE, ElementNotSelectableError],
	    [ErrorCode.JAVASCRIPT_ERROR, JavascriptError],
	    [ErrorCode.XPATH_LOOKUP_ERROR, InvalidSelectorError],
	    [ErrorCode.TIMEOUT, TimeoutError],
	    [ErrorCode.NO_SUCH_WINDOW, NoSuchWindowError],
	    [ErrorCode.INVALID_COOKIE_DOMAIN, InvalidCookieDomainError],
	    [ErrorCode.UNABLE_TO_SET_COOKIE, UnableToSetCookieError],
	    [ErrorCode.UNEXPECTED_ALERT_OPEN, UnexpectedAlertOpenError],
	    [ErrorCode.NO_SUCH_ALERT, NoSuchAlertError],
	    [ErrorCode.SCRIPT_TIMEOUT, ScriptTimeoutError],
	    [ErrorCode.INVALID_ELEMENT_COORDINATES, InvalidElementCoordinatesError],
	    [ErrorCode.INVALID_SELECTOR_ERROR, InvalidSelectorError],
	    [ErrorCode.SESSION_NOT_CREATED, SessionNotCreatedError],
	    [ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS, MoveTargetOutOfBoundsError],
	    [ErrorCode.INVALID_XPATH_SELECTOR, InvalidSelectorError],
	    [ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPE, InvalidSelectorError],
	    [ErrorCode.METHOD_NOT_ALLOWED, UnsupportedOperationError]]);


	const ERROR_CODE_TO_TYPE = new Map([
	    ['unknown error', WebDriverError],
	    ['element not selectable', ElementNotSelectableError],
	    ['element not visible', ElementNotVisibleError],
	    ['invalid argument', InvalidArgumentError],
	    ['invalid cookie domain', InvalidCookieDomainError],
	    ['invalid element coordinates', InvalidElementCoordinatesError],
	    ['invalid element state', InvalidElementStateError],
	    ['invalid selector', InvalidSelectorError],
	    ['invalid session id', NoSuchSessionError],
	    ['javascript error', JavascriptError],
	    ['move target out of bounds', MoveTargetOutOfBoundsError],
	    ['no such alert', NoSuchAlertError],
	    ['no such element', NoSuchElementError],
	    ['no such frame', NoSuchFrameError],
	    ['no such window', NoSuchWindowError],
	    ['script timeout', ScriptTimeoutError],
	    ['session not created', SessionNotCreatedError],
	    ['stale element reference', StaleElementReferenceError],
	    ['timeout', TimeoutError],
	    ['unable to set cookie', UnableToSetCookieError],
	    ['unable to capture screen', UnableToCaptureScreenError],
	    ['unexpected alert open', UnexpectedAlertOpenError],
	    ['unknown command', UnknownCommandError],
	    ['unknown method', UnknownMethodError],
	    ['unsupported operation', UnsupportedOperationError]]);


	const TYPE_TO_ERROR_CODE = new Map;
	ERROR_CODE_TO_TYPE.forEach((value, key) => {
	  TYPE_TO_ERROR_CODE.set(value, key);
	});



	/**
	 * @param {*} err The error to encode.
	 * @return {{error: string, message: string}} the encoded error.
	 */
	function encodeError(err) {
	  let type = WebDriverError;
	  if (err instanceof WebDriverError
	      && TYPE_TO_ERROR_CODE.has(err.constructor)) {
	    type = err.constructor;
	  }

	  let message = err instanceof Error
	      ? err.message
	      : err + '';

	  let code = /** @type {string} */(TYPE_TO_ERROR_CODE.get(type));
	  return {'error': code, 'message': message};
	}


	/**
	 * Checks a response object from a server that adheres to the W3C WebDriver
	 * protocol.
	 * @param {*} data The response data to check.
	 * @return {*} The response data if it was not an encoded error.
	 * @throws {WebDriverError} the decoded error, if present in the data object.
	 * @deprecated Use {@link #throwDecodedError(data)} instead.
	 * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol
	 */
	function checkResponse(data) {
	  if (data && typeof data.error === 'string') {
	    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError;
	    throw new ctor(data.message);
	  }
	  return data;
	}

	/**
	 * Tests if the given value is a valid error response object according to the
	 * W3C WebDriver spec.
	 *
	 * @param {?} data The value to test.
	 * @return {boolean} Whether the given value data object is a valid error
	 *     response.
	 * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol
	 */
	function isErrorResponse(data) {
	  return data && typeof data === 'object' && typeof data.error === 'string';
	}

	/**
	 * Throws an error coded from the W3C protocol. A generic error will be thrown
	 * if the provided `data` is not a valid encoded error.
	 *
	 * @param {{error: string, message: string}} data The error data to decode.
	 * @throws {WebDriverError} the decoded error.
	 * @see https://w3c.github.io/webdriver/webdriver-spec.html#protocol
	 */
	function throwDecodedError(data) {
	  if (isErrorResponse(data)) {
	    let ctor = ERROR_CODE_TO_TYPE.get(data.error) || WebDriverError;
	    throw new ctor(data.message);
	  }
	  throw new WebDriverError('Unknown error: ' + JSON.stringify(data));
	}


	/**
	 * Checks a legacy response from the Selenium 2.0 wire protocol for an error.
	 * @param {*} responseObj the response object to check.
	 * @return {*} responseObj the original response if it does not define an error.
	 * @throws {WebDriverError} if the response object defines an error.
	 */
	function checkLegacyResponse(responseObj) {
	  // Handle the legacy Selenium error response format.
	  if (responseObj
	      && typeof responseObj === 'object'
	      && typeof responseObj['status'] === 'number'
	      && responseObj['status'] !== 0) {
	    let status = responseObj['status'];
	    let ctor = LEGACY_ERROR_CODE_TO_TYPE.get(status) || WebDriverError;

	    let value = responseObj['value'];

	    if (!value || typeof value !== 'object') {
	      throw new ctor(value + '');
	    } else {
	      let message = value['message'] + '';
	      if (ctor !== UnexpectedAlertOpenError) {
	        throw new ctor(message);
	      }

	      let text = '';
	      if (value['alert'] && typeof value['alert']['text'] === 'string') {
	        text = value['alert']['text'];
	      }
	      throw new UnexpectedAlertOpenError(message, text);
	    }
	  }
	  return responseObj;
	}


	// PUBLIC API


	module.exports = {
	  ErrorCode: ErrorCode,

	  WebDriverError: WebDriverError,
	  ElementNotSelectableError: ElementNotSelectableError,
	  ElementNotVisibleError: ElementNotVisibleError,
	  InvalidArgumentError: InvalidArgumentError,
	  InvalidCookieDomainError: InvalidCookieDomainError,
	  InvalidElementCoordinatesError: InvalidElementCoordinatesError,
	  InvalidElementStateError: InvalidElementStateError,
	  InvalidSelectorError: InvalidSelectorError,
	  JavascriptError: JavascriptError,
	  MoveTargetOutOfBoundsError: MoveTargetOutOfBoundsError,
	  NoSuchAlertError: NoSuchAlertError,
	  NoSuchElementError: NoSuchElementError,
	  NoSuchFrameError: NoSuchFrameError,
	  NoSuchSessionError: NoSuchSessionError,
	  NoSuchWindowError: NoSuchWindowError,
	  ScriptTimeoutError: ScriptTimeoutError,
	  SessionNotCreatedError: SessionNotCreatedError,
	  StaleElementReferenceError: StaleElementReferenceError,
	  TimeoutError: TimeoutError,
	  UnableToSetCookieError: UnableToSetCookieError,
	  UnableToCaptureScreenError: UnableToCaptureScreenError,
	  UnexpectedAlertOpenError: UnexpectedAlertOpenError,
	  UnknownCommandError: UnknownCommandError,
	  UnknownMethodError: UnknownMethodError,
	  UnsupportedOperationError: UnsupportedOperationError,

	  checkResponse: checkResponse,
	  checkLegacyResponse: checkLegacyResponse,
	  encodeError: encodeError,
	  isErrorResponse: isErrorResponse,
	  throwDecodedError: throwDecodedError,
	};


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * Describes an event listener registered on an {@linkplain EventEmitter}.
	 */
	class Listener {
	  /**
	   * @param {!Function} fn The actual listener function.
	   * @param {(Object|undefined)} scope The object in whose scope to invoke the
	   *     listener.
	   * @param {boolean} oneshot Whether this listener should only be used once.
	   */
	  constructor(fn, scope, oneshot) {
	    this.fn = fn;
	    this.scope = scope;
	    this.oneshot = oneshot;
	  }
	}


	/** @type {!WeakMap<!EventEmitter, !Map<string, !Set<!Listener>>>} */
	const EVENTS = new WeakMap;


	/**
	 * Object that can emit events for others to listen for.
	 */
	class EventEmitter {
	  /**
	   * Fires an event and calls all listeners.
	   * @param {string} type The type of event to emit.
	   * @param {...*} var_args Any arguments to pass to each listener.
	   */
	  emit(type, var_args) {
	    let events = EVENTS.get(this);
	    if (!events) {
	      return;
	    }

	    let args = Array.prototype.slice.call(arguments, 1);

	    let listeners = events.get(type);
	    if (listeners) {
	      for (let listener of listeners) {
	        listener.fn.apply(listener.scope, args);
	        if (listener.oneshot) {
	          listeners.delete(listener);
	        }
	      }
	    }
	  }

	  /**
	   * Returns a mutable list of listeners for a specific type of event.
	   * @param {string} type The type of event to retrieve the listeners for.
	   * @return {!Set<!Listener>} The registered listeners for the given event
	   *     type.
	   */
	  listeners(type) {
	    let events = EVENTS.get(this);
	    if (!events) {
	      events = new Map;
	      EVENTS.set(this, events);
	    }

	    let listeners = events.get(type);
	    if (!listeners) {
	      listeners = new Set;
	      events.set(type, listeners);
	    }
	    return listeners;
	  }

	  /**
	   * Registers a listener.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @param {boolean=} opt_oneshot Whether the listener should b (e removed after
	   *    the first event is fired.
	   * @return {!EventEmitter} A self reference.
	   * @private
	   */
	  addListener_(type, fn, opt_self, opt_oneshot) {
	    let listeners = this.listeners(type);
	    for (let listener of listeners) {
	      if (listener.fn === fn) {
	        return this;
	      }
	    }
	    listeners.add(new Listener(fn, opt_self || undefined, !!opt_oneshot));
	    return this;
	  }

	  /**
	   * Registers a listener.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @return {!EventEmitter} A self reference.
	   */
	  addListener(type, fn, opt_self) {
	    return this.addListener_(type, fn, opt_self, false);
	  }

	  /**
	   * Registers a one-time listener which will be called only the first time an
	   * event is emitted, after which it will be removed.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @return {!EventEmitter} A self reference.
	   */
	  once(type, fn, opt_self) {
	    return this.addListener_(type, fn, opt_self, true);
	  }

	  /**
	   * An alias for {@link #addListener() addListener()}.
	   * @param {string} type The type of event to listen for.
	   * @param {!Function} fn The function to invoke when the event is fired.
	   * @param {Object=} opt_self The object in whose scope to invoke the listener.
	   * @return {!EventEmitter} A self reference.
	   */
	  on(type, fn, opt_self) {
	    return this.addListener(type, fn, opt_self);
	  }

	  /**
	   * Removes a previously registered event listener.
	   * @param {string} type The type of event to unregister.
	   * @param {!Function} listenerFn The handler function to remove.
	   * @return {!EventEmitter} A self reference.
	   */
	  removeListener(type, listenerFn) {
	    if (typeof type !== 'string' || typeof listenerFn !== 'function') {
	      throw TypeError('invalid args: expected (string, function), got ('
	          + (typeof type) + ', ' + (typeof listenerFn) + ')');
	    }

	    let events = EVENTS.get(this);
	    if (!events) {
	      return this;
	    }

	    let listeners = events.get(type);
	    if (!listeners) {
	      return this;
	    }

	    let match;
	    for (let listener of listeners) {
	      if (listener.fn === listenerFn) {
	        match = listener;
	        break;
	      }
	    }
	    if (match) {
	      listeners.delete(match);
	      if (!listeners.size) {
	        events.delete(type);
	      }
	    }
	    return this;
	  }

	  /**
	   * Removes all listeners for a specific type of event. If no event is
	   * specified, all listeners across all types will be removed.
	   * @param {string=} opt_type The type of event to remove listeners from.
	   * @return {!EventEmitter} A self reference.
	   */
	  removeAllListeners(opt_type) {
	    let events = EVENTS.get(this);
	    if (events) {
	      if (typeof opt_type === 'string') {
	        events.delete(opt_type);
	      } else {
	        EVENTS.delete(this);
	      }
	    }
	    return this;
	  }
	}


	// PUBLIC API


	module.exports = {
	  EventEmitter: EventEmitter,
	  Listener: Listener
	};


/***/ }),
/* 40 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines WebDriver's logging system. The logging system is
	 * broken into major components: local and remote logging.
	 *
	 * The local logging API, which is anchored by the {@linkplain Logger} class is
	 * similar to Java's logging API. Loggers, retrieved by
	 * {@linkplain #getLogger getLogger(name)}, use hierarchical, dot-delimited
	 * namespaces (e.g. "" > "webdriver" > "webdriver.logging"). Recorded log
	 * messages are represented by the {@linkplain Entry} class. You can capture log
	 * records by {@linkplain Logger#addHandler attaching} a handler function to the
	 * desired logger. For convenience, you can quickly enable logging to the
	 * console by simply calling {@linkplain #installConsoleHandler
	 * installConsoleHandler}.
	 *
	 * The [remote logging API](https://github.com/SeleniumHQ/selenium/wiki/Logging)
	 * allows you to retrieve logs from a remote WebDriver server. This API uses the
	 * {@link Preferences} class to define desired log levels prior to creating
	 * a WebDriver session:
	 *
	 *     var prefs = new logging.Preferences();
	 *     prefs.setLevel(logging.Type.BROWSER, logging.Level.DEBUG);
	 *
	 *     var caps = Capabilities.chrome();
	 *     caps.setLoggingPrefs(prefs);
	 *     // ...
	 *
	 * Remote log entries, also represented by the {@link Entry} class, may be
	 * retrieved via {@link webdriver.WebDriver.Logs}:
	 *
	 *     driver.manage().logs().get(logging.Type.BROWSER)
	 *         .then(function(entries) {
	 *            entries.forEach(function(entry) {
	 *              console.log('[%s] %s', entry.level.name, entry.message);
	 *            });
	 *         });
	 *
	 * **NOTE:** Only a few browsers support the remote logging API (notably
	 * Firefox and Chrome). Firefox supports basic logging functionality, while
	 * Chrome exposes robust
	 * [performance logging](https://sites.google.com/a/chromium.org/chromedriver/logging)
	 * options. Remote logging is still considered a non-standard feature, and the
	 * APIs exposed by this module for it are non-frozen. This module will be
	 * updated, possibly breaking backwards-compatibility, once logging is
	 * officially defined by the
	 * [W3C WebDriver spec](http://www.w3.org/TR/webdriver/).
	 */

	/**
	 * Defines a message level that may be used to control logging output.
	 *
	 * @final
	 */
	class Level {
	  /**
	   * @param {string} name the level's name.
	   * @param {number} level the level's numeric value.
	   */
	  constructor(name, level) {
	    if (level < 0) {
	      throw new TypeError('Level must be >= 0');
	    }

	    /** @private {string} */
	    this.name_ = name;

	    /** @private {number} */
	    this.value_ = level;
	  }

	  /** This logger's name. */
	  get name() {
	    return this.name_;
	  }

	  /** The numeric log level. */
	  get value() {
	    return this.value_;
	  }

	  /** @override */
	  toString() {
	    return this.name;
	  }
	}

	/**
	 * Indicates no log messages should be recorded.
	 * @const
	 */
	Level.OFF = new Level('OFF', Infinity);


	/**
	 * Log messages with a level of `1000` or higher.
	 * @const
	 */
	Level.SEVERE = new Level('SEVERE', 1000);


	/**
	 * Log messages with a level of `900` or higher.
	 * @const
	 */
	Level.WARNING = new Level('WARNING', 900);


	/**
	 * Log messages with a level of `800` or higher.
	 * @const
	 */
	Level.INFO = new Level('INFO', 800);


	/**
	 * Log messages with a level of `700` or higher.
	 * @const
	 */
	Level.DEBUG = new Level('DEBUG', 700);


	/**
	 * Log messages with a level of `500` or higher.
	 * @const
	 */
	Level.FINE = new Level('FINE', 500);


	/**
	 * Log messages with a level of `400` or higher.
	 * @const
	 */
	Level.FINER = new Level('FINER', 400);


	/**
	 * Log messages with a level of `300` or higher.
	 * @const
	 */
	Level.FINEST = new Level('FINEST', 300);


	/**
	 * Indicates all log messages should be recorded.
	 * @const
	 */
	Level.ALL = new Level('ALL', 0);


	const ALL_LEVELS = /** !Set<Level> */new Set([
	  Level.OFF,
	  Level.SEVERE,
	  Level.WARNING,
	  Level.INFO,
	  Level.DEBUG,
	  Level.FINE,
	  Level.FINER,
	  Level.FINEST,
	  Level.ALL
	]);


	const LEVELS_BY_NAME = /** !Map<string, !Level> */ new Map([
	  [Level.OFF.name, Level.OFF],
	  [Level.SEVERE.name, Level.SEVERE],
	  [Level.WARNING.name, Level.WARNING],
	  [Level.INFO.name, Level.INFO],
	  [Level.DEBUG.name, Level.DEBUG],
	  [Level.FINE.name, Level.FINE],
	  [Level.FINER.name, Level.FINER],
	  [Level.FINEST.name, Level.FINEST],
	  [Level.ALL.name, Level.ALL]
	]);


	/**
	 * Converts a level name or value to a {@link Level} value. If the name/value
	 * is not recognized, {@link Level.ALL} will be returned.
	 *
	 * @param {(number|string)} nameOrValue The log level name, or value, to
	 *     convert.
	 * @return {!Level} The converted level.
	 */
	function getLevel(nameOrValue) {
	  if (typeof nameOrValue === 'string') {
	    return LEVELS_BY_NAME.get(nameOrValue) || Level.ALL;
	  }
	  if (typeof nameOrValue !== 'number') {
	    throw new TypeError('not a string or number');
	  }
	  for (let level of ALL_LEVELS) {
	    if (nameOrValue >= level.value) {
	      return level;
	    }
	  }
	  return Level.ALL;
	}


	/**
	 * Describes a single log entry.
	 *
	 * @final
	 */
	class Entry {
	  /**
	   * @param {(!Level|string|number)} level The entry level.
	   * @param {string} message The log message.
	   * @param {number=} opt_timestamp The time this entry was generated, in
	   *     milliseconds since 0:00:00, January 1, 1970 UTC. If omitted, the
	   *     current time will be used.
	   * @param {string=} opt_type The log type, if known.
	   */
	  constructor(level, message, opt_timestamp, opt_type) {
	    this.level = level instanceof Level ? level : getLevel(level);
	    this.message = message;
	    this.timestamp =
	        typeof opt_timestamp === 'number' ? opt_timestamp : Date.now();
	    this.type = opt_type || '';
	  }

	  /**
	   * @return {{level: string, message: string, timestamp: number,
	   *           type: string}} The JSON representation of this entry.
	   */
	  toJSON() {
	    return {
	      'level': this.level.name,
	      'message': this.message,
	      'timestamp': this.timestamp,
	      'type': this.type
	    };
	  }
	}


	/** @typedef {(string|function(): string)} */
	let Loggable;


	/**
	 * An object used to log debugging messages. Loggers use a hierarchical,
	 * dot-separated naming scheme. For instance, "foo" is considered the parent of
	 * the "foo.bar" and an ancestor of "foo.bar.baz".
	 *
	 * Each logger may be assigned a {@linkplain #setLevel log level}, which
	 * controls which level of messages will be reported to the
	 * {@linkplain #addHandler handlers} attached to this instance. If a log level
	 * is not explicitly set on a logger, it will inherit its parent.
	 *
	 * This class should never be directly instantiated. Instead, users should
	 * obtain logger references using the {@linkplain ./logging.getLogger()
	 * getLogger()} function.
	 *
	 * @final
	 */
	class Logger {
	  /**
	   * @param {string} name the name of this logger.
	   * @param {Level=} opt_level the initial level for this logger.
	   */
	  constructor(name, opt_level) {
	    /** @private {string} */
	    this.name_ = name;

	    /** @private {Level} */
	    this.level_ = opt_level || null;

	    /** @private {Logger} */
	    this.parent_ = null;

	    /** @private {Set<function(!Entry)>} */
	    this.handlers_ = null;
	  }

	  /** @return {string} the name of this logger. */
	  getName() {
	    return this.name_;
	  }

	  /**
	   * @param {Level} level the new level for this logger, or `null` if the logger
	   *     should inherit its level from its parent logger.
	   */
	  setLevel(level) {
	    this.level_ = level;
	  }

	  /** @return {Level} the log level for this logger. */
	  getLevel() {
	    return this.level_;
	  }

	  /**
	   * @return {!Level} the effective level for this logger.
	   */
	  getEffectiveLevel() {
	    let logger = this;
	    let level;
	    do {
	      level = logger.level_;
	      logger = logger.parent_;
	    } while (logger && !level);
	    return level || Level.OFF;
	  }

	  /**
	   * @param {!Level} level the level to check.
	   * @return {boolean} whether messages recorded at the given level are loggable
	   *     by this instance.
	   */
	  isLoggable(level) {
	    return level.value !== Level.OFF.value
	        && level.value >= this.getEffectiveLevel().value;
	  }

	  /**
	   * Adds a handler to this logger. The handler will be invoked for each message
	   * logged with this instance, or any of its descendants.
	   *
	   * @param {function(!Entry)} handler the handler to add.
	   */
	  addHandler(handler) {
	    if (!this.handlers_) {
	      this.handlers_ = new Set;
	    }
	    this.handlers_.add(handler);
	  }

	  /**
	   * Removes a handler from this logger.
	   *
	   * @param {function(!Entry)} handler the handler to remove.
	   * @return {boolean} whether a handler was successfully removed.
	   */
	  removeHandler(handler) {
	    if (!this.handlers_) {
	      return false;
	    }
	    return this.handlers_.delete(handler);
	  }

	  /**
	   * Logs a message at the given level. The message may be defined as a string
	   * or as a function that will return the message. If a function is provided,
	   * it will only be invoked if this logger's
	   * {@linkplain #getEffectiveLevel() effective log level} includes the given
	   * `level`.
	   *
	   * @param {!Level} level the level at which to log the message.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  log(level, loggable) {
	    if (!this.isLoggable(level)) {
	      return;
	    }
	    let message = '[' + this.name_ + '] '
	        + (typeof loggable === 'function' ? loggable() : loggable);
	    let entry = new Entry(level, message, Date.now());
	    for (let logger = this; !!logger; logger = logger.parent_) {
	      if (logger.handlers_) {
	        for (let handler of logger.handlers_) {
	          handler(entry);
	        }
	      }
	    }
	  }

	  /**
	   * Logs a message at the {@link Level.SEVERE} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  severe(loggable) {
	    this.log(Level.SEVERE, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.WARNING} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  warning(loggable) {
	    this.log(Level.WARNING, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.INFO} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  info(loggable) {
	    this.log(Level.INFO, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.DEBUG} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  debug(loggable) {
	    this.log(Level.DEBUG, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.FINE} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  fine(loggable) {
	    this.log(Level.FINE, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.FINER} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  finer(loggable) {
	    this.log(Level.FINER, loggable);
	  }

	  /**
	   * Logs a message at the {@link Level.FINEST} log level.
	   * @param {(string|function(): string)} loggable the message to log, or a
	   *     function that will return the message.
	   */
	  finest(loggable) {
	    this.log(Level.FINEST, loggable);
	  }
	}


	/**
	 * Maintains a collection of loggers.
	 *
	 * @final
	 */
	class LogManager {
	  constructor() {
	    /** @private {!Map<string, !Logger>} */
	    this.loggers_ = new Map;
	    this.root_ = new Logger('', Level.OFF);
	  }

	  /**
	   * Retrieves a named logger, creating it in the process. This function will
	   * implicitly create the requested logger, and any of its parents, if they
	   * do not yet exist.
	   *
	   * @param {string} name the logger's name.
	   * @return {!Logger} the requested logger.
	   */
	  getLogger(name) {
	    if (!name) {
	      return this.root_;
	    }
	    let parent = this.root_;
	    for (let i = name.indexOf('.'); i != -1; i = name.indexOf('.', i + 1)) {
	      let parentName = name.substr(0, i);
	      parent = this.createLogger_(parentName, parent);
	    }
	    return this.createLogger_(name, parent);
	  }

	  /**
	   * Creates a new logger.
	   *
	   * @param {string} name the logger's name.
	   * @param {!Logger} parent the logger's parent.
	   * @return {!Logger} the new logger.
	   * @private
	   */
	  createLogger_(name, parent) {
	    if (this.loggers_.has(name)) {
	      return /** @type {!Logger} */(this.loggers_.get(name));
	    }
	    let logger = new Logger(name, null);
	    logger.parent_ = parent;
	    this.loggers_.set(name, logger);
	    return logger;
	  }
	}


	const logManager = new LogManager;


	/**
	 * Retrieves a named logger, creating it in the process. This function will
	 * implicitly create the requested logger, and any of its parents, if they
	 * do not yet exist.
	 *
	 * The log level will be unspecified for newly created loggers. Use
	 * {@link Logger#setLevel(level)} to explicitly set a level.
	 *
	 * @param {string} name the logger's name.
	 * @return {!Logger} the requested logger.
	 */
	function getLogger(name) {
	  return logManager.getLogger(name);
	}


	/**
	 * Pads a number to ensure it has a minimum of two digits.
	 * 
	 * @param {number} n the number to be padded.
	 * @return {string} the padded number.
	 */
	function pad(n) {
	  if (n >= 10) {
	    return '' + n;
	  } else {
	    return '0' + n;
	  }
	}


	/**
	 * Logs all messages to the Console API.
	 * @param {!Entry} entry the entry to log.
	 */
	function consoleHandler(entry) {
	  if (typeof console === 'undefined' || !console) {
	    return;
	  }

	  var timestamp = new Date(entry.timestamp);
	  var msg =
	      '[' + timestamp.getUTCFullYear() + '-' +
	      pad(timestamp.getUTCMonth() + 1) + '-' +
	      pad(timestamp.getUTCDate()) + 'T' +
	      pad(timestamp.getUTCHours()) + ':' +
	      pad(timestamp.getUTCMinutes()) + ':' +
	      pad(timestamp.getUTCSeconds()) + 'Z] ' +
	      '[' + entry.level.name + '] ' +
	      entry.message;

	  var level = entry.level.value;
	  if (level >= Level.SEVERE.value) {
	    console.error(msg);
	  } else if (level >= Level.WARNING.value) {
	    console.warn(msg);
	  } else {
	    console.log(msg);
	  }
	}


	/**
	 * Adds the console handler to the given logger. The console handler will log
	 * all messages using the JavaScript Console API.
	 *
	 * @param {Logger=} opt_logger The logger to add the handler to; defaults
	 *     to the root logger.
	 */
	function addConsoleHandler(opt_logger) {
	  let logger = opt_logger || logManager.root_;
	  logger.addHandler(consoleHandler);
	}


	/**
	 * Removes the console log handler from the given logger.
	 *
	 * @param {Logger=} opt_logger The logger to remove the handler from; defaults
	 *     to the root logger.
	 * @see exports.addConsoleHandler
	 */
	function removeConsoleHandler(opt_logger) {
	  let logger = opt_logger || logManager.root_;
	  logger.removeHandler(consoleHandler);
	}


	/**
	 * Installs the console log handler on the root logger.
	 */
	function installConsoleHandler() {
	  addConsoleHandler(logManager.root_);
	}


	/**
	 * Common log types.
	 * @enum {string}
	 */
	const Type = {
	  /** Logs originating from the browser. */
	  BROWSER: 'browser',
	  /** Logs from a WebDriver client. */
	  CLIENT: 'client',
	  /** Logs from a WebDriver implementation. */
	  DRIVER: 'driver',
	  /** Logs related to performance. */
	  PERFORMANCE: 'performance',
	  /** Logs from the remote server. */
	  SERVER: 'server'
	};


	/**
	 * Describes the log preferences for a WebDriver session.
	 *
	 * @final
	 */
	class Preferences {
	  constructor() {
	    /** @private {!Map<string, !Level>} */
	    this.prefs_ = new Map;
	  }

	  /**
	   * Sets the desired logging level for a particular log type.
	   * @param {(string|Type)} type The log type.
	   * @param {(!Level|string|number)} level The desired log level.
	   * @throws {TypeError} if `type` is not a `string`.
	   */
	  setLevel(type, level) {
	    if (typeof type !== 'string') {
	      throw TypeError('specified log type is not a string: ' + typeof type);
	    }
	    this.prefs_.set(type, level instanceof Level ? level : getLevel(level));
	  }

	  /**
	   * Converts this instance to its JSON representation.
	   * @return {!Object<string, string>} The JSON representation of this set of
	   *     preferences.
	   */
	  toJSON() {
	    let json = {};
	    for (let key of this.prefs_.keys()) {
	      json[key] = this.prefs_.get(key).name;
	    }
	    return json;
	  }
	}


	// PUBLIC API


	module.exports = {
	  Entry: Entry,
	  Level: Level,
	  LogManager: LogManager,
	  Logger: Logger,
	  Preferences: Preferences,
	  Type: Type,
	  addConsoleHandler: addConsoleHandler,
	  getLevel: getLevel,
	  getLogger: getLogger,
	  installConsoleHandler: installConsoleHandler,
	  removeConsoleHandler: removeConsoleHandler
	};


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Alias for require('http') that uses real http or fake-http modules and dispatches events.
	 */

	const Channel = __webpack_require__(30);
	const httpBrowserify = __webpack_require__(42);
	const httpsBrowserify = __webpack_require__(81);
	const fakeHttp = __webpack_require__(82);

	const LOOPBACK_HOST = 'autotester';

	// intercept for event dispatching
	const realHttpWrapped = intercept(httpBrowserify);
	const realHttpsWrapped = intercept(httpsBrowserify);
	const fakeHttpWrapped = intercept(fakeHttp);

	exports.request = function (opts) {
	  const http = opts.hostname === LOOPBACK_HOST
	    ? fakeHttpWrapped
	    : (opts.protocol === 'https:' ? realHttpsWrapped : realHttpWrapped);
	  return http.request.apply(http, arguments);
	};

	exports.onRequest = new Channel();
	exports.onRequestData = new Channel();
	exports.onResponse = new Channel();

	function intercept(http) {
	  const origRequest = http.request;
	  http.request = function (options) {
	    const request = origRequest.apply(http, arguments);
	    exports.onRequest.dispatchAsync({request, options});
	    request.on('response', response => {
	      const chunks = [];
	      response.on('data', chunk => chunks.push(chunk));
	      response.on('end', () => {
	        exports.onResponse.dispatchAsync({request, options, response, data: chunks.join('')});
	      });
	    });

	    const origWrite = request.write;
	    request.write = function (data) {
	      exports.onRequestData.dispatchAsync({request, data});
	      return origWrite.apply(request, arguments);
	    };

	    return request;
	  };
	  return http;
	}


/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

	var http = module.exports;
	var EventEmitter = __webpack_require__(43).EventEmitter;
	var Request = __webpack_require__(44);
	var url = __webpack_require__(75)

	http.request = function (params, cb) {
	    if (typeof params === 'string') {
	        params = url.parse(params)
	    }
	    if (!params) params = {};
	    if (!params.host && !params.port) {
	        params.port = parseInt(window.location.port, 10);
	    }
	    if (!params.host && params.hostname) {
	        params.host = params.hostname;
	    }

	    if (!params.protocol) {
	        if (params.scheme) {
	            params.protocol = params.scheme + ':';
	        } else {
	            params.protocol = window.location.protocol;
	        }
	    }

	    if (!params.host) {
	        params.host = window.location.hostname || window.location.host;
	    }
	    if (/:/.test(params.host)) {
	        if (!params.port) {
	            params.port = params.host.split(':')[1];
	        }
	        params.host = params.host.split(':')[0];
	    }
	    if (!params.port) params.port = params.protocol == 'https:' ? 443 : 80;
	    
	    var req = new Request(new xhrHttp, params);
	    if (cb) req.on('response', cb);
	    return req;
	};

	http.get = function (params, cb) {
	    params.method = 'GET';
	    var req = http.request(params, cb);
	    req.end();
	    return req;
	};

	http.Agent = function () {};
	http.Agent.defaultMaxSockets = 4;

	var xhrHttp = (function () {
	    if (typeof window === 'undefined') {
	        throw new Error('no window object present');
	    }
	    else if (window.XMLHttpRequest) {
	        return window.XMLHttpRequest;
	    }
	    else if (window.ActiveXObject) {
	        var axs = [
	            'Msxml2.XMLHTTP.6.0',
	            'Msxml2.XMLHTTP.3.0',
	            'Microsoft.XMLHTTP'
	        ];
	        for (var i = 0; i < axs.length; i++) {
	            try {
	                var ax = new(window.ActiveXObject)(axs[i]);
	                return function () {
	                    if (ax) {
	                        var ax_ = ax;
	                        ax = null;
	                        return ax_;
	                    }
	                    else {
	                        return new(window.ActiveXObject)(axs[i]);
	                    }
	                };
	            }
	            catch (e) {}
	        }
	        throw new Error('ajax not supported in this browser')
	    }
	    else {
	        throw new Error('ajax not supported in this browser');
	    }
	})();

	http.STATUS_CODES = {
	    100 : 'Continue',
	    101 : 'Switching Protocols',
	    102 : 'Processing',                 // RFC 2518, obsoleted by RFC 4918
	    200 : 'OK',
	    201 : 'Created',
	    202 : 'Accepted',
	    203 : 'Non-Authoritative Information',
	    204 : 'No Content',
	    205 : 'Reset Content',
	    206 : 'Partial Content',
	    207 : 'Multi-Status',               // RFC 4918
	    300 : 'Multiple Choices',
	    301 : 'Moved Permanently',
	    302 : 'Moved Temporarily',
	    303 : 'See Other',
	    304 : 'Not Modified',
	    305 : 'Use Proxy',
	    307 : 'Temporary Redirect',
	    400 : 'Bad Request',
	    401 : 'Unauthorized',
	    402 : 'Payment Required',
	    403 : 'Forbidden',
	    404 : 'Not Found',
	    405 : 'Method Not Allowed',
	    406 : 'Not Acceptable',
	    407 : 'Proxy Authentication Required',
	    408 : 'Request Time-out',
	    409 : 'Conflict',
	    410 : 'Gone',
	    411 : 'Length Required',
	    412 : 'Precondition Failed',
	    413 : 'Request Entity Too Large',
	    414 : 'Request-URI Too Large',
	    415 : 'Unsupported Media Type',
	    416 : 'Requested Range Not Satisfiable',
	    417 : 'Expectation Failed',
	    418 : 'I\'m a teapot',              // RFC 2324
	    422 : 'Unprocessable Entity',       // RFC 4918
	    423 : 'Locked',                     // RFC 4918
	    424 : 'Failed Dependency',          // RFC 4918
	    425 : 'Unordered Collection',       // RFC 4918
	    426 : 'Upgrade Required',           // RFC 2817
	    428 : 'Precondition Required',      // RFC 6585
	    429 : 'Too Many Requests',          // RFC 6585
	    431 : 'Request Header Fields Too Large',// RFC 6585
	    500 : 'Internal Server Error',
	    501 : 'Not Implemented',
	    502 : 'Bad Gateway',
	    503 : 'Service Unavailable',
	    504 : 'Gateway Time-out',
	    505 : 'HTTP Version Not Supported',
	    506 : 'Variant Also Negotiates',    // RFC 2295
	    507 : 'Insufficient Storage',       // RFC 4918
	    509 : 'Bandwidth Limit Exceeded',
	    510 : 'Not Extended',               // RFC 2774
	    511 : 'Network Authentication Required' // RFC 6585
	};

/***/ }),
/* 43 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;

	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;

	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;

	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;

	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};

	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;

	  if (!this._events)
	    this._events = {};

	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }

	  handler = this._events[type];

	  if (isUndefined(handler))
	    return false;

	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }

	  return true;
	};

	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events)
	    this._events = {};

	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);

	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];

	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }

	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }

	  return this;
	};

	EventEmitter.prototype.on = EventEmitter.prototype.addListener;

	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  var fired = false;

	  function g() {
	    this.removeListener(type, g);

	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }

	  g.listener = listener;
	  this.on(type, g);

	  return this;
	};

	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;

	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');

	  if (!this._events || !this._events[type])
	    return this;

	  list = this._events[type];
	  length = list.length;
	  position = -1;

	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);

	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }

	    if (position < 0)
	      return this;

	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }

	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }

	  return this;
	};

	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;

	  if (!this._events)
	    return this;

	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }

	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }

	  listeners = this._events[type];

	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];

	  return this;
	};

	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};

	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];

	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};

	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};

	function isFunction(arg) {
	  return typeof arg === 'function';
	}

	function isNumber(arg) {
	  return typeof arg === 'number';
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(45);
	var Response = __webpack_require__(70);
	var Base64 = __webpack_require__(74);
	var inherits = __webpack_require__(46);

	var Request = module.exports = function (xhr, params) {
	    var self = this;
	    self.writable = true;
	    self.xhr = xhr;
	    self.body = [];
	    
	    self.uri = (params.protocol || 'http:') + '//'
	        + params.host
	        + (params.port ? ':' + params.port : '')
	        + (params.path || '/')
	    ;
	    
	    if (typeof params.withCredentials === 'undefined') {
	        params.withCredentials = true;
	    }

	    try { xhr.withCredentials = params.withCredentials }
	    catch (e) {}
	    
	    if (params.responseType) try { xhr.responseType = params.responseType }
	    catch (e) {}
	    
	    xhr.open(
	        params.method || 'GET',
	        self.uri,
	        true
	    );

	    xhr.onerror = function(event) {
	        self.emit('error', new Error('Network error'));
	    };

	    self._headers = {};
	    
	    if (params.headers) {
	        var keys = objectKeys(params.headers);
	        for (var i = 0; i < keys.length; i++) {
	            var key = keys[i];
	            if (!self.isSafeRequestHeader(key)) continue;
	            var value = params.headers[key];
	            self.setHeader(key, value);
	        }
	    }
	    
	    if (params.auth) {
	        //basic auth
	        this.setHeader('Authorization', 'Basic ' + Base64.btoa(params.auth));
	    }

	    var res = new Response;
	    res.on('close', function () {
	        self.emit('close');
	    });
	    
	    res.on('ready', function () {
	        self.emit('response', res);
	    });

	    res.on('error', function (err) {
	        self.emit('error', err);
	    });
	    
	    xhr.onreadystatechange = function () {
	        // Fix for IE9 bug
	        // SCRIPT575: Could not complete the operation due to error c00c023f
	        // It happens when a request is aborted, calling the success callback anyway with readyState === 4
	        if (xhr.__aborted) return;
	        res.handle(xhr);
	    };
	};

	inherits(Request, Stream);

	Request.prototype.setHeader = function (key, value) {
	    this._headers[key.toLowerCase()] = value
	};

	Request.prototype.getHeader = function (key) {
	    return this._headers[key.toLowerCase()]
	};

	Request.prototype.removeHeader = function (key) {
	    delete this._headers[key.toLowerCase()]
	};

	Request.prototype.write = function (s) {
	    this.body.push(s);
	};

	Request.prototype.destroy = function (s) {
	    this.xhr.__aborted = true;
	    this.xhr.abort();
	    this.emit('close');
	};

	Request.prototype.end = function (s) {
	    if (s !== undefined) this.body.push(s);

	    var keys = objectKeys(this._headers);
	    for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var value = this._headers[key];
	        if (isArray(value)) {
	            for (var j = 0; j < value.length; j++) {
	                this.xhr.setRequestHeader(key, value[j]);
	            }
	        }
	        else this.xhr.setRequestHeader(key, value)
	    }

	    if (this.body.length === 0) {
	        this.xhr.send('');
	    }
	    else if (typeof this.body[0] === 'string') {
	        this.xhr.send(this.body.join(''));
	    }
	    else if (isArray(this.body[0])) {
	        var body = [];
	        for (var i = 0; i < this.body.length; i++) {
	            body.push.apply(body, this.body[i]);
	        }
	        this.xhr.send(body);
	    }
	    else if (/Array/.test(Object.prototype.toString.call(this.body[0]))) {
	        var len = 0;
	        for (var i = 0; i < this.body.length; i++) {
	            len += this.body[i].length;
	        }
	        var body = new(this.body[0].constructor)(len);
	        var k = 0;
	        
	        for (var i = 0; i < this.body.length; i++) {
	            var b = this.body[i];
	            for (var j = 0; j < b.length; j++) {
	                body[k++] = b[j];
	            }
	        }
	        this.xhr.send(body);
	    }
	    else if (isXHR2Compatible(this.body[0])) {
	        this.xhr.send(this.body[0]);
	    }
	    else {
	        var body = '';
	        for (var i = 0; i < this.body.length; i++) {
	            body += this.body[i].toString();
	        }
	        this.xhr.send(body);
	    }
	};

	// Taken from http://dxr.mozilla.org/mozilla/mozilla-central/content/base/src/nsXMLHttpRequest.cpp.html
	Request.unsafeHeaders = [
	    "accept-charset",
	    "accept-encoding",
	    "access-control-request-headers",
	    "access-control-request-method",
	    "connection",
	    "content-length",
	    "cookie",
	    "cookie2",
	    "content-transfer-encoding",
	    "date",
	    "expect",
	    "host",
	    "keep-alive",
	    "origin",
	    "referer",
	    "te",
	    "trailer",
	    "transfer-encoding",
	    "upgrade",
	    "user-agent",
	    "via"
	];

	Request.prototype.isSafeRequestHeader = function (headerName) {
	    if (!headerName) return false;
	    return indexOf(Request.unsafeHeaders, headerName.toLowerCase()) === -1;
	};

	var objectKeys = Object.keys || function (obj) {
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    return keys;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};

	var indexOf = function (xs, x) {
	    if (xs.indexOf) return xs.indexOf(x);
	    for (var i = 0; i < xs.length; i++) {
	        if (xs[i] === x) return i;
	    }
	    return -1;
	};

	var isXHR2Compatible = function (obj) {
	    if (typeof Blob !== 'undefined' && obj instanceof Blob) return true;
	    if (typeof ArrayBuffer !== 'undefined' && obj instanceof ArrayBuffer) return true;
	    if (typeof FormData !== 'undefined' && obj instanceof FormData) return true;
	};


/***/ }),
/* 45 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	module.exports = Stream;

	var EE = __webpack_require__(43).EventEmitter;
	var inherits = __webpack_require__(46);

	inherits(Stream, EE);
	Stream.Readable = __webpack_require__(47);
	Stream.Writable = __webpack_require__(66);
	Stream.Duplex = __webpack_require__(67);
	Stream.Transform = __webpack_require__(68);
	Stream.PassThrough = __webpack_require__(69);

	// Backwards-compat with node 0.4.x
	Stream.Stream = Stream;



	// old-style streams.  Note that the pipe method (the only relevant
	// part of this class) is overridden in the Readable class.

	function Stream() {
	  EE.call(this);
	}

	Stream.prototype.pipe = function(dest, options) {
	  var source = this;

	  function ondata(chunk) {
	    if (dest.writable) {
	      if (false === dest.write(chunk) && source.pause) {
	        source.pause();
	      }
	    }
	  }

	  source.on('data', ondata);

	  function ondrain() {
	    if (source.readable && source.resume) {
	      source.resume();
	    }
	  }

	  dest.on('drain', ondrain);

	  // If the 'end' option is not supplied, dest.end() will be called when
	  // source gets the 'end' or 'close' events.  Only dest.end() once.
	  if (!dest._isStdio && (!options || options.end !== false)) {
	    source.on('end', onend);
	    source.on('close', onclose);
	  }

	  var didOnEnd = false;
	  function onend() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    dest.end();
	  }


	  function onclose() {
	    if (didOnEnd) return;
	    didOnEnd = true;

	    if (typeof dest.destroy === 'function') dest.destroy();
	  }

	  // don't leave dangling pipes when there are errors.
	  function onerror(er) {
	    cleanup();
	    if (EE.listenerCount(this, 'error') === 0) {
	      throw er; // Unhandled stream error in pipe.
	    }
	  }

	  source.on('error', onerror);
	  dest.on('error', onerror);

	  // remove all the event listeners that were added.
	  function cleanup() {
	    source.removeListener('data', ondata);
	    dest.removeListener('drain', ondrain);

	    source.removeListener('end', onend);
	    source.removeListener('close', onclose);

	    source.removeListener('error', onerror);
	    dest.removeListener('error', onerror);

	    source.removeListener('end', cleanup);
	    source.removeListener('close', cleanup);

	    dest.removeListener('close', cleanup);
	  }

	  source.on('end', cleanup);
	  source.on('close', cleanup);

	  dest.on('close', cleanup);

	  dest.emit('pipe', source);

	  // Allow for unix-like usage: A.pipe(B).pipe(C)
	  return dest;
	};


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {var Stream = (function (){
	  try {
	    return __webpack_require__(45); // hack to fix a circular dependency issue when used with browserify
	  } catch(_){}
	}());
	exports = module.exports = __webpack_require__(48);
	exports.Stream = Stream || exports;
	exports.Readable = exports;
	exports.Writable = __webpack_require__(59);
	exports.Duplex = __webpack_require__(58);
	exports.Transform = __webpack_require__(64);
	exports.PassThrough = __webpack_require__(65);

	if (!process.browser && process.env.READABLE_STREAM === 'disable' && Stream) {
	  module.exports = Stream;
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	module.exports = Readable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(49);
	/*</replacement>*/

	/*<replacement>*/
	var isArray = __webpack_require__(50);
	/*</replacement>*/

	Readable.ReadableState = ReadableState;

	/*<replacement>*/
	var EE = __webpack_require__(43).EventEmitter;

	var EElistenerCount = function (emitter, type) {
	  return emitter.listeners(type).length;
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(45);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(43).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(51).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(54);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(55);
	util.inherits = __webpack_require__(46);
	/*</replacement>*/

	/*<replacement>*/
	var debugUtil = __webpack_require__(56);
	var debug = void 0;
	if (debugUtil && debugUtil.debuglog) {
	  debug = debugUtil.debuglog('stream');
	} else {
	  debug = function () {};
	}
	/*</replacement>*/

	var BufferList = __webpack_require__(57);
	var StringDecoder;

	util.inherits(Readable, Stream);

	function prependListener(emitter, event, fn) {
	  if (typeof emitter.prependListener === 'function') {
	    return emitter.prependListener(event, fn);
	  } else {
	    // This is a hack to make sure that our error handler is attached before any
	    // userland ones.  NEVER DO THIS. This is here only because this code needs
	    // to continue to work with older versions of Node.js that do not include
	    // the prependListener() method. The goal is to eventually remove this hack.
	    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
	  }
	}

	var Duplex;
	function ReadableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(58);

	  options = options || {};

	  // object stream flag. Used to make read(n) ignore n and to
	  // make all the buffer merging and length checks go away
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

	  // the point at which it stops calling _read() to fill the buffer
	  // Note: 0 is a valid value, means "don't call _read preemptively ever"
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  // A linked list is used to store data chunks instead of an array because the
	  // linked list can remove elements from the beginning faster than
	  // array.shift()
	  this.buffer = new BufferList();
	  this.length = 0;
	  this.pipes = null;
	  this.pipesCount = 0;
	  this.flowing = null;
	  this.ended = false;
	  this.endEmitted = false;
	  this.reading = false;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // whenever we return null, then we set a flag to say
	  // that we're awaiting a 'readable' event emission.
	  this.needReadable = false;
	  this.emittedReadable = false;
	  this.readableListening = false;
	  this.resumeScheduled = false;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // when piping, we only care about 'readable' events that happen
	  // after read()ing all the bytes and not getting any pushback.
	  this.ranOut = false;

	  // the number of writers that are awaiting a drain event in .pipe()s
	  this.awaitDrain = 0;

	  // if true, a maybeReadMore has been scheduled
	  this.readingMore = false;

	  this.decoder = null;
	  this.encoding = null;
	  if (options.encoding) {
	    if (!StringDecoder) StringDecoder = __webpack_require__(63).StringDecoder;
	    this.decoder = new StringDecoder(options.encoding);
	    this.encoding = options.encoding;
	  }
	}

	var Duplex;
	function Readable(options) {
	  Duplex = Duplex || __webpack_require__(58);

	  if (!(this instanceof Readable)) return new Readable(options);

	  this._readableState = new ReadableState(options, this);

	  // legacy
	  this.readable = true;

	  if (options && typeof options.read === 'function') this._read = options.read;

	  Stream.call(this);
	}

	// Manually shove something into the read() buffer.
	// This returns true if the highWaterMark has not been hit yet,
	// similar to how Writable.write() returns true if you should
	// write() some more.
	Readable.prototype.push = function (chunk, encoding) {
	  var state = this._readableState;

	  if (!state.objectMode && typeof chunk === 'string') {
	    encoding = encoding || state.defaultEncoding;
	    if (encoding !== state.encoding) {
	      chunk = bufferShim.from(chunk, encoding);
	      encoding = '';
	    }
	  }

	  return readableAddChunk(this, state, chunk, encoding, false);
	};

	// Unshift should *always* be something directly out of read()
	Readable.prototype.unshift = function (chunk) {
	  var state = this._readableState;
	  return readableAddChunk(this, state, chunk, '', true);
	};

	Readable.prototype.isPaused = function () {
	  return this._readableState.flowing === false;
	};

	function readableAddChunk(stream, state, chunk, encoding, addToFront) {
	  var er = chunkInvalid(state, chunk);
	  if (er) {
	    stream.emit('error', er);
	  } else if (chunk === null) {
	    state.reading = false;
	    onEofChunk(stream, state);
	  } else if (state.objectMode || chunk && chunk.length > 0) {
	    if (state.ended && !addToFront) {
	      var e = new Error('stream.push() after EOF');
	      stream.emit('error', e);
	    } else if (state.endEmitted && addToFront) {
	      var _e = new Error('stream.unshift() after end event');
	      stream.emit('error', _e);
	    } else {
	      var skipAdd;
	      if (state.decoder && !addToFront && !encoding) {
	        chunk = state.decoder.write(chunk);
	        skipAdd = !state.objectMode && chunk.length === 0;
	      }

	      if (!addToFront) state.reading = false;

	      // Don't add to the buffer if we've decoded to an empty string chunk and
	      // we're not in object mode
	      if (!skipAdd) {
	        // if we want the data now, just emit it.
	        if (state.flowing && state.length === 0 && !state.sync) {
	          stream.emit('data', chunk);
	          stream.read(0);
	        } else {
	          // update the buffer info.
	          state.length += state.objectMode ? 1 : chunk.length;
	          if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

	          if (state.needReadable) emitReadable(stream);
	        }
	      }

	      maybeReadMore(stream, state);
	    }
	  } else if (!addToFront) {
	    state.reading = false;
	  }

	  return needMoreData(state);
	}

	// if it's past the high water mark, we can push in some more.
	// Also, if we have no data yet, we can stand some
	// more bytes.  This is to work around cases where hwm=0,
	// such as the repl.  Also, if the push() triggered a
	// readable event, and the user called read(largeNumber) such that
	// needReadable was set, then we ought to push more, so that another
	// 'readable' event will be triggered.
	function needMoreData(state) {
	  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
	}

	// backwards compatibility.
	Readable.prototype.setEncoding = function (enc) {
	  if (!StringDecoder) StringDecoder = __webpack_require__(63).StringDecoder;
	  this._readableState.decoder = new StringDecoder(enc);
	  this._readableState.encoding = enc;
	  return this;
	};

	// Don't raise the hwm > 8MB
	var MAX_HWM = 0x800000;
	function computeNewHighWaterMark(n) {
	  if (n >= MAX_HWM) {
	    n = MAX_HWM;
	  } else {
	    // Get the next highest power of 2 to prevent increasing hwm excessively in
	    // tiny amounts
	    n--;
	    n |= n >>> 1;
	    n |= n >>> 2;
	    n |= n >>> 4;
	    n |= n >>> 8;
	    n |= n >>> 16;
	    n++;
	  }
	  return n;
	}

	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function howMuchToRead(n, state) {
	  if (n <= 0 || state.length === 0 && state.ended) return 0;
	  if (state.objectMode) return 1;
	  if (n !== n) {
	    // Only flow one buffer at a time
	    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
	  }
	  // If we're asking for more than the current hwm, then raise the hwm.
	  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
	  if (n <= state.length) return n;
	  // Don't have enough
	  if (!state.ended) {
	    state.needReadable = true;
	    return 0;
	  }
	  return state.length;
	}

	// you can override either this method, or the async _read(n) below.
	Readable.prototype.read = function (n) {
	  debug('read', n);
	  n = parseInt(n, 10);
	  var state = this._readableState;
	  var nOrig = n;

	  if (n !== 0) state.emittedReadable = false;

	  // if we're doing read(0) to trigger a readable event, but we
	  // already have a bunch of data in the buffer, then just trigger
	  // the 'readable' event and move on.
	  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
	    debug('read: emitReadable', state.length, state.ended);
	    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
	    return null;
	  }

	  n = howMuchToRead(n, state);

	  // if we've ended, and we're now clear, then finish it up.
	  if (n === 0 && state.ended) {
	    if (state.length === 0) endReadable(this);
	    return null;
	  }

	  // All the actual chunk generation logic needs to be
	  // *below* the call to _read.  The reason is that in certain
	  // synthetic stream cases, such as passthrough streams, _read
	  // may be a completely synchronous operation which may change
	  // the state of the read buffer, providing enough data when
	  // before there was *not* enough.
	  //
	  // So, the steps are:
	  // 1. Figure out what the state of things will be after we do
	  // a read from the buffer.
	  //
	  // 2. If that resulting state will trigger a _read, then call _read.
	  // Note that this may be asynchronous, or synchronous.  Yes, it is
	  // deeply ugly to write APIs this way, but that still doesn't mean
	  // that the Readable class should behave improperly, as streams are
	  // designed to be sync/async agnostic.
	  // Take note if the _read call is sync or async (ie, if the read call
	  // has returned yet), so that we know whether or not it's safe to emit
	  // 'readable' etc.
	  //
	  // 3. Actually pull the requested chunks out of the buffer and return.

	  // if we need a readable event, then we need to do some reading.
	  var doRead = state.needReadable;
	  debug('need readable', doRead);

	  // if we currently have less than the highWaterMark, then also read some
	  if (state.length === 0 || state.length - n < state.highWaterMark) {
	    doRead = true;
	    debug('length less than watermark', doRead);
	  }

	  // however, if we've ended, then there's no point, and if we're already
	  // reading, then it's unnecessary.
	  if (state.ended || state.reading) {
	    doRead = false;
	    debug('reading or ended', doRead);
	  } else if (doRead) {
	    debug('do read');
	    state.reading = true;
	    state.sync = true;
	    // if the length is currently zero, then we *need* a readable event.
	    if (state.length === 0) state.needReadable = true;
	    // call internal read method
	    this._read(state.highWaterMark);
	    state.sync = false;
	    // If _read pushed data synchronously, then `reading` will be false,
	    // and we need to re-evaluate how much data we can return to the user.
	    if (!state.reading) n = howMuchToRead(nOrig, state);
	  }

	  var ret;
	  if (n > 0) ret = fromList(n, state);else ret = null;

	  if (ret === null) {
	    state.needReadable = true;
	    n = 0;
	  } else {
	    state.length -= n;
	  }

	  if (state.length === 0) {
	    // If we have nothing in the buffer, then we want to know
	    // as soon as we *do* get something into the buffer.
	    if (!state.ended) state.needReadable = true;

	    // If we tried to read() past the EOF, then emit end on the next tick.
	    if (nOrig !== n && state.ended) endReadable(this);
	  }

	  if (ret !== null) this.emit('data', ret);

	  return ret;
	};

	function chunkInvalid(state, chunk) {
	  var er = null;
	  if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  return er;
	}

	function onEofChunk(stream, state) {
	  if (state.ended) return;
	  if (state.decoder) {
	    var chunk = state.decoder.end();
	    if (chunk && chunk.length) {
	      state.buffer.push(chunk);
	      state.length += state.objectMode ? 1 : chunk.length;
	    }
	  }
	  state.ended = true;

	  // emit 'readable' now to make sure it gets picked up.
	  emitReadable(stream);
	}

	// Don't emit readable right away in sync mode, because this can trigger
	// another read() call => stack overflow.  This way, it might trigger
	// a nextTick recursion warning, but that's not so bad.
	function emitReadable(stream) {
	  var state = stream._readableState;
	  state.needReadable = false;
	  if (!state.emittedReadable) {
	    debug('emitReadable', state.flowing);
	    state.emittedReadable = true;
	    if (state.sync) processNextTick(emitReadable_, stream);else emitReadable_(stream);
	  }
	}

	function emitReadable_(stream) {
	  debug('emit readable');
	  stream.emit('readable');
	  flow(stream);
	}

	// at this point, the user has presumably seen the 'readable' event,
	// and called read() to consume some data.  that may have triggered
	// in turn another _read(n) call, in which case reading = true if
	// it's in progress.
	// However, if we're not ended, or reading, and the length < hwm,
	// then go ahead and try to read some more preemptively.
	function maybeReadMore(stream, state) {
	  if (!state.readingMore) {
	    state.readingMore = true;
	    processNextTick(maybeReadMore_, stream, state);
	  }
	}

	function maybeReadMore_(stream, state) {
	  var len = state.length;
	  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
	    debug('maybeReadMore read 0');
	    stream.read(0);
	    if (len === state.length)
	      // didn't get any data, stop spinning.
	      break;else len = state.length;
	  }
	  state.readingMore = false;
	}

	// abstract method.  to be overridden in specific implementation classes.
	// call cb(er, data) where data is <= n in length.
	// for virtual (non-string, non-buffer) streams, "length" is somewhat
	// arbitrary, and perhaps not very meaningful.
	Readable.prototype._read = function (n) {
	  this.emit('error', new Error('not implemented'));
	};

	Readable.prototype.pipe = function (dest, pipeOpts) {
	  var src = this;
	  var state = this._readableState;

	  switch (state.pipesCount) {
	    case 0:
	      state.pipes = dest;
	      break;
	    case 1:
	      state.pipes = [state.pipes, dest];
	      break;
	    default:
	      state.pipes.push(dest);
	      break;
	  }
	  state.pipesCount += 1;
	  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

	  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;

	  var endFn = doEnd ? onend : cleanup;
	  if (state.endEmitted) processNextTick(endFn);else src.once('end', endFn);

	  dest.on('unpipe', onunpipe);
	  function onunpipe(readable) {
	    debug('onunpipe');
	    if (readable === src) {
	      cleanup();
	    }
	  }

	  function onend() {
	    debug('onend');
	    dest.end();
	  }

	  // when the dest drains, it reduces the awaitDrain counter
	  // on the source.  This would be more elegant with a .once()
	  // handler in flow(), but adding and removing repeatedly is
	  // too slow.
	  var ondrain = pipeOnDrain(src);
	  dest.on('drain', ondrain);

	  var cleanedUp = false;
	  function cleanup() {
	    debug('cleanup');
	    // cleanup event handlers once the pipe is broken
	    dest.removeListener('close', onclose);
	    dest.removeListener('finish', onfinish);
	    dest.removeListener('drain', ondrain);
	    dest.removeListener('error', onerror);
	    dest.removeListener('unpipe', onunpipe);
	    src.removeListener('end', onend);
	    src.removeListener('end', cleanup);
	    src.removeListener('data', ondata);

	    cleanedUp = true;

	    // if the reader is waiting for a drain event from this
	    // specific writer, then it would cause it to never start
	    // flowing again.
	    // So, if this is awaiting a drain, then we just call it now.
	    // If we don't know, then assume that we are waiting for one.
	    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
	  }

	  // If the user pushes more data while we're writing to dest then we'll end up
	  // in ondata again. However, we only want to increase awaitDrain once because
	  // dest will only emit one 'drain' event for the multiple writes.
	  // => Introduce a guard on increasing awaitDrain.
	  var increasedAwaitDrain = false;
	  src.on('data', ondata);
	  function ondata(chunk) {
	    debug('ondata');
	    increasedAwaitDrain = false;
	    var ret = dest.write(chunk);
	    if (false === ret && !increasedAwaitDrain) {
	      // If the user unpiped during `dest.write()`, it is possible
	      // to get stuck in a permanently paused state if that write
	      // also returned false.
	      // => Check whether `dest` is still a piping destination.
	      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
	        debug('false write response, pause', src._readableState.awaitDrain);
	        src._readableState.awaitDrain++;
	        increasedAwaitDrain = true;
	      }
	      src.pause();
	    }
	  }

	  // if the dest has an error, then stop piping into it.
	  // however, don't suppress the throwing behavior for this.
	  function onerror(er) {
	    debug('onerror', er);
	    unpipe();
	    dest.removeListener('error', onerror);
	    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);
	  }

	  // Make sure our error handler is attached before userland ones.
	  prependListener(dest, 'error', onerror);

	  // Both close and finish should trigger unpipe, but only once.
	  function onclose() {
	    dest.removeListener('finish', onfinish);
	    unpipe();
	  }
	  dest.once('close', onclose);
	  function onfinish() {
	    debug('onfinish');
	    dest.removeListener('close', onclose);
	    unpipe();
	  }
	  dest.once('finish', onfinish);

	  function unpipe() {
	    debug('unpipe');
	    src.unpipe(dest);
	  }

	  // tell the dest that it's being piped to
	  dest.emit('pipe', src);

	  // start the flow if it hasn't been started already.
	  if (!state.flowing) {
	    debug('pipe resume');
	    src.resume();
	  }

	  return dest;
	};

	function pipeOnDrain(src) {
	  return function () {
	    var state = src._readableState;
	    debug('pipeOnDrain', state.awaitDrain);
	    if (state.awaitDrain) state.awaitDrain--;
	    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
	      state.flowing = true;
	      flow(src);
	    }
	  };
	}

	Readable.prototype.unpipe = function (dest) {
	  var state = this._readableState;

	  // if we're not piping anywhere, then do nothing.
	  if (state.pipesCount === 0) return this;

	  // just one destination.  most common case.
	  if (state.pipesCount === 1) {
	    // passed in one, but it's not the right one.
	    if (dest && dest !== state.pipes) return this;

	    if (!dest) dest = state.pipes;

	    // got a match.
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;
	    if (dest) dest.emit('unpipe', this);
	    return this;
	  }

	  // slow case. multiple pipe destinations.

	  if (!dest) {
	    // remove all.
	    var dests = state.pipes;
	    var len = state.pipesCount;
	    state.pipes = null;
	    state.pipesCount = 0;
	    state.flowing = false;

	    for (var _i = 0; _i < len; _i++) {
	      dests[_i].emit('unpipe', this);
	    }return this;
	  }

	  // try to find the right one.
	  var i = indexOf(state.pipes, dest);
	  if (i === -1) return this;

	  state.pipes.splice(i, 1);
	  state.pipesCount -= 1;
	  if (state.pipesCount === 1) state.pipes = state.pipes[0];

	  dest.emit('unpipe', this);

	  return this;
	};

	// set up data events if they are asked for
	// Ensure readable listeners eventually get something
	Readable.prototype.on = function (ev, fn) {
	  var res = Stream.prototype.on.call(this, ev, fn);

	  if (ev === 'data') {
	    // Start flowing on next tick if stream isn't explicitly paused
	    if (this._readableState.flowing !== false) this.resume();
	  } else if (ev === 'readable') {
	    var state = this._readableState;
	    if (!state.endEmitted && !state.readableListening) {
	      state.readableListening = state.needReadable = true;
	      state.emittedReadable = false;
	      if (!state.reading) {
	        processNextTick(nReadingNextTick, this);
	      } else if (state.length) {
	        emitReadable(this, state);
	      }
	    }
	  }

	  return res;
	};
	Readable.prototype.addListener = Readable.prototype.on;

	function nReadingNextTick(self) {
	  debug('readable nexttick read 0');
	  self.read(0);
	}

	// pause() and resume() are remnants of the legacy readable stream API
	// If the user uses them, then switch into old mode.
	Readable.prototype.resume = function () {
	  var state = this._readableState;
	  if (!state.flowing) {
	    debug('resume');
	    state.flowing = true;
	    resume(this, state);
	  }
	  return this;
	};

	function resume(stream, state) {
	  if (!state.resumeScheduled) {
	    state.resumeScheduled = true;
	    processNextTick(resume_, stream, state);
	  }
	}

	function resume_(stream, state) {
	  if (!state.reading) {
	    debug('resume read 0');
	    stream.read(0);
	  }

	  state.resumeScheduled = false;
	  state.awaitDrain = 0;
	  stream.emit('resume');
	  flow(stream);
	  if (state.flowing && !state.reading) stream.read(0);
	}

	Readable.prototype.pause = function () {
	  debug('call pause flowing=%j', this._readableState.flowing);
	  if (false !== this._readableState.flowing) {
	    debug('pause');
	    this._readableState.flowing = false;
	    this.emit('pause');
	  }
	  return this;
	};

	function flow(stream) {
	  var state = stream._readableState;
	  debug('flow', state.flowing);
	  while (state.flowing && stream.read() !== null) {}
	}

	// wrap an old-style stream as the async data source.
	// This is *not* part of the readable stream interface.
	// It is an ugly unfortunate mess of history.
	Readable.prototype.wrap = function (stream) {
	  var state = this._readableState;
	  var paused = false;

	  var self = this;
	  stream.on('end', function () {
	    debug('wrapped end');
	    if (state.decoder && !state.ended) {
	      var chunk = state.decoder.end();
	      if (chunk && chunk.length) self.push(chunk);
	    }

	    self.push(null);
	  });

	  stream.on('data', function (chunk) {
	    debug('wrapped data');
	    if (state.decoder) chunk = state.decoder.write(chunk);

	    // don't skip over falsy values in objectMode
	    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

	    var ret = self.push(chunk);
	    if (!ret) {
	      paused = true;
	      stream.pause();
	    }
	  });

	  // proxy all the other methods.
	  // important when wrapping filters and duplexes.
	  for (var i in stream) {
	    if (this[i] === undefined && typeof stream[i] === 'function') {
	      this[i] = function (method) {
	        return function () {
	          return stream[method].apply(stream, arguments);
	        };
	      }(i);
	    }
	  }

	  // proxy certain important events.
	  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
	  forEach(events, function (ev) {
	    stream.on(ev, self.emit.bind(self, ev));
	  });

	  // when we try to consume some more bytes, simply unpause the
	  // underlying stream.
	  self._read = function (n) {
	    debug('wrapped _read', n);
	    if (paused) {
	      paused = false;
	      stream.resume();
	    }
	  };

	  return self;
	};

	// exposed for testing purposes only.
	Readable._fromList = fromList;

	// Pluck off n bytes from an array of buffers.
	// Length is the combined lengths of all the buffers in the list.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromList(n, state) {
	  // nothing buffered
	  if (state.length === 0) return null;

	  var ret;
	  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
	    // read it all, truncate the list
	    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
	    state.buffer.clear();
	  } else {
	    // read part of list
	    ret = fromListPartial(n, state.buffer, state.decoder);
	  }

	  return ret;
	}

	// Extracts only enough buffered data to satisfy the amount requested.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function fromListPartial(n, list, hasStrings) {
	  var ret;
	  if (n < list.head.data.length) {
	    // slice is the same for buffers and strings
	    ret = list.head.data.slice(0, n);
	    list.head.data = list.head.data.slice(n);
	  } else if (n === list.head.data.length) {
	    // first chunk is a perfect match
	    ret = list.shift();
	  } else {
	    // result spans more than one buffer
	    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
	  }
	  return ret;
	}

	// Copies a specified amount of characters from the list of buffered data
	// chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBufferString(n, list) {
	  var p = list.head;
	  var c = 1;
	  var ret = p.data;
	  n -= ret.length;
	  while (p = p.next) {
	    var str = p.data;
	    var nb = n > str.length ? str.length : n;
	    if (nb === str.length) ret += str;else ret += str.slice(0, n);
	    n -= nb;
	    if (n === 0) {
	      if (nb === str.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = str.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	// Copies a specified amount of bytes from the list of buffered data chunks.
	// This function is designed to be inlinable, so please take care when making
	// changes to the function body.
	function copyFromBuffer(n, list) {
	  var ret = bufferShim.allocUnsafe(n);
	  var p = list.head;
	  var c = 1;
	  p.data.copy(ret);
	  n -= p.data.length;
	  while (p = p.next) {
	    var buf = p.data;
	    var nb = n > buf.length ? buf.length : n;
	    buf.copy(ret, ret.length - n, 0, nb);
	    n -= nb;
	    if (n === 0) {
	      if (nb === buf.length) {
	        ++c;
	        if (p.next) list.head = p.next;else list.head = list.tail = null;
	      } else {
	        list.head = p;
	        p.data = buf.slice(nb);
	      }
	      break;
	    }
	    ++c;
	  }
	  list.length -= c;
	  return ret;
	}

	function endReadable(stream) {
	  var state = stream._readableState;

	  // If we get here before consuming all the bytes, then that is a
	  // bug in node.  Should never happen.
	  if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

	  if (!state.endEmitted) {
	    state.ended = true;
	    processNextTick(endReadableNT, state, stream);
	  }
	}

	function endReadableNT(state, stream) {
	  // Check that we didn't get one last unshift.
	  if (!state.endEmitted && state.length === 0) {
	    state.endEmitted = true;
	    stream.readable = false;
	    stream.emit('end');
	  }
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

	function indexOf(xs, x) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    if (xs[i] === x) return i;
	  }
	  return -1;
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	if (!process.version ||
	    process.version.indexOf('v0.') === 0 ||
	    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
	  module.exports = nextTick;
	} else {
	  module.exports = process.nextTick;
	}

	function nextTick(fn, arg1, arg2, arg3) {
	  if (typeof fn !== 'function') {
	    throw new TypeError('"callback" argument must be a function');
	  }
	  var len = arguments.length;
	  var args, i;
	  switch (len) {
	  case 0:
	  case 1:
	    return process.nextTick(fn);
	  case 2:
	    return process.nextTick(function afterTickOne() {
	      fn.call(null, arg1);
	    });
	  case 3:
	    return process.nextTick(function afterTickTwo() {
	      fn.call(null, arg1, arg2);
	    });
	  case 4:
	    return process.nextTick(function afterTickThree() {
	      fn.call(null, arg1, arg2, arg3);
	    });
	  default:
	    args = new Array(len - 1);
	    i = 0;
	    while (i < args.length) {
	      args[i++] = arguments[i];
	    }
	    return process.nextTick(function afterTick() {
	      fn.apply(null, args);
	    });
	  }
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 50 */
/***/ (function(module, exports) {

	var toString = {}.toString;

	module.exports = Array.isArray || function (arr) {
	  return toString.call(arr) == '[object Array]';
	};


/***/ }),
/* 51 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	'use strict'

	var base64 = __webpack_require__(52)
	var ieee754 = __webpack_require__(53)
	var isArray = __webpack_require__(50)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	/*
	 * Export kMaxLength after typed array support is determined.
	 */
	exports.kMaxLength = kMaxLength()

	function typedArraySupport () {
	  try {
	    var arr = new Uint8Array(1)
	    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
	    return arr.foo() === 42 && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	function createBuffer (that, length) {
	  if (kMaxLength() < length) {
	    throw new RangeError('Invalid typed array length')
	  }
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = new Uint8Array(length)
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    if (that === null) {
	      that = new Buffer(length)
	    }
	    that.length = length
	  }

	  return that
	}

	/**
	 * The Buffer constructor returns instances of `Uint8Array` that have their
	 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
	 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
	 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
	 * returns a single octet.
	 *
	 * The `Uint8Array` prototype remains unmodified.
	 */

	function Buffer (arg, encodingOrOffset, length) {
	  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
	    return new Buffer(arg, encodingOrOffset, length)
	  }

	  // Common case.
	  if (typeof arg === 'number') {
	    if (typeof encodingOrOffset === 'string') {
	      throw new Error(
	        'If encoding is specified then the first argument must be a string'
	      )
	    }
	    return allocUnsafe(this, arg)
	  }
	  return from(this, arg, encodingOrOffset, length)
	}

	Buffer.poolSize = 8192 // not used by this implementation

	// TODO: Legacy, not needed anymore. Remove in next major version.
	Buffer._augment = function (arr) {
	  arr.__proto__ = Buffer.prototype
	  return arr
	}

	function from (that, value, encodingOrOffset, length) {
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number')
	  }

	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    return fromArrayBuffer(that, value, encodingOrOffset, length)
	  }

	  if (typeof value === 'string') {
	    return fromString(that, value, encodingOrOffset)
	  }

	  return fromObject(that, value)
	}

	/**
	 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
	 * if value is a number.
	 * Buffer.from(str[, encoding])
	 * Buffer.from(array)
	 * Buffer.from(buffer)
	 * Buffer.from(arrayBuffer[, byteOffset[, length]])
	 **/
	Buffer.from = function (value, encodingOrOffset, length) {
	  return from(null, value, encodingOrOffset, length)
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	  if (typeof Symbol !== 'undefined' && Symbol.species &&
	      Buffer[Symbol.species] === Buffer) {
	    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
	    Object.defineProperty(Buffer, Symbol.species, {
	      value: null,
	      configurable: true
	    })
	  }
	}

	function assertSize (size) {
	  if (typeof size !== 'number') {
	    throw new TypeError('"size" argument must be a number')
	  } else if (size < 0) {
	    throw new RangeError('"size" argument must not be negative')
	  }
	}

	function alloc (that, size, fill, encoding) {
	  assertSize(size)
	  if (size <= 0) {
	    return createBuffer(that, size)
	  }
	  if (fill !== undefined) {
	    // Only pay attention to encoding if it's a string. This
	    // prevents accidentally sending in a number that would
	    // be interpretted as a start offset.
	    return typeof encoding === 'string'
	      ? createBuffer(that, size).fill(fill, encoding)
	      : createBuffer(that, size).fill(fill)
	  }
	  return createBuffer(that, size)
	}

	/**
	 * Creates a new filled Buffer instance.
	 * alloc(size[, fill[, encoding]])
	 **/
	Buffer.alloc = function (size, fill, encoding) {
	  return alloc(null, size, fill, encoding)
	}

	function allocUnsafe (that, size) {
	  assertSize(size)
	  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < size; ++i) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	/**
	 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
	 * */
	Buffer.allocUnsafe = function (size) {
	  return allocUnsafe(null, size)
	}
	/**
	 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
	 */
	Buffer.allocUnsafeSlow = function (size) {
	  return allocUnsafe(null, size)
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') {
	    encoding = 'utf8'
	  }

	  if (!Buffer.isEncoding(encoding)) {
	    throw new TypeError('"encoding" must be a valid string encoding')
	  }

	  var length = byteLength(string, encoding) | 0
	  that = createBuffer(that, length)

	  var actual = that.write(string, encoding)

	  if (actual !== length) {
	    // Writing a hex string, for example, that contains invalid characters will
	    // cause everything after the first invalid character to be ignored. (e.g.
	    // 'abxxcd' will be treated as 'ab')
	    that = that.slice(0, actual)
	  }

	  return that
	}

	function fromArrayLike (that, array) {
	  var length = array.length < 0 ? 0 : checked(array.length) | 0
	  that = createBuffer(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array, byteOffset, length) {
	  array.byteLength // this throws if `array` is not a valid ArrayBuffer

	  if (byteOffset < 0 || array.byteLength < byteOffset) {
	    throw new RangeError('\'offset\' is out of bounds')
	  }

	  if (array.byteLength < byteOffset + (length || 0)) {
	    throw new RangeError('\'length\' is out of bounds')
	  }

	  if (byteOffset === undefined && length === undefined) {
	    array = new Uint8Array(array)
	  } else if (length === undefined) {
	    array = new Uint8Array(array, byteOffset)
	  } else {
	    array = new Uint8Array(array, byteOffset, length)
	  }

	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = array
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromArrayLike(that, array)
	  }
	  return that
	}

	function fromObject (that, obj) {
	  if (Buffer.isBuffer(obj)) {
	    var len = checked(obj.length) | 0
	    that = createBuffer(that, len)

	    if (that.length === 0) {
	      return that
	    }

	    obj.copy(that, 0, 0, len)
	    return that
	  }

	  if (obj) {
	    if ((typeof ArrayBuffer !== 'undefined' &&
	        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
	      if (typeof obj.length !== 'number' || isnan(obj.length)) {
	        return createBuffer(that, 0)
	      }
	      return fromArrayLike(that, obj)
	    }

	    if (obj.type === 'Buffer' && isArray(obj.data)) {
	      return fromArrayLike(that, obj.data)
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength()` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (length) {
	  if (+length != length) { // eslint-disable-line eqeqeq
	    length = 0
	  }
	  return Buffer.alloc(+length)
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i]
	      y = b[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'latin1':
	    case 'binary':
	    case 'base64':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) {
	    throw new TypeError('"list" argument must be an Array of Buffers')
	  }

	  if (list.length === 0) {
	    return Buffer.alloc(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; ++i) {
	      length += list[i].length
	    }
	  }

	  var buffer = Buffer.allocUnsafe(length)
	  var pos = 0
	  for (i = 0; i < list.length; ++i) {
	    var buf = list[i]
	    if (!Buffer.isBuffer(buf)) {
	      throw new TypeError('"list" argument must be an Array of Buffers')
	    }
	    buf.copy(buffer, pos)
	    pos += buf.length
	  }
	  return buffer
	}

	function byteLength (string, encoding) {
	  if (Buffer.isBuffer(string)) {
	    return string.length
	  }
	  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
	      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
	    return string.byteLength
	  }
	  if (typeof string !== 'string') {
	    string = '' + string
	  }

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'latin1':
	      case 'binary':
	        return len
	      case 'utf8':
	      case 'utf-8':
	      case undefined:
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
	  // property of a typed array.

	  // This behaves neither like String nor Uint8Array in that we set start/end
	  // to their upper/lower bounds if the value passed is out of range.
	  // undefined is handled specially as per ECMA-262 6th Edition,
	  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
	  if (start === undefined || start < 0) {
	    start = 0
	  }
	  // Return early if start > this.length. Done here to prevent potential uint32
	  // coercion fail below.
	  if (start > this.length) {
	    return ''
	  }

	  if (end === undefined || end > this.length) {
	    end = this.length
	  }

	  if (end <= 0) {
	    return ''
	  }

	  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
	  end >>>= 0
	  start >>>= 0

	  if (end <= start) {
	    return ''
	  }

	  if (!encoding) encoding = 'utf8'

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'latin1':
	      case 'binary':
	        return latin1Slice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
	// Buffer instances.
	Buffer.prototype._isBuffer = true

	function swap (b, n, m) {
	  var i = b[n]
	  b[n] = b[m]
	  b[m] = i
	}

	Buffer.prototype.swap16 = function swap16 () {
	  var len = this.length
	  if (len % 2 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 16-bits')
	  }
	  for (var i = 0; i < len; i += 2) {
	    swap(this, i, i + 1)
	  }
	  return this
	}

	Buffer.prototype.swap32 = function swap32 () {
	  var len = this.length
	  if (len % 4 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 32-bits')
	  }
	  for (var i = 0; i < len; i += 4) {
	    swap(this, i, i + 3)
	    swap(this, i + 1, i + 2)
	  }
	  return this
	}

	Buffer.prototype.swap64 = function swap64 () {
	  var len = this.length
	  if (len % 8 !== 0) {
	    throw new RangeError('Buffer size must be a multiple of 64-bits')
	  }
	  for (var i = 0; i < len; i += 8) {
	    swap(this, i, i + 7)
	    swap(this, i + 1, i + 6)
	    swap(this, i + 2, i + 5)
	    swap(this, i + 3, i + 4)
	  }
	  return this
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
	  if (!Buffer.isBuffer(target)) {
	    throw new TypeError('Argument must be a Buffer')
	  }

	  if (start === undefined) {
	    start = 0
	  }
	  if (end === undefined) {
	    end = target ? target.length : 0
	  }
	  if (thisStart === undefined) {
	    thisStart = 0
	  }
	  if (thisEnd === undefined) {
	    thisEnd = this.length
	  }

	  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
	    throw new RangeError('out of range index')
	  }

	  if (thisStart >= thisEnd && start >= end) {
	    return 0
	  }
	  if (thisStart >= thisEnd) {
	    return -1
	  }
	  if (start >= end) {
	    return 1
	  }

	  start >>>= 0
	  end >>>= 0
	  thisStart >>>= 0
	  thisEnd >>>= 0

	  if (this === target) return 0

	  var x = thisEnd - thisStart
	  var y = end - start
	  var len = Math.min(x, y)

	  var thisCopy = this.slice(thisStart, thisEnd)
	  var targetCopy = target.slice(start, end)

	  for (var i = 0; i < len; ++i) {
	    if (thisCopy[i] !== targetCopy[i]) {
	      x = thisCopy[i]
	      y = targetCopy[i]
	      break
	    }
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
	// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
	//
	// Arguments:
	// - buffer - a Buffer to search
	// - val - a string, Buffer, or number
	// - byteOffset - an index into `buffer`; will be clamped to an int32
	// - encoding - an optional encoding, relevant is val is a string
	// - dir - true for indexOf, false for lastIndexOf
	function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
	  // Empty buffer means no match
	  if (buffer.length === 0) return -1

	  // Normalize byteOffset
	  if (typeof byteOffset === 'string') {
	    encoding = byteOffset
	    byteOffset = 0
	  } else if (byteOffset > 0x7fffffff) {
	    byteOffset = 0x7fffffff
	  } else if (byteOffset < -0x80000000) {
	    byteOffset = -0x80000000
	  }
	  byteOffset = +byteOffset  // Coerce to Number.
	  if (isNaN(byteOffset)) {
	    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
	    byteOffset = dir ? 0 : (buffer.length - 1)
	  }

	  // Normalize byteOffset: negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
	  if (byteOffset >= buffer.length) {
	    if (dir) return -1
	    else byteOffset = buffer.length - 1
	  } else if (byteOffset < 0) {
	    if (dir) byteOffset = 0
	    else return -1
	  }

	  // Normalize val
	  if (typeof val === 'string') {
	    val = Buffer.from(val, encoding)
	  }

	  // Finally, search either indexOf (if dir is true) or lastIndexOf
	  if (Buffer.isBuffer(val)) {
	    // Special case: looking for empty string/buffer always fails
	    if (val.length === 0) {
	      return -1
	    }
	    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
	  } else if (typeof val === 'number') {
	    val = val & 0xFF // Search for a byte value [0-255]
	    if (Buffer.TYPED_ARRAY_SUPPORT &&
	        typeof Uint8Array.prototype.indexOf === 'function') {
	      if (dir) {
	        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
	      } else {
	        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
	      }
	    }
	    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
	  var indexSize = 1
	  var arrLength = arr.length
	  var valLength = val.length

	  if (encoding !== undefined) {
	    encoding = String(encoding).toLowerCase()
	    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
	        encoding === 'utf16le' || encoding === 'utf-16le') {
	      if (arr.length < 2 || val.length < 2) {
	        return -1
	      }
	      indexSize = 2
	      arrLength /= 2
	      valLength /= 2
	      byteOffset /= 2
	    }
	  }

	  function read (buf, i) {
	    if (indexSize === 1) {
	      return buf[i]
	    } else {
	      return buf.readUInt16BE(i * indexSize)
	    }
	  }

	  var i
	  if (dir) {
	    var foundIndex = -1
	    for (i = byteOffset; i < arrLength; i++) {
	      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
	      } else {
	        if (foundIndex !== -1) i -= i - foundIndex
	        foundIndex = -1
	      }
	    }
	  } else {
	    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
	    for (i = byteOffset; i >= 0; i--) {
	      var found = true
	      for (var j = 0; j < valLength; j++) {
	        if (read(arr, i + j) !== read(val, j)) {
	          found = false
	          break
	        }
	      }
	      if (found) return i
	    }
	  }

	  return -1
	}

	Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
	  return this.indexOf(val, byteOffset, encoding) !== -1
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
	}

	Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
	  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; ++i) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) return i
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function latin1Write (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    throw new Error(
	      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
	    )
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('Attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'latin1':
	      case 'binary':
	        return latin1Write(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function latin1Slice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; ++i) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; ++i) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = this.subarray(start, end)
	    newBuf.__proto__ = Buffer.prototype
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; ++i) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    var maxBytes = Math.pow(2, 8 * byteLength) - 1
	    checkInt(this, value, offset, byteLength, maxBytes, 0)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
	      sub = 1
	    }
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (offset + ext > buf.length) throw new RangeError('Index out of range')
	  if (offset < 0) throw new RangeError('Index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; --i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; ++i) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    Uint8Array.prototype.set.call(
	      target,
	      this.subarray(start, start + len),
	      targetStart
	    )
	  }

	  return len
	}

	// Usage:
	//    buffer.fill(number[, offset[, end]])
	//    buffer.fill(buffer[, offset[, end]])
	//    buffer.fill(string[, offset[, end]][, encoding])
	Buffer.prototype.fill = function fill (val, start, end, encoding) {
	  // Handle string cases:
	  if (typeof val === 'string') {
	    if (typeof start === 'string') {
	      encoding = start
	      start = 0
	      end = this.length
	    } else if (typeof end === 'string') {
	      encoding = end
	      end = this.length
	    }
	    if (val.length === 1) {
	      var code = val.charCodeAt(0)
	      if (code < 256) {
	        val = code
	      }
	    }
	    if (encoding !== undefined && typeof encoding !== 'string') {
	      throw new TypeError('encoding must be a string')
	    }
	    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
	      throw new TypeError('Unknown encoding: ' + encoding)
	    }
	  } else if (typeof val === 'number') {
	    val = val & 255
	  }

	  // Invalid ranges are not set to a default, so can range check early.
	  if (start < 0 || this.length < start || this.length < end) {
	    throw new RangeError('Out of range index')
	  }

	  if (end <= start) {
	    return this
	  }

	  start = start >>> 0
	  end = end === undefined ? this.length : end >>> 0

	  if (!val) val = 0

	  var i
	  if (typeof val === 'number') {
	    for (i = start; i < end; ++i) {
	      this[i] = val
	    }
	  } else {
	    var bytes = Buffer.isBuffer(val)
	      ? val
	      : utf8ToBytes(new Buffer(val, encoding).toString())
	    var len = bytes.length
	    for (i = 0; i < end - start; ++i) {
	      this[i + start] = bytes[i % len]
	    }
	  }

	  return this
	}

	// HELPER FUNCTIONS
	// ================

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; ++i) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; ++i) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; ++i) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	function isnan (val) {
	  return val !== val // eslint-disable-line no-self-compare
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 52 */
/***/ (function(module, exports) {

	'use strict'

	exports.byteLength = byteLength
	exports.toByteArray = toByteArray
	exports.fromByteArray = fromByteArray

	var lookup = []
	var revLookup = []
	var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

	var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
	for (var i = 0, len = code.length; i < len; ++i) {
	  lookup[i] = code[i]
	  revLookup[code.charCodeAt(i)] = i
	}

	revLookup['-'.charCodeAt(0)] = 62
	revLookup['_'.charCodeAt(0)] = 63

	function placeHoldersCount (b64) {
	  var len = b64.length
	  if (len % 4 > 0) {
	    throw new Error('Invalid string. Length must be a multiple of 4')
	  }

	  // the number of equal signs (place holders)
	  // if there are two placeholders, than the two characters before it
	  // represent one byte
	  // if there is only one, then the three characters before it represent 2 bytes
	  // this is just a cheap hack to not do indexOf twice
	  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
	}

	function byteLength (b64) {
	  // base64 is 4/3 + up to two characters of the original data
	  return b64.length * 3 / 4 - placeHoldersCount(b64)
	}

	function toByteArray (b64) {
	  var i, j, l, tmp, placeHolders, arr
	  var len = b64.length
	  placeHolders = placeHoldersCount(b64)

	  arr = new Arr(len * 3 / 4 - placeHolders)

	  // if there are placeholders, only get up to the last complete 4 chars
	  l = placeHolders > 0 ? len - 4 : len

	  var L = 0

	  for (i = 0, j = 0; i < l; i += 4, j += 3) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
	    arr[L++] = (tmp >> 16) & 0xFF
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  if (placeHolders === 2) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
	    arr[L++] = tmp & 0xFF
	  } else if (placeHolders === 1) {
	    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
	    arr[L++] = (tmp >> 8) & 0xFF
	    arr[L++] = tmp & 0xFF
	  }

	  return arr
	}

	function tripletToBase64 (num) {
	  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
	}

	function encodeChunk (uint8, start, end) {
	  var tmp
	  var output = []
	  for (var i = start; i < end; i += 3) {
	    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
	    output.push(tripletToBase64(tmp))
	  }
	  return output.join('')
	}

	function fromByteArray (uint8) {
	  var tmp
	  var len = uint8.length
	  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
	  var output = ''
	  var parts = []
	  var maxChunkLength = 16383 // must be multiple of 3

	  // go through the array every three bytes, we'll deal with trailing stuff later
	  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
	    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
	  }

	  // pad the end with zeros, but make sure to not forget the extra bytes
	  if (extraBytes === 1) {
	    tmp = uint8[len - 1]
	    output += lookup[tmp >> 2]
	    output += lookup[(tmp << 4) & 0x3F]
	    output += '=='
	  } else if (extraBytes === 2) {
	    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
	    output += lookup[tmp >> 10]
	    output += lookup[(tmp >> 4) & 0x3F]
	    output += lookup[(tmp << 2) & 0x3F]
	    output += '='
	  }

	  parts.push(output)

	  return parts.join('')
	}


/***/ }),
/* 53 */
/***/ (function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	var buffer = __webpack_require__(51);
	var Buffer = buffer.Buffer;
	var SlowBuffer = buffer.SlowBuffer;
	var MAX_LEN = buffer.kMaxLength || 2147483647;
	exports.alloc = function alloc(size, fill, encoding) {
	  if (typeof Buffer.alloc === 'function') {
	    return Buffer.alloc(size, fill, encoding);
	  }
	  if (typeof encoding === 'number') {
	    throw new TypeError('encoding must not be number');
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  var enc = encoding;
	  var _fill = fill;
	  if (_fill === undefined) {
	    enc = undefined;
	    _fill = 0;
	  }
	  var buf = new Buffer(size);
	  if (typeof _fill === 'string') {
	    var fillBuf = new Buffer(_fill, enc);
	    var flen = fillBuf.length;
	    var i = -1;
	    while (++i < size) {
	      buf[i] = fillBuf[i % flen];
	    }
	  } else {
	    buf.fill(_fill);
	  }
	  return buf;
	}
	exports.allocUnsafe = function allocUnsafe(size) {
	  if (typeof Buffer.allocUnsafe === 'function') {
	    return Buffer.allocUnsafe(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size > MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new Buffer(size);
	}
	exports.from = function from(value, encodingOrOffset, length) {
	  if (typeof Buffer.from === 'function' && (!global.Uint8Array || Uint8Array.from !== Buffer.from)) {
	    return Buffer.from(value, encodingOrOffset, length);
	  }
	  if (typeof value === 'number') {
	    throw new TypeError('"value" argument must not be a number');
	  }
	  if (typeof value === 'string') {
	    return new Buffer(value, encodingOrOffset);
	  }
	  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
	    var offset = encodingOrOffset;
	    if (arguments.length === 1) {
	      return new Buffer(value);
	    }
	    if (typeof offset === 'undefined') {
	      offset = 0;
	    }
	    var len = length;
	    if (typeof len === 'undefined') {
	      len = value.byteLength - offset;
	    }
	    if (offset >= value.byteLength) {
	      throw new RangeError('\'offset\' is out of bounds');
	    }
	    if (len > value.byteLength - offset) {
	      throw new RangeError('\'length\' is out of bounds');
	    }
	    return new Buffer(value.slice(offset, offset + len));
	  }
	  if (Buffer.isBuffer(value)) {
	    var out = new Buffer(value.length);
	    value.copy(out, 0, 0, value.length);
	    return out;
	  }
	  if (value) {
	    if (Array.isArray(value) || (typeof ArrayBuffer !== 'undefined' && value.buffer instanceof ArrayBuffer) || 'length' in value) {
	      return new Buffer(value);
	    }
	    if (value.type === 'Buffer' && Array.isArray(value.data)) {
	      return new Buffer(value.data);
	    }
	  }

	  throw new TypeError('First argument must be a string, Buffer, ' + 'ArrayBuffer, Array, or array-like object.');
	}
	exports.allocUnsafeSlow = function allocUnsafeSlow(size) {
	  if (typeof Buffer.allocUnsafeSlow === 'function') {
	    return Buffer.allocUnsafeSlow(size);
	  }
	  if (typeof size !== 'number') {
	    throw new TypeError('size must be a number');
	  }
	  if (size >= MAX_LEN) {
	    throw new RangeError('size is too large');
	  }
	  return new SlowBuffer(size);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.

	function isArray(arg) {
	  if (Array.isArray) {
	    return Array.isArray(arg);
	  }
	  return objectToString(arg) === '[object Array]';
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = Buffer.isBuffer;

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(51).Buffer))

/***/ }),
/* 56 */
/***/ (function(module, exports) {

	/* (ignored) */

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var Buffer = __webpack_require__(51).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(54);
	/*</replacement>*/

	module.exports = BufferList;

	function BufferList() {
	  this.head = null;
	  this.tail = null;
	  this.length = 0;
	}

	BufferList.prototype.push = function (v) {
	  var entry = { data: v, next: null };
	  if (this.length > 0) this.tail.next = entry;else this.head = entry;
	  this.tail = entry;
	  ++this.length;
	};

	BufferList.prototype.unshift = function (v) {
	  var entry = { data: v, next: this.head };
	  if (this.length === 0) this.tail = entry;
	  this.head = entry;
	  ++this.length;
	};

	BufferList.prototype.shift = function () {
	  if (this.length === 0) return;
	  var ret = this.head.data;
	  if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
	  --this.length;
	  return ret;
	};

	BufferList.prototype.clear = function () {
	  this.head = this.tail = null;
	  this.length = 0;
	};

	BufferList.prototype.join = function (s) {
	  if (this.length === 0) return '';
	  var p = this.head;
	  var ret = '' + p.data;
	  while (p = p.next) {
	    ret += s + p.data;
	  }return ret;
	};

	BufferList.prototype.concat = function (n) {
	  if (this.length === 0) return bufferShim.alloc(0);
	  if (this.length === 1) return this.head.data;
	  var ret = bufferShim.allocUnsafe(n >>> 0);
	  var p = this.head;
	  var i = 0;
	  while (p) {
	    p.data.copy(ret, i);
	    i += p.data.length;
	    p = p.next;
	  }
	  return ret;
	};

/***/ }),
/* 58 */
/***/ (function(module, exports, __webpack_require__) {

	// a duplex stream is just a stream that is both readable and writable.
	// Since JS doesn't have multiple prototypal inheritance, this class
	// prototypally inherits from Readable, and then parasitically from
	// Writable.

	'use strict';

	/*<replacement>*/

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    keys.push(key);
	  }return keys;
	};
	/*</replacement>*/

	module.exports = Duplex;

	/*<replacement>*/
	var processNextTick = __webpack_require__(49);
	/*</replacement>*/

	/*<replacement>*/
	var util = __webpack_require__(55);
	util.inherits = __webpack_require__(46);
	/*</replacement>*/

	var Readable = __webpack_require__(48);
	var Writable = __webpack_require__(59);

	util.inherits(Duplex, Readable);

	var keys = objectKeys(Writable.prototype);
	for (var v = 0; v < keys.length; v++) {
	  var method = keys[v];
	  if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
	}

	function Duplex(options) {
	  if (!(this instanceof Duplex)) return new Duplex(options);

	  Readable.call(this, options);
	  Writable.call(this, options);

	  if (options && options.readable === false) this.readable = false;

	  if (options && options.writable === false) this.writable = false;

	  this.allowHalfOpen = true;
	  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

	  this.once('end', onend);
	}

	// the no-half-open enforcer
	function onend() {
	  // if we allow half-open state, or if the writable side ended,
	  // then we're ok.
	  if (this.allowHalfOpen || this._writableState.ended) return;

	  // no more data can be written.
	  // But allow more writes to happen in this tick.
	  processNextTick(onEndNT, this);
	}

	function onEndNT(self) {
	  self.end();
	}

	function forEach(xs, f) {
	  for (var i = 0, l = xs.length; i < l; i++) {
	    f(xs[i], i);
	  }
	}

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, setImmediate) {// A bit simpler than readable streams.
	// Implement an async ._write(chunk, encoding, cb), and it'll handle all
	// the drain event emission and buffering.

	'use strict';

	module.exports = Writable;

	/*<replacement>*/
	var processNextTick = __webpack_require__(49);
	/*</replacement>*/

	/*<replacement>*/
	var asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : processNextTick;
	/*</replacement>*/

	Writable.WritableState = WritableState;

	/*<replacement>*/
	var util = __webpack_require__(55);
	util.inherits = __webpack_require__(46);
	/*</replacement>*/

	/*<replacement>*/
	var internalUtil = {
	  deprecate: __webpack_require__(62)
	};
	/*</replacement>*/

	/*<replacement>*/
	var Stream;
	(function () {
	  try {
	    Stream = __webpack_require__(45);
	  } catch (_) {} finally {
	    if (!Stream) Stream = __webpack_require__(43).EventEmitter;
	  }
	})();
	/*</replacement>*/

	var Buffer = __webpack_require__(51).Buffer;
	/*<replacement>*/
	var bufferShim = __webpack_require__(54);
	/*</replacement>*/

	util.inherits(Writable, Stream);

	function nop() {}

	function WriteReq(chunk, encoding, cb) {
	  this.chunk = chunk;
	  this.encoding = encoding;
	  this.callback = cb;
	  this.next = null;
	}

	var Duplex;
	function WritableState(options, stream) {
	  Duplex = Duplex || __webpack_require__(58);

	  options = options || {};

	  // object stream flag to indicate whether or not this stream
	  // contains buffers or objects.
	  this.objectMode = !!options.objectMode;

	  if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

	  // the point at which write() starts returning false
	  // Note: 0 is a valid value, means that we always return false if
	  // the entire buffer is not flushed immediately on write()
	  var hwm = options.highWaterMark;
	  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
	  this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

	  // cast to ints.
	  this.highWaterMark = ~ ~this.highWaterMark;

	  this.needDrain = false;
	  // at the start of calling end()
	  this.ending = false;
	  // when end() has been called, and returned
	  this.ended = false;
	  // when 'finish' is emitted
	  this.finished = false;

	  // should we decode strings into buffers before passing to _write?
	  // this is here so that some node-core streams can optimize string
	  // handling at a lower level.
	  var noDecode = options.decodeStrings === false;
	  this.decodeStrings = !noDecode;

	  // Crypto is kind of old and crusty.  Historically, its default string
	  // encoding is 'binary' so we have to make this configurable.
	  // Everything else in the universe uses 'utf8', though.
	  this.defaultEncoding = options.defaultEncoding || 'utf8';

	  // not an actual buffer we keep track of, but a measurement
	  // of how much we're waiting to get pushed to some underlying
	  // socket or file.
	  this.length = 0;

	  // a flag to see when we're in the middle of a write.
	  this.writing = false;

	  // when true all writes will be buffered until .uncork() call
	  this.corked = 0;

	  // a flag to be able to tell if the onwrite cb is called immediately,
	  // or on a later tick.  We set this to true at first, because any
	  // actions that shouldn't happen until "later" should generally also
	  // not happen before the first write call.
	  this.sync = true;

	  // a flag to know if we're processing previously buffered items, which
	  // may call the _write() callback in the same tick, so that we don't
	  // end up in an overlapped onwrite situation.
	  this.bufferProcessing = false;

	  // the callback that's passed to _write(chunk,cb)
	  this.onwrite = function (er) {
	    onwrite(stream, er);
	  };

	  // the callback that the user supplies to write(chunk,encoding,cb)
	  this.writecb = null;

	  // the amount that is being written when _write is called.
	  this.writelen = 0;

	  this.bufferedRequest = null;
	  this.lastBufferedRequest = null;

	  // number of pending user-supplied write callbacks
	  // this must be 0 before 'finish' can be emitted
	  this.pendingcb = 0;

	  // emit prefinish if the only thing we're waiting for is _write cbs
	  // This is relevant for synchronous Transform streams
	  this.prefinished = false;

	  // True if the error was already emitted and should not be thrown again
	  this.errorEmitted = false;

	  // count buffered requests
	  this.bufferedRequestCount = 0;

	  // allocate the first CorkedRequest, there is always
	  // one allocated and free to use, and we maintain at most two
	  this.corkedRequestsFree = new CorkedRequest(this);
	}

	WritableState.prototype.getBuffer = function writableStateGetBuffer() {
	  var current = this.bufferedRequest;
	  var out = [];
	  while (current) {
	    out.push(current);
	    current = current.next;
	  }
	  return out;
	};

	(function () {
	  try {
	    Object.defineProperty(WritableState.prototype, 'buffer', {
	      get: internalUtil.deprecate(function () {
	        return this.getBuffer();
	      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
	    });
	  } catch (_) {}
	})();

	var Duplex;
	function Writable(options) {
	  Duplex = Duplex || __webpack_require__(58);

	  // Writable ctor is applied to Duplexes, though they're not
	  // instanceof Writable, they're instanceof Readable.
	  if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

	  this._writableState = new WritableState(options, this);

	  // legacy.
	  this.writable = true;

	  if (options) {
	    if (typeof options.write === 'function') this._write = options.write;

	    if (typeof options.writev === 'function') this._writev = options.writev;
	  }

	  Stream.call(this);
	}

	// Otherwise people can pipe Writable streams, which is just wrong.
	Writable.prototype.pipe = function () {
	  this.emit('error', new Error('Cannot pipe, not readable'));
	};

	function writeAfterEnd(stream, cb) {
	  var er = new Error('write after end');
	  // TODO: defer error events consistently everywhere, not just the cb
	  stream.emit('error', er);
	  processNextTick(cb, er);
	}

	// If we get something that is not a buffer, string, null, or undefined,
	// and we're not in objectMode, then that's an error.
	// Otherwise stream chunks are all considered to be of length=1, and the
	// watermarks determine how many objects to keep in the buffer, rather than
	// how many bytes or characters.
	function validChunk(stream, state, chunk, cb) {
	  var valid = true;
	  var er = false;
	  // Always throw error if a null is written
	  // if we are not in object mode then throw
	  // if it is not a buffer, string, or undefined.
	  if (chunk === null) {
	    er = new TypeError('May not write null values to stream');
	  } else if (!Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
	    er = new TypeError('Invalid non-string/buffer chunk');
	  }
	  if (er) {
	    stream.emit('error', er);
	    processNextTick(cb, er);
	    valid = false;
	  }
	  return valid;
	}

	Writable.prototype.write = function (chunk, encoding, cb) {
	  var state = this._writableState;
	  var ret = false;

	  if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

	  if (typeof cb !== 'function') cb = nop;

	  if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
	    state.pendingcb++;
	    ret = writeOrBuffer(this, state, chunk, encoding, cb);
	  }

	  return ret;
	};

	Writable.prototype.cork = function () {
	  var state = this._writableState;

	  state.corked++;
	};

	Writable.prototype.uncork = function () {
	  var state = this._writableState;

	  if (state.corked) {
	    state.corked--;

	    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
	  }
	};

	Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
	  // node::ParseEncoding() requires lower case.
	  if (typeof encoding === 'string') encoding = encoding.toLowerCase();
	  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
	  this._writableState.defaultEncoding = encoding;
	  return this;
	};

	function decodeChunk(state, chunk, encoding) {
	  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
	    chunk = bufferShim.from(chunk, encoding);
	  }
	  return chunk;
	}

	// if we're already writing something, then just put this
	// in the queue, and wait our turn.  Otherwise, call _write
	// If we return false, then we need a drain event, so set that flag.
	function writeOrBuffer(stream, state, chunk, encoding, cb) {
	  chunk = decodeChunk(state, chunk, encoding);

	  if (Buffer.isBuffer(chunk)) encoding = 'buffer';
	  var len = state.objectMode ? 1 : chunk.length;

	  state.length += len;

	  var ret = state.length < state.highWaterMark;
	  // we must ensure that previous needDrain will not be reset to false.
	  if (!ret) state.needDrain = true;

	  if (state.writing || state.corked) {
	    var last = state.lastBufferedRequest;
	    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
	    if (last) {
	      last.next = state.lastBufferedRequest;
	    } else {
	      state.bufferedRequest = state.lastBufferedRequest;
	    }
	    state.bufferedRequestCount += 1;
	  } else {
	    doWrite(stream, state, false, len, chunk, encoding, cb);
	  }

	  return ret;
	}

	function doWrite(stream, state, writev, len, chunk, encoding, cb) {
	  state.writelen = len;
	  state.writecb = cb;
	  state.writing = true;
	  state.sync = true;
	  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
	  state.sync = false;
	}

	function onwriteError(stream, state, sync, er, cb) {
	  --state.pendingcb;
	  if (sync) processNextTick(cb, er);else cb(er);

	  stream._writableState.errorEmitted = true;
	  stream.emit('error', er);
	}

	function onwriteStateUpdate(state) {
	  state.writing = false;
	  state.writecb = null;
	  state.length -= state.writelen;
	  state.writelen = 0;
	}

	function onwrite(stream, er) {
	  var state = stream._writableState;
	  var sync = state.sync;
	  var cb = state.writecb;

	  onwriteStateUpdate(state);

	  if (er) onwriteError(stream, state, sync, er, cb);else {
	    // Check if we're actually ready to finish, but don't emit yet
	    var finished = needFinish(state);

	    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
	      clearBuffer(stream, state);
	    }

	    if (sync) {
	      /*<replacement>*/
	      asyncWrite(afterWrite, stream, state, finished, cb);
	      /*</replacement>*/
	    } else {
	        afterWrite(stream, state, finished, cb);
	      }
	  }
	}

	function afterWrite(stream, state, finished, cb) {
	  if (!finished) onwriteDrain(stream, state);
	  state.pendingcb--;
	  cb();
	  finishMaybe(stream, state);
	}

	// Must force callback to be called on nextTick, so that we don't
	// emit 'drain' before the write() consumer gets the 'false' return
	// value, and has a chance to attach a 'drain' listener.
	function onwriteDrain(stream, state) {
	  if (state.length === 0 && state.needDrain) {
	    state.needDrain = false;
	    stream.emit('drain');
	  }
	}

	// if there's something in the buffer waiting, then process it
	function clearBuffer(stream, state) {
	  state.bufferProcessing = true;
	  var entry = state.bufferedRequest;

	  if (stream._writev && entry && entry.next) {
	    // Fast case, write everything using _writev()
	    var l = state.bufferedRequestCount;
	    var buffer = new Array(l);
	    var holder = state.corkedRequestsFree;
	    holder.entry = entry;

	    var count = 0;
	    while (entry) {
	      buffer[count] = entry;
	      entry = entry.next;
	      count += 1;
	    }

	    doWrite(stream, state, true, state.length, buffer, '', holder.finish);

	    // doWrite is almost always async, defer these to save a bit of time
	    // as the hot path ends with doWrite
	    state.pendingcb++;
	    state.lastBufferedRequest = null;
	    if (holder.next) {
	      state.corkedRequestsFree = holder.next;
	      holder.next = null;
	    } else {
	      state.corkedRequestsFree = new CorkedRequest(state);
	    }
	  } else {
	    // Slow case, write chunks one-by-one
	    while (entry) {
	      var chunk = entry.chunk;
	      var encoding = entry.encoding;
	      var cb = entry.callback;
	      var len = state.objectMode ? 1 : chunk.length;

	      doWrite(stream, state, false, len, chunk, encoding, cb);
	      entry = entry.next;
	      // if we didn't call the onwrite immediately, then
	      // it means that we need to wait until it does.
	      // also, that means that the chunk and cb are currently
	      // being processed, so move the buffer counter past them.
	      if (state.writing) {
	        break;
	      }
	    }

	    if (entry === null) state.lastBufferedRequest = null;
	  }

	  state.bufferedRequestCount = 0;
	  state.bufferedRequest = entry;
	  state.bufferProcessing = false;
	}

	Writable.prototype._write = function (chunk, encoding, cb) {
	  cb(new Error('not implemented'));
	};

	Writable.prototype._writev = null;

	Writable.prototype.end = function (chunk, encoding, cb) {
	  var state = this._writableState;

	  if (typeof chunk === 'function') {
	    cb = chunk;
	    chunk = null;
	    encoding = null;
	  } else if (typeof encoding === 'function') {
	    cb = encoding;
	    encoding = null;
	  }

	  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

	  // .end() fully uncorks
	  if (state.corked) {
	    state.corked = 1;
	    this.uncork();
	  }

	  // ignore unnecessary end() calls.
	  if (!state.ending && !state.finished) endWritable(this, state, cb);
	};

	function needFinish(state) {
	  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
	}

	function prefinish(stream, state) {
	  if (!state.prefinished) {
	    state.prefinished = true;
	    stream.emit('prefinish');
	  }
	}

	function finishMaybe(stream, state) {
	  var need = needFinish(state);
	  if (need) {
	    if (state.pendingcb === 0) {
	      prefinish(stream, state);
	      state.finished = true;
	      stream.emit('finish');
	    } else {
	      prefinish(stream, state);
	    }
	  }
	  return need;
	}

	function endWritable(stream, state, cb) {
	  state.ending = true;
	  finishMaybe(stream, state);
	  if (cb) {
	    if (state.finished) processNextTick(cb);else stream.once('finish', cb);
	  }
	  state.ended = true;
	  stream.writable = false;
	}

	// It seems a linked list but it is not
	// there will be only 2 of these for each stream
	function CorkedRequest(state) {
	  var _this = this;

	  this.next = null;
	  this.entry = null;

	  this.finish = function (err) {
	    var entry = _this.entry;
	    _this.entry = null;
	    while (entry) {
	      var cb = entry.callback;
	      state.pendingcb--;
	      cb(err);
	      entry = entry.next;
	    }
	    if (state.corkedRequestsFree) {
	      state.corkedRequestsFree.next = _this;
	    } else {
	      state.corkedRequestsFree = _this;
	    }
	  };
	}
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37), __webpack_require__(60).setImmediate))

/***/ }),
/* 60 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = Function.prototype.apply;

	// DOM APIs, for completeness

	exports.setTimeout = function() {
	  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
	};
	exports.setInterval = function() {
	  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
	};
	exports.clearTimeout =
	exports.clearInterval = function(timeout) {
	  if (timeout) {
	    timeout.close();
	  }
	};

	function Timeout(id, clearFn) {
	  this._id = id;
	  this._clearFn = clearFn;
	}
	Timeout.prototype.unref = Timeout.prototype.ref = function() {};
	Timeout.prototype.close = function() {
	  this._clearFn.call(window, this._id);
	};

	// Does not start the time, just sets up the members needed.
	exports.enroll = function(item, msecs) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = msecs;
	};

	exports.unenroll = function(item) {
	  clearTimeout(item._idleTimeoutId);
	  item._idleTimeout = -1;
	};

	exports._unrefActive = exports.active = function(item) {
	  clearTimeout(item._idleTimeoutId);

	  var msecs = item._idleTimeout;
	  if (msecs >= 0) {
	    item._idleTimeoutId = setTimeout(function onTimeout() {
	      if (item._onTimeout)
	        item._onTimeout();
	    }, msecs);
	  }
	};

	// setimmediate attaches itself to the global object
	__webpack_require__(61);
	exports.setImmediate = setImmediate;
	exports.clearImmediate = clearImmediate;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {
	    "use strict";

	    if (global.setImmediate) {
	        return;
	    }

	    var nextHandle = 1; // Spec says greater than zero
	    var tasksByHandle = {};
	    var currentlyRunningATask = false;
	    var doc = global.document;
	    var registerImmediate;

	    function setImmediate(callback) {
	      // Callback can either be a function or a string
	      if (typeof callback !== "function") {
	        callback = new Function("" + callback);
	      }
	      // Copy function arguments
	      var args = new Array(arguments.length - 1);
	      for (var i = 0; i < args.length; i++) {
	          args[i] = arguments[i + 1];
	      }
	      // Store and register the task
	      var task = { callback: callback, args: args };
	      tasksByHandle[nextHandle] = task;
	      registerImmediate(nextHandle);
	      return nextHandle++;
	    }

	    function clearImmediate(handle) {
	        delete tasksByHandle[handle];
	    }

	    function run(task) {
	        var callback = task.callback;
	        var args = task.args;
	        switch (args.length) {
	        case 0:
	            callback();
	            break;
	        case 1:
	            callback(args[0]);
	            break;
	        case 2:
	            callback(args[0], args[1]);
	            break;
	        case 3:
	            callback(args[0], args[1], args[2]);
	            break;
	        default:
	            callback.apply(undefined, args);
	            break;
	        }
	    }

	    function runIfPresent(handle) {
	        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."
	        // So if we're currently running a task, we'll need to delay this invocation.
	        if (currentlyRunningATask) {
	            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a
	            // "too much recursion" error.
	            setTimeout(runIfPresent, 0, handle);
	        } else {
	            var task = tasksByHandle[handle];
	            if (task) {
	                currentlyRunningATask = true;
	                try {
	                    run(task);
	                } finally {
	                    clearImmediate(handle);
	                    currentlyRunningATask = false;
	                }
	            }
	        }
	    }

	    function installNextTickImplementation() {
	        registerImmediate = function(handle) {
	            process.nextTick(function () { runIfPresent(handle); });
	        };
	    }

	    function canUsePostMessage() {
	        // The test against `importScripts` prevents this implementation from being installed inside a web worker,
	        // where `global.postMessage` means something completely different and can't be used for this purpose.
	        if (global.postMessage && !global.importScripts) {
	            var postMessageIsAsynchronous = true;
	            var oldOnMessage = global.onmessage;
	            global.onmessage = function() {
	                postMessageIsAsynchronous = false;
	            };
	            global.postMessage("", "*");
	            global.onmessage = oldOnMessage;
	            return postMessageIsAsynchronous;
	        }
	    }

	    function installPostMessageImplementation() {
	        // Installs an event handler on `global` for the `message` event: see
	        // * https://developer.mozilla.org/en/DOM/window.postMessage
	        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages

	        var messagePrefix = "setImmediate$" + Math.random() + "$";
	        var onGlobalMessage = function(event) {
	            if (event.source === global &&
	                typeof event.data === "string" &&
	                event.data.indexOf(messagePrefix) === 0) {
	                runIfPresent(+event.data.slice(messagePrefix.length));
	            }
	        };

	        if (global.addEventListener) {
	            global.addEventListener("message", onGlobalMessage, false);
	        } else {
	            global.attachEvent("onmessage", onGlobalMessage);
	        }

	        registerImmediate = function(handle) {
	            global.postMessage(messagePrefix + handle, "*");
	        };
	    }

	    function installMessageChannelImplementation() {
	        var channel = new MessageChannel();
	        channel.port1.onmessage = function(event) {
	            var handle = event.data;
	            runIfPresent(handle);
	        };

	        registerImmediate = function(handle) {
	            channel.port2.postMessage(handle);
	        };
	    }

	    function installReadyStateChangeImplementation() {
	        var html = doc.documentElement;
	        registerImmediate = function(handle) {
	            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
	            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
	            var script = doc.createElement("script");
	            script.onreadystatechange = function () {
	                runIfPresent(handle);
	                script.onreadystatechange = null;
	                html.removeChild(script);
	                script = null;
	            };
	            html.appendChild(script);
	        };
	    }

	    function installSetTimeoutImplementation() {
	        registerImmediate = function(handle) {
	            setTimeout(runIfPresent, 0, handle);
	        };
	    }

	    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.
	    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);
	    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;

	    // Don't get fooled by e.g. browserify environments.
	    if ({}.toString.call(global.process) === "[object process]") {
	        // For Node.js before 0.9
	        installNextTickImplementation();

	    } else if (canUsePostMessage()) {
	        // For non-IE10 modern browsers
	        installPostMessageImplementation();

	    } else if (global.MessageChannel) {
	        // For web workers, where supported
	        installMessageChannelImplementation();

	    } else if (doc && "onreadystatechange" in doc.createElement("script")) {
	        // For IE 6–8
	        installReadyStateChangeImplementation();

	    } else {
	        // For older browsers
	        installSetTimeoutImplementation();
	    }

	    attachTo.setImmediate = setImmediate;
	    attachTo.clearImmediate = clearImmediate;
	}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(37)))

/***/ }),
/* 62 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {
	/**
	 * Module exports.
	 */

	module.exports = deprecate;

	/**
	 * Mark that a method should not be used.
	 * Returns a modified function which warns once by default.
	 *
	 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
	 *
	 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
	 * will throw an Error when invoked.
	 *
	 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
	 * will invoke `console.trace()` instead of `console.error()`.
	 *
	 * @param {Function} fn - the function to deprecate
	 * @param {String} msg - the string to print to the console when `fn` is invoked
	 * @returns {Function} a new "deprecated" version of `fn`
	 * @api public
	 */

	function deprecate (fn, msg) {
	  if (config('noDeprecation')) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (config('throwDeprecation')) {
	        throw new Error(msg);
	      } else if (config('traceDeprecation')) {
	        console.trace(msg);
	      } else {
	        console.warn(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	}

	/**
	 * Checks `localStorage` for boolean values for the given `name`.
	 *
	 * @param {String} name
	 * @returns {Boolean}
	 * @api private
	 */

	function config (name) {
	  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
	  try {
	    if (!global.localStorage) return false;
	  } catch (_) {
	    return false;
	  }
	  var val = global.localStorage[name];
	  if (null == val) return false;
	  return String(val).toLowerCase() === 'true';
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var Buffer = __webpack_require__(51).Buffer;

	var isBufferEncoding = Buffer.isEncoding
	  || function(encoding) {
	       switch (encoding && encoding.toLowerCase()) {
	         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
	         default: return false;
	       }
	     }


	function assertEncoding(encoding) {
	  if (encoding && !isBufferEncoding(encoding)) {
	    throw new Error('Unknown encoding: ' + encoding);
	  }
	}

	// StringDecoder provides an interface for efficiently splitting a series of
	// buffers into a series of JS strings without breaking apart multi-byte
	// characters. CESU-8 is handled as part of the UTF-8 encoding.
	//
	// @TODO Handling all encodings inside a single object makes it very difficult
	// to reason about this code, so it should be split up in the future.
	// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
	// points as used by CESU-8.
	var StringDecoder = exports.StringDecoder = function(encoding) {
	  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
	  assertEncoding(encoding);
	  switch (this.encoding) {
	    case 'utf8':
	      // CESU-8 represents each of Surrogate Pair by 3-bytes
	      this.surrogateSize = 3;
	      break;
	    case 'ucs2':
	    case 'utf16le':
	      // UTF-16 represents each of Surrogate Pair by 2-bytes
	      this.surrogateSize = 2;
	      this.detectIncompleteChar = utf16DetectIncompleteChar;
	      break;
	    case 'base64':
	      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
	      this.surrogateSize = 3;
	      this.detectIncompleteChar = base64DetectIncompleteChar;
	      break;
	    default:
	      this.write = passThroughWrite;
	      return;
	  }

	  // Enough space to store all bytes of a single character. UTF-8 needs 4
	  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
	  this.charBuffer = new Buffer(6);
	  // Number of bytes received for the current incomplete multi-byte character.
	  this.charReceived = 0;
	  // Number of bytes expected for the current incomplete multi-byte character.
	  this.charLength = 0;
	};


	// write decodes the given buffer and returns it as JS string that is
	// guaranteed to not contain any partial multi-byte characters. Any partial
	// character found at the end of the buffer is buffered up, and will be
	// returned when calling write again with the remaining bytes.
	//
	// Note: Converting a Buffer containing an orphan surrogate to a String
	// currently works, but converting a String to a Buffer (via `new Buffer`, or
	// Buffer#write) will replace incomplete surrogates with the unicode
	// replacement character. See https://codereview.chromium.org/121173009/ .
	StringDecoder.prototype.write = function(buffer) {
	  var charStr = '';
	  // if our last write ended with an incomplete multibyte character
	  while (this.charLength) {
	    // determine how many remaining bytes this buffer has to offer for this char
	    var available = (buffer.length >= this.charLength - this.charReceived) ?
	        this.charLength - this.charReceived :
	        buffer.length;

	    // add the new bytes to the char buffer
	    buffer.copy(this.charBuffer, this.charReceived, 0, available);
	    this.charReceived += available;

	    if (this.charReceived < this.charLength) {
	      // still not enough chars in this buffer? wait for more ...
	      return '';
	    }

	    // remove bytes belonging to the current character from the buffer
	    buffer = buffer.slice(available, buffer.length);

	    // get the character that was split
	    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

	    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	    var charCode = charStr.charCodeAt(charStr.length - 1);
	    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	      this.charLength += this.surrogateSize;
	      charStr = '';
	      continue;
	    }
	    this.charReceived = this.charLength = 0;

	    // if there are no more bytes in this buffer, just emit our char
	    if (buffer.length === 0) {
	      return charStr;
	    }
	    break;
	  }

	  // determine and set charLength / charReceived
	  this.detectIncompleteChar(buffer);

	  var end = buffer.length;
	  if (this.charLength) {
	    // buffer the incomplete character bytes we got
	    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
	    end -= this.charReceived;
	  }

	  charStr += buffer.toString(this.encoding, 0, end);

	  var end = charStr.length - 1;
	  var charCode = charStr.charCodeAt(end);
	  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
	  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
	    var size = this.surrogateSize;
	    this.charLength += size;
	    this.charReceived += size;
	    this.charBuffer.copy(this.charBuffer, size, 0, size);
	    buffer.copy(this.charBuffer, 0, 0, size);
	    return charStr.substring(0, end);
	  }

	  // or just emit the charStr
	  return charStr;
	};

	// detectIncompleteChar determines if there is an incomplete UTF-8 character at
	// the end of the given buffer. If so, it sets this.charLength to the byte
	// length that character, and sets this.charReceived to the number of bytes
	// that are available for this character.
	StringDecoder.prototype.detectIncompleteChar = function(buffer) {
	  // determine how many bytes we have to check at the end of this buffer
	  var i = (buffer.length >= 3) ? 3 : buffer.length;

	  // Figure out if one of the last i bytes of our buffer announces an
	  // incomplete char.
	  for (; i > 0; i--) {
	    var c = buffer[buffer.length - i];

	    // See http://en.wikipedia.org/wiki/UTF-8#Description

	    // 110XXXXX
	    if (i == 1 && c >> 5 == 0x06) {
	      this.charLength = 2;
	      break;
	    }

	    // 1110XXXX
	    if (i <= 2 && c >> 4 == 0x0E) {
	      this.charLength = 3;
	      break;
	    }

	    // 11110XXX
	    if (i <= 3 && c >> 3 == 0x1E) {
	      this.charLength = 4;
	      break;
	    }
	  }
	  this.charReceived = i;
	};

	StringDecoder.prototype.end = function(buffer) {
	  var res = '';
	  if (buffer && buffer.length)
	    res = this.write(buffer);

	  if (this.charReceived) {
	    var cr = this.charReceived;
	    var buf = this.charBuffer;
	    var enc = this.encoding;
	    res += buf.slice(0, cr).toString(enc);
	  }

	  return res;
	};

	function passThroughWrite(buffer) {
	  return buffer.toString(this.encoding);
	}

	function utf16DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 2;
	  this.charLength = this.charReceived ? 2 : 0;
	}

	function base64DetectIncompleteChar(buffer) {
	  this.charReceived = buffer.length % 3;
	  this.charLength = this.charReceived ? 3 : 0;
	}


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	// a transform stream is a readable/writable stream where you do
	// something with the data.  Sometimes it's called a "filter",
	// but that's not a great name for it, since that implies a thing where
	// some bits pass through, and others are simply ignored.  (That would
	// be a valid example of a transform, of course.)
	//
	// While the output is causally related to the input, it's not a
	// necessarily symmetric or synchronous transformation.  For example,
	// a zlib stream might take multiple plain-text writes(), and then
	// emit a single compressed chunk some time in the future.
	//
	// Here's how this works:
	//
	// The Transform stream has all the aspects of the readable and writable
	// stream classes.  When you write(chunk), that calls _write(chunk,cb)
	// internally, and returns false if there's a lot of pending writes
	// buffered up.  When you call read(), that calls _read(n) until
	// there's enough pending readable data buffered up.
	//
	// In a transform stream, the written data is placed in a buffer.  When
	// _read(n) is called, it transforms the queued up data, calling the
	// buffered _write cb's as it consumes chunks.  If consuming a single
	// written chunk would result in multiple output chunks, then the first
	// outputted bit calls the readcb, and subsequent chunks just go into
	// the read buffer, and will cause it to emit 'readable' if necessary.
	//
	// This way, back-pressure is actually determined by the reading side,
	// since _read has to be called to start processing a new chunk.  However,
	// a pathological inflate type of transform can cause excessive buffering
	// here.  For example, imagine a stream where every byte of input is
	// interpreted as an integer from 0-255, and then results in that many
	// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
	// 1kb of data being output.  In this case, you could write a very small
	// amount of input, and end up with a very large amount of output.  In
	// such a pathological inflating mechanism, there'd be no way to tell
	// the system to stop doing the transform.  A single 4MB write could
	// cause the system to run out of memory.
	//
	// However, even in such a pathological case, only a single written chunk
	// would be consumed, and then the rest would wait (un-transformed) until
	// the results of the previous transformed chunk were consumed.

	'use strict';

	module.exports = Transform;

	var Duplex = __webpack_require__(58);

	/*<replacement>*/
	var util = __webpack_require__(55);
	util.inherits = __webpack_require__(46);
	/*</replacement>*/

	util.inherits(Transform, Duplex);

	function TransformState(stream) {
	  this.afterTransform = function (er, data) {
	    return afterTransform(stream, er, data);
	  };

	  this.needTransform = false;
	  this.transforming = false;
	  this.writecb = null;
	  this.writechunk = null;
	  this.writeencoding = null;
	}

	function afterTransform(stream, er, data) {
	  var ts = stream._transformState;
	  ts.transforming = false;

	  var cb = ts.writecb;

	  if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

	  ts.writechunk = null;
	  ts.writecb = null;

	  if (data !== null && data !== undefined) stream.push(data);

	  cb(er);

	  var rs = stream._readableState;
	  rs.reading = false;
	  if (rs.needReadable || rs.length < rs.highWaterMark) {
	    stream._read(rs.highWaterMark);
	  }
	}

	function Transform(options) {
	  if (!(this instanceof Transform)) return new Transform(options);

	  Duplex.call(this, options);

	  this._transformState = new TransformState(this);

	  // when the writable side finishes, then flush out anything remaining.
	  var stream = this;

	  // start out asking for a readable event once data is transformed.
	  this._readableState.needReadable = true;

	  // we have implemented the _read method, and done the other things
	  // that Readable wants before the first _read call, so unset the
	  // sync guard flag.
	  this._readableState.sync = false;

	  if (options) {
	    if (typeof options.transform === 'function') this._transform = options.transform;

	    if (typeof options.flush === 'function') this._flush = options.flush;
	  }

	  this.once('prefinish', function () {
	    if (typeof this._flush === 'function') this._flush(function (er) {
	      done(stream, er);
	    });else done(stream);
	  });
	}

	Transform.prototype.push = function (chunk, encoding) {
	  this._transformState.needTransform = false;
	  return Duplex.prototype.push.call(this, chunk, encoding);
	};

	// This is the part where you do stuff!
	// override this function in implementation classes.
	// 'chunk' is an input chunk.
	//
	// Call `push(newChunk)` to pass along transformed output
	// to the readable side.  You may call 'push' zero or more times.
	//
	// Call `cb(err)` when you are done with this chunk.  If you pass
	// an error, then that'll put the hurt on the whole operation.  If you
	// never call cb(), then you'll never get another chunk.
	Transform.prototype._transform = function (chunk, encoding, cb) {
	  throw new Error('Not implemented');
	};

	Transform.prototype._write = function (chunk, encoding, cb) {
	  var ts = this._transformState;
	  ts.writecb = cb;
	  ts.writechunk = chunk;
	  ts.writeencoding = encoding;
	  if (!ts.transforming) {
	    var rs = this._readableState;
	    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
	  }
	};

	// Doesn't matter what the args are here.
	// _transform does all the work.
	// That we got here means that the readable side wants more data.
	Transform.prototype._read = function (n) {
	  var ts = this._transformState;

	  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
	    ts.transforming = true;
	    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
	  } else {
	    // mark that we need a transform, so that any data that comes in
	    // will get processed, now that we've asked for it.
	    ts.needTransform = true;
	  }
	};

	function done(stream, er) {
	  if (er) return stream.emit('error', er);

	  // if there's nothing in the write buffer, then that means
	  // that nothing more will ever be provided
	  var ws = stream._writableState;
	  var ts = stream._transformState;

	  if (ws.length) throw new Error('Calling transform done when ws.length != 0');

	  if (ts.transforming) throw new Error('Calling transform done when still transforming');

	  return stream.push(null);
	}

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	// a passthrough stream.
	// basically just the most minimal sort of Transform stream.
	// Every written chunk gets output as-is.

	'use strict';

	module.exports = PassThrough;

	var Transform = __webpack_require__(64);

	/*<replacement>*/
	var util = __webpack_require__(55);
	util.inherits = __webpack_require__(46);
	/*</replacement>*/

	util.inherits(PassThrough, Transform);

	function PassThrough(options) {
	  if (!(this instanceof PassThrough)) return new PassThrough(options);

	  Transform.call(this, options);
	}

	PassThrough.prototype._transform = function (chunk, encoding, cb) {
	  cb(null, chunk);
	};

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(59)


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(58)


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(64)


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(65)


/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

	var Stream = __webpack_require__(45);
	var util = __webpack_require__(71);

	var Response = module.exports = function (res) {
	    this.offset = 0;
	    this.readable = true;
	};

	util.inherits(Response, Stream);

	var capable = {
	    streaming : true,
	    status2 : true
	};

	function parseHeaders (res) {
	    var lines = res.getAllResponseHeaders().split(/\r?\n/);
	    var headers = {};
	    for (var i = 0; i < lines.length; i++) {
	        var line = lines[i];
	        if (line === '') continue;
	        
	        var m = line.match(/^([^:]+):\s*(.*)/);
	        if (m) {
	            var key = m[1].toLowerCase(), value = m[2];
	            
	            if (headers[key] !== undefined) {
	            
	                if (isArray(headers[key])) {
	                    headers[key].push(value);
	                }
	                else {
	                    headers[key] = [ headers[key], value ];
	                }
	            }
	            else {
	                headers[key] = value;
	            }
	        }
	        else {
	            headers[line] = true;
	        }
	    }
	    return headers;
	}

	Response.prototype.getResponse = function (xhr) {
	    var respType = String(xhr.responseType).toLowerCase();
	    if (respType === 'blob') return xhr.responseBlob || xhr.response;
	    if (respType === 'arraybuffer') return xhr.response;
	    return xhr.responseText;
	}

	Response.prototype.getHeader = function (key) {
	    return this.headers[key.toLowerCase()];
	};

	Response.prototype.handle = function (res) {
	    if (res.readyState === 2 && capable.status2) {
	        try {
	            this.statusCode = res.status;
	            this.headers = parseHeaders(res);
	        }
	        catch (err) {
	            capable.status2 = false;
	        }
	        
	        if (capable.status2) {
	            this.emit('ready');
	        }
	    }
	    else if (capable.streaming && res.readyState === 3) {
	        try {
	            if (!this.statusCode) {
	                this.statusCode = res.status;
	                this.headers = parseHeaders(res);
	                this.emit('ready');
	            }
	        }
	        catch (err) {}
	        
	        try {
	            this._emitData(res);
	        }
	        catch (err) {
	            capable.streaming = false;
	        }
	    }
	    else if (res.readyState === 4) {
	        if (!this.statusCode) {
	            this.statusCode = res.status;
	            this.emit('ready');
	        }
	        this._emitData(res);
	        
	        if (res.error) {
	            this.emit('error', this.getResponse(res));
	        }
	        else this.emit('end');
	        
	        this.emit('close');
	    }
	};

	Response.prototype._emitData = function (res) {
	    var respBody = this.getResponse(res);
	    if (respBody.toString().match(/ArrayBuffer/)) {
	        this.emit('data', new Uint8Array(respBody, this.offset));
	        this.offset = respBody.byteLength;
	        return;
	    }
	    if (respBody.length > this.offset) {
	        this.emit('data', respBody.slice(this.offset));
	        this.offset = respBody.length;
	    }
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(72);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(73);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(37)))

/***/ }),
/* 72 */
/***/ (function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ }),
/* 73 */
/***/ (function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	;(function () {

	  var object =  true ? exports : this; // #8: web workers
	  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

	  function InvalidCharacterError(message) {
	    this.message = message;
	  }
	  InvalidCharacterError.prototype = new Error;
	  InvalidCharacterError.prototype.name = 'InvalidCharacterError';

	  // encoder
	  // [https://gist.github.com/999166] by [https://github.com/nignag]
	  object.btoa || (
	  object.btoa = function (input) {
	    for (
	      // initialize result and counter
	      var block, charCode, idx = 0, map = chars, output = '';
	      // if the next input index does not exist:
	      //   change the mapping table to "="
	      //   check if d has no fractional digits
	      input.charAt(idx | 0) || (map = '=', idx % 1);
	      // "8 - idx % 1 * 8" generates the sequence 2, 4, 6, 8
	      output += map.charAt(63 & block >> 8 - idx % 1 * 8)
	    ) {
	      charCode = input.charCodeAt(idx += 3/4);
	      if (charCode > 0xFF) {
	        throw new InvalidCharacterError("'btoa' failed: The string to be encoded contains characters outside of the Latin1 range.");
	      }
	      block = block << 8 | charCode;
	    }
	    return output;
	  });

	  // decoder
	  // [https://gist.github.com/1020396] by [https://github.com/atk]
	  object.atob || (
	  object.atob = function (input) {
	    input = input.replace(/=+$/, '');
	    if (input.length % 4 == 1) {
	      throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
	    }
	    for (
	      // initialize result and counters
	      var bc = 0, bs, buffer, idx = 0, output = '';
	      // get next character
	      buffer = input.charAt(idx++);
	      // character found in table? initialize bit storage and add its ascii value;
	      ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,
	        // and if not first of each 4 characters,
	        // convert the first 8 bits to one ascii character
	        bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0
	    ) {
	      // try to find character in table (0-63, not found => -1)
	      buffer = chars.indexOf(buffer);
	    }
	    return output;
	  });

	}());


/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var punycode = __webpack_require__(76);

	exports.parse = urlParse;
	exports.resolve = urlResolve;
	exports.resolveObject = urlResolveObject;
	exports.format = urlFormat;

	exports.Url = Url;

	function Url() {
	  this.protocol = null;
	  this.slashes = null;
	  this.auth = null;
	  this.host = null;
	  this.port = null;
	  this.hostname = null;
	  this.hash = null;
	  this.search = null;
	  this.query = null;
	  this.pathname = null;
	  this.path = null;
	  this.href = null;
	}

	// Reference: RFC 3986, RFC 1808, RFC 2396

	// define these here so at least they only have to be
	// compiled once on the first module load.
	var protocolPattern = /^([a-z0-9.+-]+:)/i,
	    portPattern = /:[0-9]*$/,

	    // RFC 2396: characters reserved for delimiting URLs.
	    // We actually just auto-escape these.
	    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

	    // RFC 2396: characters not allowed for various reasons.
	    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

	    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
	    autoEscape = ['\''].concat(unwise),
	    // Characters that are never ever allowed in a hostname.
	    // Note that any invalid chars are also handled, but these
	    // are the ones that are *expected* to be seen, so we fast-path
	    // them.
	    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
	    hostEndingChars = ['/', '?', '#'],
	    hostnameMaxLen = 255,
	    hostnamePartPattern = /^[a-z0-9A-Z_-]{0,63}$/,
	    hostnamePartStart = /^([a-z0-9A-Z_-]{0,63})(.*)$/,
	    // protocols that can allow "unsafe" and "unwise" chars.
	    unsafeProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that never have a hostname.
	    hostlessProtocol = {
	      'javascript': true,
	      'javascript:': true
	    },
	    // protocols that always contain a // bit.
	    slashedProtocol = {
	      'http': true,
	      'https': true,
	      'ftp': true,
	      'gopher': true,
	      'file': true,
	      'http:': true,
	      'https:': true,
	      'ftp:': true,
	      'gopher:': true,
	      'file:': true
	    },
	    querystring = __webpack_require__(78);

	function urlParse(url, parseQueryString, slashesDenoteHost) {
	  if (url && isObject(url) && url instanceof Url) return url;

	  var u = new Url;
	  u.parse(url, parseQueryString, slashesDenoteHost);
	  return u;
	}

	Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
	  if (!isString(url)) {
	    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
	  }

	  var rest = url;

	  // trim before proceeding.
	  // This is to support parse stuff like "  http://foo.com  \n"
	  rest = rest.trim();

	  var proto = protocolPattern.exec(rest);
	  if (proto) {
	    proto = proto[0];
	    var lowerProto = proto.toLowerCase();
	    this.protocol = lowerProto;
	    rest = rest.substr(proto.length);
	  }

	  // figure out if it's got a host
	  // user@server is *always* interpreted as a hostname, and url
	  // resolution will treat //foo/bar as host=foo,path=bar because that's
	  // how the browser resolves relative URLs.
	  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
	    var slashes = rest.substr(0, 2) === '//';
	    if (slashes && !(proto && hostlessProtocol[proto])) {
	      rest = rest.substr(2);
	      this.slashes = true;
	    }
	  }

	  if (!hostlessProtocol[proto] &&
	      (slashes || (proto && !slashedProtocol[proto]))) {

	    // there's a hostname.
	    // the first instance of /, ?, ;, or # ends the host.
	    //
	    // If there is an @ in the hostname, then non-host chars *are* allowed
	    // to the left of the last @ sign, unless some host-ending character
	    // comes *before* the @-sign.
	    // URLs are obnoxious.
	    //
	    // ex:
	    // http://a@b@c/ => user:a@b host:c
	    // http://a@b?@c => user:a host:c path:/?@c

	    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
	    // Review our test case against browsers more comprehensively.

	    // find the first instance of any hostEndingChars
	    var hostEnd = -1;
	    for (var i = 0; i < hostEndingChars.length; i++) {
	      var hec = rest.indexOf(hostEndingChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }

	    // at this point, either we have an explicit point where the
	    // auth portion cannot go past, or the last @ char is the decider.
	    var auth, atSign;
	    if (hostEnd === -1) {
	      // atSign can be anywhere.
	      atSign = rest.lastIndexOf('@');
	    } else {
	      // atSign must be in auth portion.
	      // http://a@b/c@d => host:b auth:a path:/c@d
	      atSign = rest.lastIndexOf('@', hostEnd);
	    }

	    // Now we have a portion which is definitely the auth.
	    // Pull that off.
	    if (atSign !== -1) {
	      auth = rest.slice(0, atSign);
	      rest = rest.slice(atSign + 1);
	      this.auth = decodeURIComponent(auth);
	    }

	    // the host is the remaining to the left of the first non-host char
	    hostEnd = -1;
	    for (var i = 0; i < nonHostChars.length; i++) {
	      var hec = rest.indexOf(nonHostChars[i]);
	      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
	        hostEnd = hec;
	    }
	    // if we still have not hit it, then the entire thing is a host.
	    if (hostEnd === -1)
	      hostEnd = rest.length;

	    this.host = rest.slice(0, hostEnd);
	    rest = rest.slice(hostEnd);

	    // pull out port.
	    this.parseHost();

	    // we've indicated that there is a hostname,
	    // so even if it's empty, it has to be present.
	    this.hostname = this.hostname || '';

	    // if hostname begins with [ and ends with ]
	    // assume that it's an IPv6 address.
	    var ipv6Hostname = this.hostname[0] === '[' &&
	        this.hostname[this.hostname.length - 1] === ']';

	    // validate a little.
	    if (!ipv6Hostname) {
	      var hostparts = this.hostname.split(/\./);
	      for (var i = 0, l = hostparts.length; i < l; i++) {
	        var part = hostparts[i];
	        if (!part) continue;
	        if (!part.match(hostnamePartPattern)) {
	          var newpart = '';
	          for (var j = 0, k = part.length; j < k; j++) {
	            if (part.charCodeAt(j) > 127) {
	              // we replace non-ASCII char with a temporary placeholder
	              // we need this to make sure size of hostname is not
	              // broken by replacing non-ASCII by nothing
	              newpart += 'x';
	            } else {
	              newpart += part[j];
	            }
	          }
	          // we test again with ASCII char only
	          if (!newpart.match(hostnamePartPattern)) {
	            var validParts = hostparts.slice(0, i);
	            var notHost = hostparts.slice(i + 1);
	            var bit = part.match(hostnamePartStart);
	            if (bit) {
	              validParts.push(bit[1]);
	              notHost.unshift(bit[2]);
	            }
	            if (notHost.length) {
	              rest = '/' + notHost.join('.') + rest;
	            }
	            this.hostname = validParts.join('.');
	            break;
	          }
	        }
	      }
	    }

	    if (this.hostname.length > hostnameMaxLen) {
	      this.hostname = '';
	    } else {
	      // hostnames are always lower case.
	      this.hostname = this.hostname.toLowerCase();
	    }

	    if (!ipv6Hostname) {
	      // IDNA Support: Returns a puny coded representation of "domain".
	      // It only converts the part of the domain name that
	      // has non ASCII characters. I.e. it dosent matter if
	      // you call it with a domain that already is in ASCII.
	      var domainArray = this.hostname.split('.');
	      var newOut = [];
	      for (var i = 0; i < domainArray.length; ++i) {
	        var s = domainArray[i];
	        newOut.push(s.match(/[^A-Za-z0-9_-]/) ?
	            'xn--' + punycode.encode(s) : s);
	      }
	      this.hostname = newOut.join('.');
	    }

	    var p = this.port ? ':' + this.port : '';
	    var h = this.hostname || '';
	    this.host = h + p;
	    this.href += this.host;

	    // strip [ and ] from the hostname
	    // the host field still retains them, though
	    if (ipv6Hostname) {
	      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
	      if (rest[0] !== '/') {
	        rest = '/' + rest;
	      }
	    }
	  }

	  // now rest is set to the post-host stuff.
	  // chop off any delim chars.
	  if (!unsafeProtocol[lowerProto]) {

	    // First, make 100% sure that any "autoEscape" chars get
	    // escaped, even if encodeURIComponent doesn't think they
	    // need to be.
	    for (var i = 0, l = autoEscape.length; i < l; i++) {
	      var ae = autoEscape[i];
	      var esc = encodeURIComponent(ae);
	      if (esc === ae) {
	        esc = escape(ae);
	      }
	      rest = rest.split(ae).join(esc);
	    }
	  }


	  // chop off from the tail first.
	  var hash = rest.indexOf('#');
	  if (hash !== -1) {
	    // got a fragment string.
	    this.hash = rest.substr(hash);
	    rest = rest.slice(0, hash);
	  }
	  var qm = rest.indexOf('?');
	  if (qm !== -1) {
	    this.search = rest.substr(qm);
	    this.query = rest.substr(qm + 1);
	    if (parseQueryString) {
	      this.query = querystring.parse(this.query);
	    }
	    rest = rest.slice(0, qm);
	  } else if (parseQueryString) {
	    // no query string, but parseQueryString still requested
	    this.search = '';
	    this.query = {};
	  }
	  if (rest) this.pathname = rest;
	  if (slashedProtocol[lowerProto] &&
	      this.hostname && !this.pathname) {
	    this.pathname = '/';
	  }

	  //to support http.request
	  if (this.pathname || this.search) {
	    var p = this.pathname || '';
	    var s = this.search || '';
	    this.path = p + s;
	  }

	  // finally, reconstruct the href based on what has been validated.
	  this.href = this.format();
	  return this;
	};

	// format a parsed object into a url string
	function urlFormat(obj) {
	  // ensure it's an object, and not a string url.
	  // If it's an obj, this is a no-op.
	  // this way, you can call url_format() on strings
	  // to clean up potentially wonky urls.
	  if (isString(obj)) obj = urlParse(obj);
	  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
	  return obj.format();
	}

	Url.prototype.format = function() {
	  var auth = this.auth || '';
	  if (auth) {
	    auth = encodeURIComponent(auth);
	    auth = auth.replace(/%3A/i, ':');
	    auth += '@';
	  }

	  var protocol = this.protocol || '',
	      pathname = this.pathname || '',
	      hash = this.hash || '',
	      host = false,
	      query = '';

	  if (this.host) {
	    host = auth + this.host;
	  } else if (this.hostname) {
	    host = auth + (this.hostname.indexOf(':') === -1 ?
	        this.hostname :
	        '[' + this.hostname + ']');
	    if (this.port) {
	      host += ':' + this.port;
	    }
	  }

	  if (this.query &&
	      isObject(this.query) &&
	      Object.keys(this.query).length) {
	    query = querystring.stringify(this.query);
	  }

	  var search = this.search || (query && ('?' + query)) || '';

	  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

	  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
	  // unless they had them to begin with.
	  if (this.slashes ||
	      (!protocol || slashedProtocol[protocol]) && host !== false) {
	    host = '//' + (host || '');
	    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
	  } else if (!host) {
	    host = '';
	  }

	  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
	  if (search && search.charAt(0) !== '?') search = '?' + search;

	  pathname = pathname.replace(/[?#]/g, function(match) {
	    return encodeURIComponent(match);
	  });
	  search = search.replace('#', '%23');

	  return protocol + host + pathname + search + hash;
	};

	function urlResolve(source, relative) {
	  return urlParse(source, false, true).resolve(relative);
	}

	Url.prototype.resolve = function(relative) {
	  return this.resolveObject(urlParse(relative, false, true)).format();
	};

	function urlResolveObject(source, relative) {
	  if (!source) return relative;
	  return urlParse(source, false, true).resolveObject(relative);
	}

	Url.prototype.resolveObject = function(relative) {
	  if (isString(relative)) {
	    var rel = new Url();
	    rel.parse(relative, false, true);
	    relative = rel;
	  }

	  var result = new Url();
	  Object.keys(this).forEach(function(k) {
	    result[k] = this[k];
	  }, this);

	  // hash is always overridden, no matter what.
	  // even href="" will remove it.
	  result.hash = relative.hash;

	  // if the relative url is empty, then there's nothing left to do here.
	  if (relative.href === '') {
	    result.href = result.format();
	    return result;
	  }

	  // hrefs like //foo/bar always cut to the protocol.
	  if (relative.slashes && !relative.protocol) {
	    // take everything except the protocol from relative
	    Object.keys(relative).forEach(function(k) {
	      if (k !== 'protocol')
	        result[k] = relative[k];
	    });

	    //urlParse appends trailing / to urls like http://www.example.com
	    if (slashedProtocol[result.protocol] &&
	        result.hostname && !result.pathname) {
	      result.path = result.pathname = '/';
	    }

	    result.href = result.format();
	    return result;
	  }

	  if (relative.protocol && relative.protocol !== result.protocol) {
	    // if it's a known url protocol, then changing
	    // the protocol does weird things
	    // first, if it's not file:, then we MUST have a host,
	    // and if there was a path
	    // to begin with, then we MUST have a path.
	    // if it is file:, then the host is dropped,
	    // because that's known to be hostless.
	    // anything else is assumed to be absolute.
	    if (!slashedProtocol[relative.protocol]) {
	      Object.keys(relative).forEach(function(k) {
	        result[k] = relative[k];
	      });
	      result.href = result.format();
	      return result;
	    }

	    result.protocol = relative.protocol;
	    if (!relative.host && !hostlessProtocol[relative.protocol]) {
	      var relPath = (relative.pathname || '').split('/');
	      while (relPath.length && !(relative.host = relPath.shift()));
	      if (!relative.host) relative.host = '';
	      if (!relative.hostname) relative.hostname = '';
	      if (relPath[0] !== '') relPath.unshift('');
	      if (relPath.length < 2) relPath.unshift('');
	      result.pathname = relPath.join('/');
	    } else {
	      result.pathname = relative.pathname;
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    result.host = relative.host || '';
	    result.auth = relative.auth;
	    result.hostname = relative.hostname || relative.host;
	    result.port = relative.port;
	    // to support http.request
	    if (result.pathname || result.search) {
	      var p = result.pathname || '';
	      var s = result.search || '';
	      result.path = p + s;
	    }
	    result.slashes = result.slashes || relative.slashes;
	    result.href = result.format();
	    return result;
	  }

	  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
	      isRelAbs = (
	          relative.host ||
	          relative.pathname && relative.pathname.charAt(0) === '/'
	      ),
	      mustEndAbs = (isRelAbs || isSourceAbs ||
	                    (result.host && relative.pathname)),
	      removeAllDots = mustEndAbs,
	      srcPath = result.pathname && result.pathname.split('/') || [],
	      relPath = relative.pathname && relative.pathname.split('/') || [],
	      psychotic = result.protocol && !slashedProtocol[result.protocol];

	  // if the url is a non-slashed url, then relative
	  // links like ../.. should be able
	  // to crawl up to the hostname, as well.  This is strange.
	  // result.protocol has already been set by now.
	  // Later on, put the first path part into the host field.
	  if (psychotic) {
	    result.hostname = '';
	    result.port = null;
	    if (result.host) {
	      if (srcPath[0] === '') srcPath[0] = result.host;
	      else srcPath.unshift(result.host);
	    }
	    result.host = '';
	    if (relative.protocol) {
	      relative.hostname = null;
	      relative.port = null;
	      if (relative.host) {
	        if (relPath[0] === '') relPath[0] = relative.host;
	        else relPath.unshift(relative.host);
	      }
	      relative.host = null;
	    }
	    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
	  }

	  if (isRelAbs) {
	    // it's absolute.
	    result.host = (relative.host || relative.host === '') ?
	                  relative.host : result.host;
	    result.hostname = (relative.hostname || relative.hostname === '') ?
	                      relative.hostname : result.hostname;
	    result.search = relative.search;
	    result.query = relative.query;
	    srcPath = relPath;
	    // fall through to the dot-handling below.
	  } else if (relPath.length) {
	    // it's relative
	    // throw away the existing file, and take the new path instead.
	    if (!srcPath) srcPath = [];
	    srcPath.pop();
	    srcPath = srcPath.concat(relPath);
	    result.search = relative.search;
	    result.query = relative.query;
	  } else if (!isNullOrUndefined(relative.search)) {
	    // just pull out the search.
	    // like href='?foo'.
	    // Put this after the other two cases because it simplifies the booleans
	    if (psychotic) {
	      result.hostname = result.host = srcPath.shift();
	      //occationaly the auth can get stuck only in host
	      //this especialy happens in cases like
	      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	      var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                       result.host.split('@') : false;
	      if (authInHost) {
	        result.auth = authInHost.shift();
	        result.host = result.hostname = authInHost.shift();
	      }
	    }
	    result.search = relative.search;
	    result.query = relative.query;
	    //to support http.request
	    if (!isNull(result.pathname) || !isNull(result.search)) {
	      result.path = (result.pathname ? result.pathname : '') +
	                    (result.search ? result.search : '');
	    }
	    result.href = result.format();
	    return result;
	  }

	  if (!srcPath.length) {
	    // no path at all.  easy.
	    // we've already handled the other stuff above.
	    result.pathname = null;
	    //to support http.request
	    if (result.search) {
	      result.path = '/' + result.search;
	    } else {
	      result.path = null;
	    }
	    result.href = result.format();
	    return result;
	  }

	  // if a url ENDs in . or .., then it must get a trailing slash.
	  // however, if it ends in anything else non-slashy,
	  // then it must NOT get a trailing slash.
	  var last = srcPath.slice(-1)[0];
	  var hasTrailingSlash = (
	      (result.host || relative.host) && (last === '.' || last === '..') ||
	      last === '');

	  // strip single dots, resolve double dots to parent dir
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = srcPath.length; i >= 0; i--) {
	    last = srcPath[i];
	    if (last == '.') {
	      srcPath.splice(i, 1);
	    } else if (last === '..') {
	      srcPath.splice(i, 1);
	      up++;
	    } else if (up) {
	      srcPath.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (!mustEndAbs && !removeAllDots) {
	    for (; up--; up) {
	      srcPath.unshift('..');
	    }
	  }

	  if (mustEndAbs && srcPath[0] !== '' &&
	      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
	    srcPath.unshift('');
	  }

	  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
	    srcPath.push('');
	  }

	  var isAbsolute = srcPath[0] === '' ||
	      (srcPath[0] && srcPath[0].charAt(0) === '/');

	  // put the host back
	  if (psychotic) {
	    result.hostname = result.host = isAbsolute ? '' :
	                                    srcPath.length ? srcPath.shift() : '';
	    //occationaly the auth can get stuck only in host
	    //this especialy happens in cases like
	    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
	    var authInHost = result.host && result.host.indexOf('@') > 0 ?
	                     result.host.split('@') : false;
	    if (authInHost) {
	      result.auth = authInHost.shift();
	      result.host = result.hostname = authInHost.shift();
	    }
	  }

	  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

	  if (mustEndAbs && !isAbsolute) {
	    srcPath.unshift('');
	  }

	  if (!srcPath.length) {
	    result.pathname = null;
	    result.path = null;
	  } else {
	    result.pathname = srcPath.join('/');
	  }

	  //to support request.http
	  if (!isNull(result.pathname) || !isNull(result.search)) {
	    result.path = (result.pathname ? result.pathname : '') +
	                  (result.search ? result.search : '');
	  }
	  result.auth = relative.auth || result.auth;
	  result.slashes = result.slashes || relative.slashes;
	  result.href = result.format();
	  return result;
	};

	Url.prototype.parseHost = function() {
	  var host = this.host;
	  var port = portPattern.exec(host);
	  if (port) {
	    port = port[0];
	    if (port !== ':') {
	      this.port = port.substr(1);
	    }
	    host = host.substr(0, host.length - port.length);
	  }
	  if (host) this.hostname = host;
	};

	function isString(arg) {
	  return typeof arg === "string";
	}

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}

	function isNull(arg) {
	  return arg === null;
	}
	function isNullOrUndefined(arg) {
	  return  arg == null;
	}


/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/punycode v1.3.2 by @mathias */
	;(function(root) {

		/** Detect free variables */
		var freeExports = typeof exports == 'object' && exports &&
			!exports.nodeType && exports;
		var freeModule = typeof module == 'object' && module &&
			!module.nodeType && module;
		var freeGlobal = typeof global == 'object' && global;
		if (
			freeGlobal.global === freeGlobal ||
			freeGlobal.window === freeGlobal ||
			freeGlobal.self === freeGlobal
		) {
			root = freeGlobal;
		}

		/**
		 * The `punycode` object.
		 * @name punycode
		 * @type Object
		 */
		var punycode,

		/** Highest positive signed 32-bit float value */
		maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

		/** Bootstring parameters */
		base = 36,
		tMin = 1,
		tMax = 26,
		skew = 38,
		damp = 700,
		initialBias = 72,
		initialN = 128, // 0x80
		delimiter = '-', // '\x2D'

		/** Regular expressions */
		regexPunycode = /^xn--/,
		regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
		regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

		/** Error messages */
		errors = {
			'overflow': 'Overflow: input needs wider integers to process',
			'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
			'invalid-input': 'Invalid input'
		},

		/** Convenience shortcuts */
		baseMinusTMin = base - tMin,
		floor = Math.floor,
		stringFromCharCode = String.fromCharCode,

		/** Temporary variable */
		key;

		/*--------------------------------------------------------------------------*/

		/**
		 * A generic error utility function.
		 * @private
		 * @param {String} type The error type.
		 * @returns {Error} Throws a `RangeError` with the applicable error message.
		 */
		function error(type) {
			throw RangeError(errors[type]);
		}

		/**
		 * A generic `Array#map` utility function.
		 * @private
		 * @param {Array} array The array to iterate over.
		 * @param {Function} callback The function that gets called for every array
		 * item.
		 * @returns {Array} A new array of values returned by the callback function.
		 */
		function map(array, fn) {
			var length = array.length;
			var result = [];
			while (length--) {
				result[length] = fn(array[length]);
			}
			return result;
		}

		/**
		 * A simple `Array#map`-like wrapper to work with domain name strings or email
		 * addresses.
		 * @private
		 * @param {String} domain The domain name or email address.
		 * @param {Function} callback The function that gets called for every
		 * character.
		 * @returns {Array} A new string of characters returned by the callback
		 * function.
		 */
		function mapDomain(string, fn) {
			var parts = string.split('@');
			var result = '';
			if (parts.length > 1) {
				// In email addresses, only the domain name should be punycoded. Leave
				// the local part (i.e. everything up to `@`) intact.
				result = parts[0] + '@';
				string = parts[1];
			}
			// Avoid `split(regex)` for IE8 compatibility. See #17.
			string = string.replace(regexSeparators, '\x2E');
			var labels = string.split('.');
			var encoded = map(labels, fn).join('.');
			return result + encoded;
		}

		/**
		 * Creates an array containing the numeric code points of each Unicode
		 * character in the string. While JavaScript uses UCS-2 internally,
		 * this function will convert a pair of surrogate halves (each of which
		 * UCS-2 exposes as separate characters) into a single code point,
		 * matching UTF-16.
		 * @see `punycode.ucs2.encode`
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode.ucs2
		 * @name decode
		 * @param {String} string The Unicode input string (UCS-2).
		 * @returns {Array} The new array of code points.
		 */
		function ucs2decode(string) {
			var output = [],
			    counter = 0,
			    length = string.length,
			    value,
			    extra;
			while (counter < length) {
				value = string.charCodeAt(counter++);
				if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
					// high surrogate, and there is a next character
					extra = string.charCodeAt(counter++);
					if ((extra & 0xFC00) == 0xDC00) { // low surrogate
						output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
					} else {
						// unmatched surrogate; only append this code unit, in case the next
						// code unit is the high surrogate of a surrogate pair
						output.push(value);
						counter--;
					}
				} else {
					output.push(value);
				}
			}
			return output;
		}

		/**
		 * Creates a string based on an array of numeric code points.
		 * @see `punycode.ucs2.decode`
		 * @memberOf punycode.ucs2
		 * @name encode
		 * @param {Array} codePoints The array of numeric code points.
		 * @returns {String} The new Unicode string (UCS-2).
		 */
		function ucs2encode(array) {
			return map(array, function(value) {
				var output = '';
				if (value > 0xFFFF) {
					value -= 0x10000;
					output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
					value = 0xDC00 | value & 0x3FF;
				}
				output += stringFromCharCode(value);
				return output;
			}).join('');
		}

		/**
		 * Converts a basic code point into a digit/integer.
		 * @see `digitToBasic()`
		 * @private
		 * @param {Number} codePoint The basic numeric code point value.
		 * @returns {Number} The numeric value of a basic code point (for use in
		 * representing integers) in the range `0` to `base - 1`, or `base` if
		 * the code point does not represent a value.
		 */
		function basicToDigit(codePoint) {
			if (codePoint - 48 < 10) {
				return codePoint - 22;
			}
			if (codePoint - 65 < 26) {
				return codePoint - 65;
			}
			if (codePoint - 97 < 26) {
				return codePoint - 97;
			}
			return base;
		}

		/**
		 * Converts a digit/integer into a basic code point.
		 * @see `basicToDigit()`
		 * @private
		 * @param {Number} digit The numeric value of a basic code point.
		 * @returns {Number} The basic code point whose value (when used for
		 * representing integers) is `digit`, which needs to be in the range
		 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
		 * used; else, the lowercase form is used. The behavior is undefined
		 * if `flag` is non-zero and `digit` has no uppercase form.
		 */
		function digitToBasic(digit, flag) {
			//  0..25 map to ASCII a..z or A..Z
			// 26..35 map to ASCII 0..9
			return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
		}

		/**
		 * Bias adaptation function as per section 3.4 of RFC 3492.
		 * http://tools.ietf.org/html/rfc3492#section-3.4
		 * @private
		 */
		function adapt(delta, numPoints, firstTime) {
			var k = 0;
			delta = firstTime ? floor(delta / damp) : delta >> 1;
			delta += floor(delta / numPoints);
			for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
				delta = floor(delta / baseMinusTMin);
			}
			return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
		}

		/**
		 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
		 * symbols.
		 * @memberOf punycode
		 * @param {String} input The Punycode string of ASCII-only symbols.
		 * @returns {String} The resulting string of Unicode symbols.
		 */
		function decode(input) {
			// Don't use UCS-2
			var output = [],
			    inputLength = input.length,
			    out,
			    i = 0,
			    n = initialN,
			    bias = initialBias,
			    basic,
			    j,
			    index,
			    oldi,
			    w,
			    k,
			    digit,
			    t,
			    /** Cached calculation results */
			    baseMinusT;

			// Handle the basic code points: let `basic` be the number of input code
			// points before the last delimiter, or `0` if there is none, then copy
			// the first basic code points to the output.

			basic = input.lastIndexOf(delimiter);
			if (basic < 0) {
				basic = 0;
			}

			for (j = 0; j < basic; ++j) {
				// if it's not a basic code point
				if (input.charCodeAt(j) >= 0x80) {
					error('not-basic');
				}
				output.push(input.charCodeAt(j));
			}

			// Main decoding loop: start just after the last delimiter if any basic code
			// points were copied; start at the beginning otherwise.

			for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

				// `index` is the index of the next character to be consumed.
				// Decode a generalized variable-length integer into `delta`,
				// which gets added to `i`. The overflow checking is easier
				// if we increase `i` as we go, then subtract off its starting
				// value at the end to obtain `delta`.
				for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

					if (index >= inputLength) {
						error('invalid-input');
					}

					digit = basicToDigit(input.charCodeAt(index++));

					if (digit >= base || digit > floor((maxInt - i) / w)) {
						error('overflow');
					}

					i += digit * w;
					t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

					if (digit < t) {
						break;
					}

					baseMinusT = base - t;
					if (w > floor(maxInt / baseMinusT)) {
						error('overflow');
					}

					w *= baseMinusT;

				}

				out = output.length + 1;
				bias = adapt(i - oldi, out, oldi == 0);

				// `i` was supposed to wrap around from `out` to `0`,
				// incrementing `n` each time, so we'll fix that now:
				if (floor(i / out) > maxInt - n) {
					error('overflow');
				}

				n += floor(i / out);
				i %= out;

				// Insert `n` at position `i` of the output
				output.splice(i++, 0, n);

			}

			return ucs2encode(output);
		}

		/**
		 * Converts a string of Unicode symbols (e.g. a domain name label) to a
		 * Punycode string of ASCII-only symbols.
		 * @memberOf punycode
		 * @param {String} input The string of Unicode symbols.
		 * @returns {String} The resulting Punycode string of ASCII-only symbols.
		 */
		function encode(input) {
			var n,
			    delta,
			    handledCPCount,
			    basicLength,
			    bias,
			    j,
			    m,
			    q,
			    k,
			    t,
			    currentValue,
			    output = [],
			    /** `inputLength` will hold the number of code points in `input`. */
			    inputLength,
			    /** Cached calculation results */
			    handledCPCountPlusOne,
			    baseMinusT,
			    qMinusT;

			// Convert the input in UCS-2 to Unicode
			input = ucs2decode(input);

			// Cache the length
			inputLength = input.length;

			// Initialize the state
			n = initialN;
			delta = 0;
			bias = initialBias;

			// Handle the basic code points
			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue < 0x80) {
					output.push(stringFromCharCode(currentValue));
				}
			}

			handledCPCount = basicLength = output.length;

			// `handledCPCount` is the number of code points that have been handled;
			// `basicLength` is the number of basic code points.

			// Finish the basic string - if it is not empty - with a delimiter
			if (basicLength) {
				output.push(delimiter);
			}

			// Main encoding loop:
			while (handledCPCount < inputLength) {

				// All non-basic code points < n have been handled already. Find the next
				// larger one:
				for (m = maxInt, j = 0; j < inputLength; ++j) {
					currentValue = input[j];
					if (currentValue >= n && currentValue < m) {
						m = currentValue;
					}
				}

				// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
				// but guard against overflow
				handledCPCountPlusOne = handledCPCount + 1;
				if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
					error('overflow');
				}

				delta += (m - n) * handledCPCountPlusOne;
				n = m;

				for (j = 0; j < inputLength; ++j) {
					currentValue = input[j];

					if (currentValue < n && ++delta > maxInt) {
						error('overflow');
					}

					if (currentValue == n) {
						// Represent delta as a generalized variable-length integer
						for (q = delta, k = base; /* no condition */; k += base) {
							t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
							if (q < t) {
								break;
							}
							qMinusT = q - t;
							baseMinusT = base - t;
							output.push(
								stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
							);
							q = floor(qMinusT / baseMinusT);
						}

						output.push(stringFromCharCode(digitToBasic(q, 0)));
						bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
						delta = 0;
						++handledCPCount;
					}
				}

				++delta;
				++n;

			}
			return output.join('');
		}

		/**
		 * Converts a Punycode string representing a domain name or an email address
		 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
		 * it doesn't matter if you call it on a string that has already been
		 * converted to Unicode.
		 * @memberOf punycode
		 * @param {String} input The Punycoded domain name or email address to
		 * convert to Unicode.
		 * @returns {String} The Unicode representation of the given Punycode
		 * string.
		 */
		function toUnicode(input) {
			return mapDomain(input, function(string) {
				return regexPunycode.test(string)
					? decode(string.slice(4).toLowerCase())
					: string;
			});
		}

		/**
		 * Converts a Unicode string representing a domain name or an email address to
		 * Punycode. Only the non-ASCII parts of the domain name will be converted,
		 * i.e. it doesn't matter if you call it with a domain that's already in
		 * ASCII.
		 * @memberOf punycode
		 * @param {String} input The domain name or email address to convert, as a
		 * Unicode string.
		 * @returns {String} The Punycode representation of the given domain name or
		 * email address.
		 */
		function toASCII(input) {
			return mapDomain(input, function(string) {
				return regexNonASCII.test(string)
					? 'xn--' + encode(string)
					: string;
			});
		}

		/*--------------------------------------------------------------------------*/

		/** Define the public API */
		punycode = {
			/**
			 * A string representing the current Punycode.js version number.
			 * @memberOf punycode
			 * @type String
			 */
			'version': '1.3.2',
			/**
			 * An object of methods to convert from JavaScript's internal character
			 * representation (UCS-2) to Unicode code points, and back.
			 * @see <https://mathiasbynens.be/notes/javascript-encoding>
			 * @memberOf punycode
			 * @type Object
			 */
			'ucs2': {
				'decode': ucs2decode,
				'encode': ucs2encode
			},
			'decode': decode,
			'encode': encode,
			'toASCII': toASCII,
			'toUnicode': toUnicode
		};

		/** Expose `punycode` */
		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return punycode;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else if (freeExports && freeModule) {
			if (module.exports == freeExports) { // in Node.js or RingoJS v0.8.0+
				freeModule.exports = punycode;
			} else { // in Narwhal or RingoJS v0.7.0-
				for (key in punycode) {
					punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
				}
			}
		} else { // in Rhino or a web browser
			root.punycode = punycode;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(77)(module), (function() { return this; }())))

/***/ }),
/* 77 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	exports.decode = exports.parse = __webpack_require__(79);
	exports.encode = exports.stringify = __webpack_require__(80);


/***/ }),
/* 79 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	module.exports = function(qs, sep, eq, options) {
	  sep = sep || '&';
	  eq = eq || '=';
	  var obj = {};

	  if (typeof qs !== 'string' || qs.length === 0) {
	    return obj;
	  }

	  var regexp = /\+/g;
	  qs = qs.split(sep);

	  var maxKeys = 1000;
	  if (options && typeof options.maxKeys === 'number') {
	    maxKeys = options.maxKeys;
	  }

	  var len = qs.length;
	  // maxKeys <= 0 means that we should not limit keys count
	  if (maxKeys > 0 && len > maxKeys) {
	    len = maxKeys;
	  }

	  for (var i = 0; i < len; ++i) {
	    var x = qs[i].replace(regexp, '%20'),
	        idx = x.indexOf(eq),
	        kstr, vstr, k, v;

	    if (idx >= 0) {
	      kstr = x.substr(0, idx);
	      vstr = x.substr(idx + 1);
	    } else {
	      kstr = x;
	      vstr = '';
	    }

	    k = decodeURIComponent(kstr);
	    v = decodeURIComponent(vstr);

	    if (!hasOwnProperty(obj, k)) {
	      obj[k] = v;
	    } else if (Array.isArray(obj[k])) {
	      obj[k].push(v);
	    } else {
	      obj[k] = [obj[k], v];
	    }
	  }

	  return obj;
	};


/***/ }),
/* 80 */
/***/ (function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	'use strict';

	var stringifyPrimitive = function(v) {
	  switch (typeof v) {
	    case 'string':
	      return v;

	    case 'boolean':
	      return v ? 'true' : 'false';

	    case 'number':
	      return isFinite(v) ? v : '';

	    default:
	      return '';
	  }
	};

	module.exports = function(obj, sep, eq, name) {
	  sep = sep || '&';
	  eq = eq || '=';
	  if (obj === null) {
	    obj = undefined;
	  }

	  if (typeof obj === 'object') {
	    return Object.keys(obj).map(function(k) {
	      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	      if (Array.isArray(obj[k])) {
	        return obj[k].map(function(v) {
	          return ks + encodeURIComponent(stringifyPrimitive(v));
	        }).join(sep);
	      } else {
	        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	      }
	    }).join(sep);

	  }

	  if (!name) return '';
	  return encodeURIComponent(stringifyPrimitive(name)) + eq +
	         encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

	var http = __webpack_require__(41);

	var https = module.exports;

	for (var key in http) {
	    if (http.hasOwnProperty(key)) https[key] = http[key];
	};

	https.request = function (params, cb) {
	    if (!params) params = {};
	    params.scheme = 'https';
	    params.protocol = 'https:';
	    return http.request.call(this, params, cb);
	}


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Fake http module that translates requests to promises and sends response on promise resolve
	 */

	const Channel = __webpack_require__(30);

	let handler = null;

	/**
	 * Http request
	 * See: https://nodejs.org/api/http.html#http_http_request_options_callback
	 *
	 * @param {Object} opts
	 * @param {Function} [callback]
	 * @returns {Request}
	 */
	exports.request = function (opts, callback) {
	  if (typeof handler !== 'function') {
	    throw new Error('Fake request handler should be a function');
	  }
	  return new Request(opts, callback);
	};

	/**
	 * Handler function for processing requests.
	 * Handler may return promise.
	 *
	 * @param {Function} h
	 */
	exports.setHandler = function (h) {
	  if (typeof h !== 'function') {
	    throw new Error('Fake-http handler should be a funciton');
	  } else {
	    handler = h;
	  }
	};

	/**
	 * Implementation of request
	 * See: https://nodejs.org/api/http.html#http_class_http_incomingmessage
	 */
	class Request extends Channel.EventEmitter {
	  constructor(options, callback) {
	    super();
	    this._headers = {};
	    this._options = options;
	    this.body = [];
	    this.uri = this._getUri();
	    // extra fields
	    this.isFake = true;
	    this._callback = callback;
	    this._finished = false;
	  }

	  write(chunk) {
	    // todo: check chunk type and handle 'Buffer'
	    if (chunk) {
	      this.body.push(chunk);
	    }
	  }

	  end(chunk) {
	    if (chunk) {
	      this.write(chunk);
	    }
	    const req = Object.assign({}, this._options, {body: this.body.join('')});
	    Promise.resolve()
	      .then(() => handler(req))
	      .then(
	        result => this._sendResponse(result),
	        e => this._sendError(e)
	      );
	  }

	  abort() {
	    if (!this._finished) {
	      this._finished = true;
	      this.emit('abort');
	    }
	  }

	  _sendResponse({data, statusCode}) {
	    if (this._finished) {
	      return;
	    } else {
	      this._finished = true;
	    }
	    const responseParams = {
	      statusCode,
	      data,
	      method: this._options.method,
	      url: this.uri,
	    };
	    const response = new Response(responseParams);
	    this._callback(response);
	    this.emit('response', response);
	    // manually send response to emit all needed events
	    response.send();
	  }

	  _getUri() {
	    const {protocol, hostname, port, path} = this._options;
	    return `${protocol}//${hostname}${port ? ':' + port : ''}${path}`;
	  }

	  _sendError(e) {
	    this._sendResponse({
	      statusCode: 500,
	      data: e.message || String(e) || 'Internal fake-http server error',
	    });
	    return Promise.reject(e);
	  }
	}

	/**
	 * Implementation of response
	 * See: https://nodejs.org/api/http.html#http_class_http_incomingmessage
	 */
	class Response extends Channel.EventEmitter {
	  /**
	   * Constructor
	   *
	   * @param {Object} params
	   * @param {String} params.statusCode
	   * @param {String} params.method
	   * @param {String} params.url
	   * @param {String} params.data
	   */
	  constructor (params = {}) {
	    super();
	    this.statusCode = params.statusCode || 200;
	    this.headers = {};
	    // extra fields
	    this.isFake = true;
	    this.data = params.data || '';
	    this.method = params.method;
	    this.url = params.url;
	  }
	  send() {
	    if (this.data) {
	      if (typeof this.data !== 'string') {
	        throw new Error('Only string responses are supported in fake-http');
	      }
	      this.emit('data', this.data);
	    }
	    this.emit('end');
	  }
	}


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Mocha runner
	 */

	const Channel = __webpack_require__(30);
	const htmlReporter = __webpack_require__(84);
	const utils = __webpack_require__(8);
	const logger = __webpack_require__(88).create('Mocha-runner');

	const MOCHA_PATH = 'core/background/mocha.js';
	const DEFAULT_OPTIONS = {
	  ui: 'bdd',
	  timeout: 30 * 1000,
	  bail: false,
	  reporter: null,
	  // allowUncaught: true, // i did not managed to get it working
	};

	class MochaRunner {
	  /**
	   * Constructor
	   *
	   * @param {Object} options
	   * @param {Boolean} options.bail
	   * @param {Number} options.timeout
	   * @param {Object} options.uiWindow
	   */
	  constructor(options) {
	    this._mochaOptions = Object.assign({}, DEFAULT_OPTIONS, {
	      timeout: options.timeout,
	      bail: options.bail,
	      reporter: htmlReporter.getReporter(options.uiWindow)
	    });
	    this.onTestStarted = new Channel();
	  }

	  /**
	   * Load mocha in specified context
	   *
	   * @param {Object} context
	   */
	  loadTo(context) {
	    this._context = context;
	    this._cleanUp();
	    return Promise.resolve()
	      .then(() => this._load())
	      .then(() => {
	        this._getMocha().setup(this._mochaOptions);
	        logger.log('Mocha loaded and ready');
	      })
	  }

	  tryRun() {
	    return this._hasTests() ? this._run() : Promise.resolve();
	  }

	  _hasTests() {
	    const suite = this._getMocha().suite;
	    return suite.suites.length || suite.tests.length;
	  }

	  _run() {
	    const suitesCount = this._getMocha().suite.suites.length;
	    logger.log(`Run mocha for ${suitesCount} suite(s)`);
	    return new Promise(resolve => {
	        this._runner = this._getMocha().run(resolve);
	        this._setRunnerListeners();
	      })
	      .then(failures => logger.log(`Finish mocha with ${failures} failure(s)`));
	  }

	  _load() {
	    return utils.loadScript(MOCHA_PATH, this._context.document)
	  }

	  _getMocha() {
	    return this._context.mocha;
	  }

	  _cleanUp() {
	    this._testIndex = 0;
	    utils.removeBySelector(`script[src="${MOCHA_PATH}"]`, this._context.document);
	  }

	  _setRunnerListeners() {
	    // to see pretty error messages in background console, proxy non-assertion errors from mocha
	    this._runner.on('fail', test => this._proxyError(test));
	    this._runner.on('test', test => this._dispatchTestStart(test));
	  }

	  _proxyError(test) {
	    const err = test.err;
	    if (err && err.name !== 'AssertionError') {
	      // mark error with flag to not show it in htmlConsole
	      // (as mocha reporter shows errors itself)
	      err.isMocha = true;
	      // use asyncThrow to go out of promise chain but show correct stack in bg console
	      utils.asyncThrow(err);
	    }
	  }

	  _dispatchTestStart(test) {
	    this._testIndex++;
	    this.onTestStarted.dispatch({index: this._testIndex, title: test.fullTitle()});
	  }
	}

	module.exports = MochaRunner;


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Modified copy of mocha's html reporter that uses custom window for output
	 */

	var Base = __webpack_require__(85);
	var utils = __webpack_require__(86);
	var Progress = __webpack_require__(87);
	var escapeRe = __webpack_require__(9);
	var escape = utils.escape;

	exports.getReporter = function (win) {

	  // overwrite globals
	  var window = win;
	  var document = win.document;
	  // clear report
	  document.getElementById('mocha').innerHTML = '';

	  /**
	   * Stats template.
	   */

	  var statsTemplate = '<ul id="mocha-stats">'
	    + '<li class="progress"><canvas width="40" height="40"></canvas></li>'
	    + '<li class="passes"><a href="javascript:void(0);">passes:</a> <em>0</em></li>'
	    + '<li class="failures"><a href="javascript:void(0);">failures:</a> <em>0</em></li>'
	    + '<li class="duration">duration: <em>0</em>s</li>'
	    + '</ul>';

	  /**
	   * Initialize a new `HTML` reporter.
	   *
	   * @api public
	   * @param {Runner} runner
	   */
	  function HTML(runner) {
	    Base.call(this, runner);

	    var self = this;
	    var stats = this.stats;
	    var stat = fragment(statsTemplate);
	    var items = stat.getElementsByTagName('li');
	    var passes = items[1].getElementsByTagName('em')[0];
	    var passesLink = items[1].getElementsByTagName('a')[0];
	    var failures = items[2].getElementsByTagName('em')[0];
	    var failuresLink = items[2].getElementsByTagName('a')[0];
	    var duration = items[3].getElementsByTagName('em')[0];
	    var canvas = stat.getElementsByTagName('canvas')[0];
	    var report = fragment('<ul id="mocha-report"></ul>');
	    var stack = [report];
	    var progress;
	    var ctx;
	    var root = document.getElementById('mocha');

	    if (canvas.getContext) {
	      var ratio = window.devicePixelRatio || 1;
	      canvas.style.width = canvas.width;
	      canvas.style.height = canvas.height;
	      canvas.width *= ratio;
	      canvas.height *= ratio;
	      ctx = canvas.getContext('2d');
	      ctx.scale(ratio, ratio);
	      progress = new Progress();
	    }

	    if (!root) {
	      return error('#mocha div missing, add it to your document');
	    }

	    // pass toggle
	    on(passesLink, 'click', function (evt) {
	      evt.preventDefault();
	      unhide();
	      var name = (/pass/).test(report.className) ? '' : ' pass';
	      report.className = report.className.replace(/fail|pass/g, '') + name;
	      if (report.className.trim()) {
	        hideSuitesWithout('test pass');
	      }
	    });

	    // failure toggle
	    on(failuresLink, 'click', function (evt) {
	      evt.preventDefault();
	      unhide();
	      var name = (/fail/).test(report.className) ? '' : ' fail';
	      report.className = report.className.replace(/fail|pass/g, '') + name;
	      if (report.className.trim()) {
	        hideSuitesWithout('test fail');
	      }
	    });

	    root.appendChild(stat);
	    root.appendChild(report);

	    if (progress) {
	      progress.size(40);
	    }

	    runner.on('suite', function (suite) {
	      if (suite.root) {
	        return;
	      }

	      // suite
	      var url = self.suiteURL(suite);
	      var el = fragment('<li class="suite"><h1><a href="%s">%s</a></h1></li>', url, escape(suite.title));

	      // container
	      stack[0].appendChild(el);
	      stack.unshift(document.createElement('ul'));
	      el.appendChild(stack[0]);
	    });

	    runner.on('suite end', function (suite) {
	      if (suite.root) {
	        return;
	      }
	      stack.shift();
	    });

	    runner.on('pass', function (test) {
	      var url = self.testURL(test);
	      var markup = '<li class="test pass %e"><h2>%e<span class="duration">%ems</span> '
	        + '<a href="%s" class="replay">‣</a></h2></li>';
	      var el = fragment(markup, test.speed, test.title, test.duration, url);
	      self.addCodeToggle(el, test.body);
	      appendToStack(el);
	      updateStats();
	    });

	    runner.on('fail', function (test) {
	      var el = fragment('<li class="test fail"><h2>%e <a href="%e" class="replay">‣</a></h2></li>',
	        test.title, self.testURL(test));
	      var stackString; // Note: Includes leading newline
	      var message = test.err.toString();

	      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we
	      // check for the result of the stringifying.
	      if (message === '[object Error]') {
	        message = test.err.message;
	      }

	      if (test.err.stack) {
	        var indexOfMessage = test.err.stack.indexOf(test.err.message);
	        if (indexOfMessage === -1) {
	          stackString = test.err.stack;
	        } else {
	          stackString = test.err.stack.substr(test.err.message.length + indexOfMessage);
	        }
	      } else if (test.err.sourceURL && test.err.line !== undefined) {
	        // Safari doesn't give you a stack. Let's at least provide a source line.
	        stackString = '\n(' + test.err.sourceURL + ':' + test.err.line + ')';
	      }

	      // vitalets: clean stack
	      // (although mocha cleans stack itself we need to remove 'filesystem:persistent'
	      stackString = (stackString || '').replace(/filesystem:persistent\//g, '');

	      if (test.err.htmlMessage && stackString) {
	        el.appendChild(fragment('<div class="html-error">%s\n<pre class="error">%e</pre></div>',
	          test.err.htmlMessage, stackString));
	      } else if (test.err.htmlMessage) {
	        el.appendChild(fragment('<div class="html-error">%s</div>', test.err.htmlMessage));
	      } else {
	        el.appendChild(fragment('<pre class="error">%e%e</pre>', message, stackString));
	      }

	      self.addCodeToggle(el, test.body);
	      appendToStack(el);
	      updateStats();
	    });

	    runner.on('pending', function (test) {
	      var el = fragment('<li class="test pass pending"><h2>%e</h2></li>', test.title);
	      appendToStack(el);
	      updateStats();
	    });

	    function appendToStack(el) {
	      // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.
	      if (stack[0]) {
	        stack[0].appendChild(el);
	      }
	    }

	    function updateStats() {
	      // TODO: add to stats
	      var percent = stats.tests / this.total * 100 | 0;
	      if (progress) {
	        progress.update(percent).draw(ctx);
	      }

	      // update stats
	      var ms = new Date() - stats.start;
	      text(passes, stats.passes);
	      text(failures, stats.failures);
	      text(duration, (ms / 1000).toFixed(2));
	    }
	  }

	  /**
	   * Makes a URL, preserving querystring ("search") parameters.
	   *
	   * @param {string} s
	   * @return {string} A new URL.
	   */
	  function makeUrl(s) {
	    var search = window.location.search;

	    // Remove previous grep query parameter if present
	    if (search) {
	      search = search.replace(/[?&]grep=[^&\s]*/g, '').replace(/^&/, '?');
	    }

	    return window.location.pathname + (search ? search + '&' : '?') + 'grep=' + encodeURIComponent(escapeRe(s));
	  }

	  /**
	   * Provide suite URL.
	   *
	   * @param {Object} [suite]
	   */
	  HTML.prototype.suiteURL = function (suite) {
	    return makeUrl(suite.fullTitle());
	  };

	  /**
	   * Provide test URL.
	   *
	   * @param {Object} [test]
	   */
	  HTML.prototype.testURL = function (test) {
	    return makeUrl(test.fullTitle());
	  };

	  /**
	   * Adds code toggle functionality for the provided test's list element.
	   *
	   * @param {HTMLLIElement} el
	   * @param {string} contents
	   */
	  HTML.prototype.addCodeToggle = function (el, contents) {
	    var h2 = el.getElementsByTagName('h2')[0];

	    on(h2, 'click', function () {
	      pre.style.display = pre.style.display === 'none' ? 'block' : 'none';
	    });

	    var pre = fragment('<pre><code>%e</code></pre>', utils.clean(contents));
	    el.appendChild(pre);
	    pre.style.display = 'none';
	  };

	  /**
	   * Display error `msg`.
	   *
	   * @param {string} msg
	   */
	  function error(msg) {
	    document.body.appendChild(fragment('<div id="mocha-error">%s</div>', msg));
	  }

	  /**
	   * Return a DOM fragment from `html`.
	   *
	   * @param {string} html
	   */
	  function fragment(html) {
	    var args = arguments;
	    var div = document.createElement('div');
	    var i = 1;

	    div.innerHTML = html.replace(/%([se])/g, function (_, type) {
	      switch (type) {
	        case 's':
	          return String(args[i++]);
	        case 'e':
	          return escape(args[i++]);
	        // no default
	      }
	    });

	    return div.firstChild;
	  }

	  /**
	   * Check for suites that do not have elements
	   * with `classname`, and hide them.
	   *
	   * @param {text} classname
	   */
	  function hideSuitesWithout(classname) {
	    var suites = document.getElementsByClassName('suite');
	    for (var i = 0; i < suites.length; i++) {
	      var els = suites[i].getElementsByClassName(classname);
	      if (!els.length) {
	        suites[i].className += ' hidden';
	      }
	    }
	  }

	  /**
	   * Unhide .hidden suites.
	   */
	  function unhide() {
	    var els = document.getElementsByClassName('suite hidden');
	    for (var i = 0; i < els.length; ++i) {
	      els[i].className = els[i].className.replace('suite hidden', 'suite');
	    }
	  }

	  /**
	   * Set an element's text contents.
	   *
	   * @param {HTMLElement} el
	   * @param {string} contents
	   */
	  function text(el, contents) {
	    if (el.textContent) {
	      el.textContent = contents;
	    } else {
	      el.innerText = contents;
	    }
	  }

	  /**
	   * Listen on `event` with callback `fn`.
	   */
	  function on(el, event, fn) {
	    if (el.addEventListener) {
	      el.addEventListener(event, fn, false);
	    } else {
	      el.attachEvent('on' + event, fn);
	    }
	  }

	  return HTML;
	};


/***/ }),
/* 85 */
/***/ (function(module, exports) {

	/**
	 * Modified copy of mocha's Base reporter
	 */

	function Base(runner) {
	  var stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 };
	  var failures = this.failures = [];

	  if (!runner) {
	    return;
	  }
	  this.runner = runner;

	  runner.stats = stats;

	  runner.on('start', function() {
	    stats.start = new Date();
	  });

	  runner.on('suite', function(suite) {
	    stats.suites = stats.suites || 0;
	    suite.root || stats.suites++;
	  });

	  runner.on('test end', function() {
	    stats.tests = stats.tests || 0;
	    stats.tests++;
	  });

	  runner.on('pass', function(test) {
	    stats.passes = stats.passes || 0;

	    if (test.duration > test.slow()) {
	      test.speed = 'slow';
	    } else if (test.duration > test.slow() / 2) {
	      test.speed = 'medium';
	    } else {
	      test.speed = 'fast';
	    }

	    stats.passes++;
	  });

	  runner.on('fail', function(test, err) {
	    stats.failures = stats.failures || 0;
	    stats.failures++;
	    test.err = err;
	    failures.push(test);
	  });

	  runner.on('end', function() {
	    stats.end = new Date();
	    stats.duration = new Date() - stats.start;
	  });

	  runner.on('pending', function() {
	    stats.pending++;
	  });
	}

	module.exports = Base;


/***/ }),
/* 86 */
/***/ (function(module, exports) {

	/**
	 * Modified copy of mocha's utils required for html reporter
	 */

	/**
	 * Escape special characters in the given string of html.
	 *
	 * @api private
	 * @param  {string} html
	 * @return {string}
	 */
	exports.escape = function(html) {
	  return String(html)
	    .replace(/&/g, '&amp;')
	    .replace(/"/g, '&quot;')
	    .replace(/</g, '&lt;')
	    .replace(/>/g, '&gt;');
	};

	/**
	 * Strip the function definition from `str`, and re-indent for pre whitespace.
	 *
	 * @param {string} str
	 * @return {string}
	 */
	exports.clean = function(str) {
	  str = str
	    .replace(/\r\n?|[\n\u2028\u2029]/g, '\n').replace(/^\uFEFF/, '')
	    .replace(/^function *\(.*\)\s*\{|\(.*\) *=> *\{?/, '')
	    .replace(/\s+\}$/, '');

	  var spaces = str.match(/^\n?( *)/)[1].length;
	  var tabs = str.match(/^\n?(\t*)/)[1].length;
	  var re = new RegExp('^\n?' + (tabs ? '\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');

	  str = str.replace(re, '');

	  return exports.trim(str);
	};

	/**
	 * Trim the given `str`.
	 *
	 * @api private
	 * @param {string} str
	 * @return {string}
	 */
	exports.trim = function(str) {
	  return str.replace(/^\s+|\s+$/g, '');
	};


/***/ }),
/* 87 */
/***/ (function(module, exports) {

	'use strict';

	/**
	 * Expose `Progress`.
	 */

	module.exports = Progress;

	/**
	 * Initialize a new `Progress` indicator.
	 */
	function Progress () {
	  this.percent = 0;
	  this.size(0);
	  this.fontSize(11);
	  this.font('helvetica, arial, sans-serif');
	}

	/**
	 * Set progress size to `size`.
	 *
	 * @api public
	 * @param {number} size
	 * @return {Progress} Progress instance.
	 */
	Progress.prototype.size = function (size) {
	  this._size = size;
	  return this;
	};

	/**
	 * Set text to `text`.
	 *
	 * @api public
	 * @param {string} text
	 * @return {Progress} Progress instance.
	 */
	Progress.prototype.text = function (text) {
	  this._text = text;
	  return this;
	};

	/**
	 * Set font size to `size`.
	 *
	 * @api public
	 * @param {number} size
	 * @return {Progress} Progress instance.
	 */
	Progress.prototype.fontSize = function (size) {
	  this._fontSize = size;
	  return this;
	};

	/**
	 * Set font to `family`.
	 *
	 * @param {string} family
	 * @return {Progress} Progress instance.
	 */
	Progress.prototype.font = function (family) {
	  this._font = family;
	  return this;
	};

	/**
	 * Update percentage to `n`.
	 *
	 * @param {number} n
	 * @return {Progress} Progress instance.
	 */
	Progress.prototype.update = function (n) {
	  this.percent = n;
	  return this;
	};

	/**
	 * Draw on `ctx`.
	 *
	 * @param {CanvasRenderingContext2d} ctx
	 * @return {Progress} Progress instance.
	 */
	Progress.prototype.draw = function (ctx) {
	  try {
	    var percent = Math.min(this.percent, 100);
	    var size = this._size;
	    var half = size / 2;
	    var x = half;
	    var y = half;
	    var rad = half - 1;
	    var fontSize = this._fontSize;

	    ctx.font = fontSize + 'px ' + this._font;

	    var angle = Math.PI * 2 * (percent / 100);
	    ctx.clearRect(0, 0, size, size);

	    // outer circle
	    ctx.strokeStyle = '#9f9f9f';
	    ctx.beginPath();
	    ctx.arc(x, y, rad, 0, angle, false);
	    ctx.stroke();

	    // inner circle
	    ctx.strokeStyle = '#eee';
	    ctx.beginPath();
	    ctx.arc(x, y, rad - 1, 0, angle, true);
	    ctx.stroke();

	    // text
	    var text = this._text || (percent | 0) + '%';
	    var w = ctx.measureText(text).width;

	    ctx.fillText(text, x - w / 2 + 1, y + fontSize / 2 - 1);
	  } catch (err) {
	    // don't fail if we can't render progress
	  }
	  return this;
	};


/***/ }),
/* 88 */
/***/ (function(module, exports) {

	/**
	 * Simple console logger
	 */

	/* eslint no-console: 0 */

	class Logger {
	  constructor(prefix) {
	    this._prefix = `[${prefix}]:`;
	  }

	  log() {
	    this._callConsole('log', [].slice.call(arguments));
	  }

	  info() {
	    this._callConsole('info', [].slice.call(arguments));
	  }

	  warn() {
	    this._callConsole('warn', [].slice.call(arguments));
	  }

	  error() {
	    this._callConsole('error', [].slice.call(arguments));
	  }

	  _callConsole(method, args) {
	    console[method].apply(console, [this._prefix].concat(args));
	  }
	}

	/**
	 * Helper to create logger right after require()
	 * E.g. const logger = require('./logger').create('Module')
	 *
	 * @param {String} prefix
	 * @returns {Logger}
	 */
	Logger.create = function (prefix) {
	  return new Logger(prefix);
	};

	module.exports = Logger;


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Executes file via loading it to <script> tag
	 * As script can contain driver commands, we check flow state after load.
	 * todo: dont watch control flow!
	 */

	const promise = __webpack_require__(36);
	const Channel = __webpack_require__(30);
	const utils = __webpack_require__(8);
	const logger = __webpack_require__(88).create('File-runner');

	const {IDLE, UNCAUGHT_EXCEPTION} = promise.ControlFlow.EventType;

	class FileRunner {
	  /**
	   * Constructor
	   *
	   * @param {String} url
	   * @param {Object} context
	   */
	  constructor(url, context) {
	    this._url = url;
	    this._shortUrl = utils.cutLocalUrl(url);
	    this._context = context;
	    // todo: use custom control flow?
	    this._flow = promise.controlFlow();
	    this._setListeners();
	  }

	  run() {
	    logger.log(`Loading: ${this._shortUrl}`);
	    return new Promise((resolve, reject) => {
	      this._resolve = resolve;
	      this._reject = reject;
	      this._fulfilled = false;
	      this._globalErrorListeners.on();
	      return Promise.resolve()
	        .then(() => this._loadScript())
	        .then(() => this._waitFlow())
	    })
	    .then(() => logger.log(`Done: ${this._shortUrl}`))
	    .catch(e => this._catch(e));
	  }

	  _loadScript() {
	    return utils.loadScript(this._url, this._context.document);
	  }

	  _waitFlow() {
	    if (this._flow.isIdle()) {
	      this._fulfill();
	    } else {
	      this._flowListeners.on();
	    }
	  }

	  _onFlowIdle() {
	    this._fulfill();
	  }

	  /**
	   * Notice that this event will not come from mocha as it wraps all errors
	   */
	  _onFlowException(e) {
	    this._fulfill(e);
	  }

	  _onTestFileError(e) {
	    this._fulfill(e);
	  }

	  _fulfill(error) {
	    this._fulfilled = true;
	    this._offListeners();
	    if (error) {
	      // this._flow.reset();
	      this._reject(error);
	    } else {
	      this._resolve();
	    }
	  }

	  /**
	   * We can appear here after calling this._reject() or some other error
	   * In second case we should cleanup listeners
	   *
	   * @param {Error} error
	   */
	  _catch(error) {
	    if (!this._fulfilled) {
	      this._fulfilled = true;
	      this._offListeners();
	    }
	    return Promise.reject(error);
	  }

	  _setListeners() {
	    this._flowListeners = new Channel.Subscription([
	      {
	        channel: this._flow,
	        event: IDLE,
	        listener: this._onFlowIdle.bind(this),
	      },
	      {
	        channel: this._flow,
	        event: UNCAUGHT_EXCEPTION,
	        listener: this._onFlowException.bind(this),
	      }
	    ]);
	    this._globalErrorListeners = new Channel.Subscription([
	      {
	        channel: this._context.__onTestFileError,
	        listener: this._onTestFileError.bind(this),
	      }
	    ]);
	  }

	  _offListeners() {
	    this._globalErrorListeners.off();
	    this._flowListeners.off();
	  }
	}

	module.exports = FileRunner;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Base globals available in tests.
	 * Can be extended by engine specific globals
	 */

	const Channel = __webpack_require__(30);
	const fakeRequire = __webpack_require__(91);

	/**
	 * Set globals to context
	 *
	 * @param {Object} context
	 * @param {Object} uiWindow
	 */
	exports.setGlobals = function (context, uiWindow) {
	  Object.assign(context, {
	    runContext: {},
	    // for running tests written for node
	    require: fakeRequire.getFn(),
	    // for debug
	    uiConsole: uiWindow.htmlConsole,
	    // for custom reporting
	    report: uiWindow.report,
	    // this channel is used in test-file wrapper for catching errors
	    __onTestFileError: new Channel()
	  });
	};

	/**
	 * Clear keys before each session
	 * Especially global `require` breaks loading mocha
	 *
	 * @param {Window} context
	 */
	exports.clear = function (context) {
	  delete context.runContext;
	  delete context.require;
	  delete context.uiConsole;
	  delete context.__onTestFileError;
	};


/***/ }),
/* 91 */
/***/ (function(module, exports) {

	/**
	 * This fake require allows to process require calls when running node compatible tests in browser.
	 */

	const modules = new Map();
	const aliases = new Map();

	/**
	 * Performs needed cleanup and returns fake-require function
	 *
	 * @returns {Function}
	 */
	exports.getFn = function () {
	  modules.clear();
	  aliases.clear();
	  return fakeRequire;
	};

	function fakeRequire(moduleName) {
	  moduleName = applyAliases(moduleName);
	  if (modules.has(moduleName)) {
	    return modules.get(moduleName);
	  } else {
	    throw new Error([`Unsupported module in fakeRequire: ${moduleName}`,
	      `[Registered modules (${modules.size})]:`,
	      stringifyMapKeys(modules),
	      `[Aliases (${aliases.size})]:`,
	      stringifyMap(aliases),
	    ].join('\n'));
	  }
	}

	fakeRequire.register = function (path, module) {
	  modules.set(path, module);
	};

	fakeRequire.alias = function (alias, path) {
	  aliases.set(alias, path);
	};

	function applyAliases(moduleName) {
	  aliases.forEach((path, alias) => {
	    moduleName = moduleName.replace(alias, path);
	  });
	  return moduleName;
	}

	function stringifyMapKeys(map) {
	  const res = [];
	  map.forEach((value, key) => res.push(key));
	  return res.join('\n');
	}

	function stringifyMap(map) {
	  const res = [];
	  map.forEach((value, key) => res.push(`${key} = ${value}`));
	  return res.join(', ');
	}


/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Engines are clients that transform javascript into webdriver commands.
	 * todo: webdriverio, nightwatch
	 */

	exports.selenium = __webpack_require__(93);


/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Setup env for running webdriver command via selenium engine
	 */

	const os = __webpack_require__(94);
	const customCommands = __webpack_require__(95);

	/**
	 * Add needed globals to context
	 *
	 * @param {Object} context
	 */
	exports.setGlobals = function (context) {
	  cleanUp();
	  supportNode();
	  setVars(context);
	  setupFakeRequire(context);
	  customCommands.setup();
	};

	/**
	 * Set remote selenium server url
	 */
	exports.setServerUrl = function (serverUrl) {
	  process.env.SELENIUM_REMOTE_URL = serverUrl;
	};

	/**
	 * Set capabilities
	 */
	exports.setCapabilities = function (caps = {}) {
	  process.env.SELENIUM_BROWSER = caps.browserName || 'chrome';
	};

	/**
	 * Register custom command
	 *
	 * @param {String} name
	 * @param {String} method
	 * @param {String} path
	 */
	exports.registerCommand = function (name, method, path) {
	  customCommands.register(name, method, path);
	};

	function setVars(context) {
	  const webdriver = __webpack_require__(107);
	  Object.assign(context, {
	    webdriver: webdriver,
	    By: webdriver.By,
	    Key: webdriver.Key,
	    until: webdriver.until,
	    test: __webpack_require__(287),
	    assert: __webpack_require__(288),
	    // useful shortcut for: let driver = new Driver();
	    Driver: function () { return new webdriver.Builder().build(); },
	  });
	}

	function setupFakeRequire(context) {
	  context.require.register('selenium-webdriver', __webpack_require__(107));
	  context.require.register('selenium-webdriver/testing', __webpack_require__(287));
	  context.require.register('selenium-webdriver/testing/assert', __webpack_require__(288));
	  context.require.register('selenium-webdriver/lib/promise', __webpack_require__(36));
	  context.require.register('selenium-webdriver/chrome', __webpack_require__(108));
	  context.require.register('assert', __webpack_require__(289));
	}

	function cleanUp() {
	  // remove selenium-webdriver/testing from cache as it wraps mocha globals on start and keep cached
	  delete __webpack_require__.c[/*require.resolve*/(287)];
	}

	/**
	 * Some nodejs shims to load selenium-webdriver in browser context
	 */
	function supportNode() {
	  // needed for selenium-webdriver/safari
	  process.env.USER = 'USER';
	  process.env.APPDATA = 'APPDATA';
	  // needed for selenium-webdriver/net/index.js
	  process.platform = 'darwin';
	  os.networkInterfaces = os.getNetworkInterfaces = function () {
	    return {
	      lo0: [{
	        family: 'IPv4',
	        internal: true,
	        address: 'localhost',
	      }]
	    };
	  };
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 94 */
/***/ (function(module, exports) {

	exports.endianness = function () { return 'LE' };

	exports.hostname = function () {
	    if (typeof location !== 'undefined') {
	        return location.hostname
	    }
	    else return '';
	};

	exports.loadavg = function () { return [] };

	exports.uptime = function () { return 0 };

	exports.freemem = function () {
	    return Number.MAX_VALUE;
	};

	exports.totalmem = function () {
	    return Number.MAX_VALUE;
	};

	exports.cpus = function () { return [] };

	exports.type = function () { return 'Browser' };

	exports.release = function () {
	    if (typeof navigator !== 'undefined') {
	        return navigator.appVersion;
	    }
	    return '';
	};

	exports.networkInterfaces
	= exports.getNetworkInterfaces
	= function () { return {} };

	exports.arch = function () { return 'javascript' };

	exports.platform = function () { return 'browser' };

	exports.tmpdir = exports.tmpDir = function () {
	    return '/tmp';
	};

	exports.EOL = '\n';


/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Allows to register custom commands
	 */

	const Executor = __webpack_require__(96).Executor;

	// map of commands
	const commands = new Map();
	// map of executors where we already added custom commands
	const executors = new WeakMap();

	/**
	 * Setup custom commands hook via http executor class
	 */
	exports.setup = function () {
	  const currentFn = Executor.prototype.execute;
	  if (currentFn.name !== 'customExecute') {
	    Executor.prototype.execute = function customExecute() {
	      if (!executors.has(this)) {
	        executors.set(this, true);
	        commands.forEach(cmd => this.defineCommand(cmd.name, cmd.method, cmd.path));
	      }
	      return currentFn.apply(this, arguments);
	    };
	  }
	};

	/**
	 * Register custom command
	 *
	 * @param {String} name
	 * @param {String} method
	 * @param {String} path
	 */
	exports.register = function (name, method, path) {
	  commands.set(name, {name, method, path});
	};


/***/ }),
/* 96 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines an environment agnostic {@linkplain cmd.Executor
	 * command executor} that communicates with a remote end using JSON over HTTP.
	 *
	 * Clients should implement the {@link Client} interface, which is used by
	 * the {@link Executor} to send commands to the remote end.
	 */

	'use strict';

	const cmd = __webpack_require__(97);
	const error = __webpack_require__(38);
	const logging = __webpack_require__(40);
	const promise = __webpack_require__(36);
	const Session = __webpack_require__(98).Session;
	const WebElement = __webpack_require__(101).WebElement;

	const {getAttribute, isDisplayed} = (function() {
	  try {
	    return {
	      getAttribute: __webpack_require__(105),
	      isDisplayed: __webpack_require__(106)
	    };
	  } catch (ex) {
	    throw Error(
	        'Failed to import atoms modules. If running in devmode, you need to run'
	            + ' `./go node:atoms` from the project root: ' + ex);
	  }
	})();


	/**
	 * Converts a headers map to a HTTP header block string.
	 * @param {!Map<string, string>} headers The map to convert.
	 * @return {string} The headers as a string.
	 */
	function headersToString(headers) {
	  let ret = [];
	  headers.forEach(function(value, name) {
	    ret.push(`${name.toLowerCase()}: ${value}`);
	  });
	  return ret.join('\n');
	}


	/**
	 * Represents a HTTP request message. This class is a "partial" request and only
	 * defines the path on the server to send a request to. It is each client's
	 * responsibility to build the full URL for the final request.
	 * @final
	 */
	class Request {
	  /**
	   * @param {string} method The HTTP method to use for the request.
	   * @param {string} path The path on the server to send the request to.
	   * @param {Object=} opt_data This request's non-serialized JSON payload data.
	   */
	  constructor(method, path, opt_data) {
	    this.method = /** string */method;
	    this.path = /** string */path;
	    this.data = /** Object */opt_data;
	    this.headers = /** !Map<string, string> */new Map(
	        [['Accept', 'application/json; charset=utf-8']]);
	  }

	  /** @override */
	  toString() {
	    let ret = `${this.method} ${this.path} HTTP/1.1\n`;
	    ret += headersToString(this.headers) + '\n\n';
	    if (this.data) {
	      ret += JSON.stringify(this.data);
	    }
	    return ret;
	  }
	}


	/**
	 * Represents a HTTP response message.
	 * @final
	 */
	class Response {
	  /**
	   * @param {number} status The response code.
	   * @param {!Object<string>} headers The response headers. All header names
	   *     will be converted to lowercase strings for consistent lookups.
	   * @param {string} body The response body.
	   */
	  constructor(status, headers, body) {
	    this.status = /** number */status;
	    this.body = /** string */body;
	    this.headers = /** !Map<string, string>*/new Map;
	    for (let header in headers) {
	      this.headers.set(header.toLowerCase(), headers[header]);
	    }
	  }

	  /** @override */
	  toString() {
	    let ret = `HTTP/1.1 ${this.status}\n${headersToString(this.headers)}\n\n`;
	    if (this.body) {
	      ret += this.body;
	    }
	    return ret;
	  }
	}


	const DEV_ROOT = '../../../../buck-out/gen/javascript/';

	/** @enum {!Function} */
	const Atom = {
	  GET_ATTRIBUTE: getAttribute,
	  IS_DISPLAYED: isDisplayed
	};


	const LOG = logging.getLogger('webdriver.http');


	function post(path) { return resource('POST', path); }
	function del(path)  { return resource('DELETE', path); }
	function get(path)  { return resource('GET', path); }
	function resource(method, path) { return {method: method, path: path}; }


	/** @typedef {{method: string, path: string}} */
	var CommandSpec;


	/** @typedef {function(!cmd.Command): !Promise<!cmd.Command>} */
	var CommandTransformer;


	class InternalTypeError extends TypeError {}


	/**
	 * @param {!cmd.Command} command The initial command.
	 * @param {Atom} atom The name of the atom to execute.
	 * @return {!Promise<!cmd.Command>} The transformed command to execute.
	 */
	function toExecuteAtomCommand(command, atom, ...params) {
	  return new Promise((resolve, reject) => {
	    if (typeof atom !== 'function') {
	      reject(new InternalTypeError('atom is not a function: ' + typeof atom));
	      return;
	    }

	    let newCmd = new cmd.Command(cmd.Name.EXECUTE_SCRIPT)
	        .setParameter('sessionId', command.getParameter('sessionId'))
	        .setParameter('script', `return (${atom}).apply(null, arguments)`)
	        .setParameter('args', params.map(param => command.getParameter(param)));
	    resolve(newCmd);
	  });
	}



	/** @const {!Map<string, CommandSpec>} */
	const COMMAND_MAP = new Map([
	    [cmd.Name.GET_SERVER_STATUS, get('/status')],
	    [cmd.Name.NEW_SESSION, post('/session')],
	    [cmd.Name.GET_SESSIONS, get('/sessions')],
	    [cmd.Name.DESCRIBE_SESSION, get('/session/:sessionId')],
	    [cmd.Name.QUIT, del('/session/:sessionId')],
	    [cmd.Name.CLOSE, del('/session/:sessionId/window')],
	    [cmd.Name.GET_CURRENT_WINDOW_HANDLE, get('/session/:sessionId/window_handle')],
	    [cmd.Name.GET_WINDOW_HANDLES, get('/session/:sessionId/window_handles')],
	    [cmd.Name.GET_CURRENT_URL, get('/session/:sessionId/url')],
	    [cmd.Name.GET, post('/session/:sessionId/url')],
	    [cmd.Name.GO_BACK, post('/session/:sessionId/back')],
	    [cmd.Name.GO_FORWARD, post('/session/:sessionId/forward')],
	    [cmd.Name.REFRESH, post('/session/:sessionId/refresh')],
	    [cmd.Name.ADD_COOKIE, post('/session/:sessionId/cookie')],
	    [cmd.Name.GET_ALL_COOKIES, get('/session/:sessionId/cookie')],
	    [cmd.Name.DELETE_ALL_COOKIES, del('/session/:sessionId/cookie')],
	    [cmd.Name.DELETE_COOKIE, del('/session/:sessionId/cookie/:name')],
	    [cmd.Name.FIND_ELEMENT, post('/session/:sessionId/element')],
	    [cmd.Name.FIND_ELEMENTS, post('/session/:sessionId/elements')],
	    [cmd.Name.GET_ACTIVE_ELEMENT, post('/session/:sessionId/element/active')],
	    [cmd.Name.FIND_CHILD_ELEMENT, post('/session/:sessionId/element/:id/element')],
	    [cmd.Name.FIND_CHILD_ELEMENTS, post('/session/:sessionId/element/:id/elements')],
	    [cmd.Name.CLEAR_ELEMENT, post('/session/:sessionId/element/:id/clear')],
	    [cmd.Name.CLICK_ELEMENT, post('/session/:sessionId/element/:id/click')],
	    [cmd.Name.SEND_KEYS_TO_ELEMENT, post('/session/:sessionId/element/:id/value')],
	    [cmd.Name.SUBMIT_ELEMENT, post('/session/:sessionId/element/:id/submit')],
	    [cmd.Name.GET_ELEMENT_TEXT, get('/session/:sessionId/element/:id/text')],
	    [cmd.Name.GET_ELEMENT_TAG_NAME, get('/session/:sessionId/element/:id/name')],
	    [cmd.Name.IS_ELEMENT_SELECTED, get('/session/:sessionId/element/:id/selected')],
	    [cmd.Name.IS_ELEMENT_ENABLED, get('/session/:sessionId/element/:id/enabled')],
	    [cmd.Name.IS_ELEMENT_DISPLAYED, get('/session/:sessionId/element/:id/displayed')],
	    [cmd.Name.GET_ELEMENT_LOCATION, get('/session/:sessionId/element/:id/location')],
	    [cmd.Name.GET_ELEMENT_SIZE, get('/session/:sessionId/element/:id/size')],
	    [cmd.Name.GET_ELEMENT_ATTRIBUTE, get('/session/:sessionId/element/:id/attribute/:name')],
	    [cmd.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY, get('/session/:sessionId/element/:id/css/:propertyName')],
	    [cmd.Name.ELEMENT_EQUALS, get('/session/:sessionId/element/:id/equals/:other')],
	    [cmd.Name.TAKE_ELEMENT_SCREENSHOT, get('/session/:sessionId/element/:id/screenshot')],
	    [cmd.Name.SWITCH_TO_WINDOW, post('/session/:sessionId/window')],
	    [cmd.Name.MAXIMIZE_WINDOW, post('/session/:sessionId/window/current/maximize')],
	    [cmd.Name.GET_WINDOW_POSITION, get('/session/:sessionId/window/current/position')],
	    [cmd.Name.SET_WINDOW_POSITION, post('/session/:sessionId/window/current/position')],
	    [cmd.Name.GET_WINDOW_SIZE, get('/session/:sessionId/window/current/size')],
	    [cmd.Name.SET_WINDOW_SIZE, post('/session/:sessionId/window/current/size')],
	    [cmd.Name.SWITCH_TO_FRAME, post('/session/:sessionId/frame')],
	    [cmd.Name.GET_PAGE_SOURCE, get('/session/:sessionId/source')],
	    [cmd.Name.GET_TITLE, get('/session/:sessionId/title')],
	    [cmd.Name.EXECUTE_SCRIPT, post('/session/:sessionId/execute')],
	    [cmd.Name.EXECUTE_ASYNC_SCRIPT, post('/session/:sessionId/execute_async')],
	    [cmd.Name.SCREENSHOT, get('/session/:sessionId/screenshot')],
	    [cmd.Name.GET_TIMEOUT, get('/session/:sessionId/timeouts')],
	    [cmd.Name.SET_TIMEOUT, post('/session/:sessionId/timeouts')],
	    [cmd.Name.MOVE_TO, post('/session/:sessionId/moveto')],
	    [cmd.Name.CLICK, post('/session/:sessionId/click')],
	    [cmd.Name.DOUBLE_CLICK, post('/session/:sessionId/doubleclick')],
	    [cmd.Name.MOUSE_DOWN, post('/session/:sessionId/buttondown')],
	    [cmd.Name.MOUSE_UP, post('/session/:sessionId/buttonup')],
	    [cmd.Name.MOVE_TO, post('/session/:sessionId/moveto')],
	    [cmd.Name.SEND_KEYS_TO_ACTIVE_ELEMENT, post('/session/:sessionId/keys')],
	    [cmd.Name.TOUCH_SINGLE_TAP, post('/session/:sessionId/touch/click')],
	    [cmd.Name.TOUCH_DOUBLE_TAP, post('/session/:sessionId/touch/doubleclick')],
	    [cmd.Name.TOUCH_DOWN, post('/session/:sessionId/touch/down')],
	    [cmd.Name.TOUCH_UP, post('/session/:sessionId/touch/up')],
	    [cmd.Name.TOUCH_MOVE, post('/session/:sessionId/touch/move')],
	    [cmd.Name.TOUCH_SCROLL, post('/session/:sessionId/touch/scroll')],
	    [cmd.Name.TOUCH_LONG_PRESS, post('/session/:sessionId/touch/longclick')],
	    [cmd.Name.TOUCH_FLICK, post('/session/:sessionId/touch/flick')],
	    [cmd.Name.ACCEPT_ALERT, post('/session/:sessionId/accept_alert')],
	    [cmd.Name.DISMISS_ALERT, post('/session/:sessionId/dismiss_alert')],
	    [cmd.Name.GET_ALERT_TEXT, get('/session/:sessionId/alert_text')],
	    [cmd.Name.SET_ALERT_TEXT, post('/session/:sessionId/alert_text')],
	    [cmd.Name.SET_ALERT_CREDENTIALS, post('/session/:sessionId/alert/credentials')],
	    [cmd.Name.GET_LOG, post('/session/:sessionId/log')],
	    [cmd.Name.GET_AVAILABLE_LOG_TYPES, get('/session/:sessionId/log/types')],
	    [cmd.Name.GET_SESSION_LOGS, post('/logs')],
	    [cmd.Name.UPLOAD_FILE, post('/session/:sessionId/file')],
	]);


	/** @const {!Map<string, (CommandSpec|CommandTransformer)>} */
	const W3C_COMMAND_MAP = new Map([
	  [cmd.Name.GET_ACTIVE_ELEMENT, get('/session/:sessionId/element/active')],
	  [cmd.Name.GET_ALERT_TEXT, get('/session/:sessionId/alert/text')],
	  [cmd.Name.SET_ALERT_TEXT, post('/session/:sessionId/alert/text')],
	  [cmd.Name.ACCEPT_ALERT, post('/session/:sessionId/alert/accept')],
	  [cmd.Name.DISMISS_ALERT, post('/session/:sessionId/alert/dismiss')],
	  [cmd.Name.GET_ELEMENT_ATTRIBUTE, (cmd) => {
	    return toExecuteAtomCommand(cmd, Atom.GET_ATTRIBUTE, 'id', 'name');
	  }],
	  [cmd.Name.GET_ELEMENT_LOCATION, get('/session/:sessionId/element/:id/rect')],
	  [cmd.Name.GET_ELEMENT_SIZE, get('/session/:sessionId/element/:id/rect')],
	  [cmd.Name.IS_ELEMENT_DISPLAYED, (cmd) => {
	    return toExecuteAtomCommand(cmd, Atom.IS_DISPLAYED, 'id');
	  }],
	  [cmd.Name.EXECUTE_SCRIPT, post('/session/:sessionId/execute/sync')],
	  [cmd.Name.EXECUTE_ASYNC_SCRIPT, post('/session/:sessionId/execute/async')],
	  [cmd.Name.MAXIMIZE_WINDOW, post('/session/:sessionId/window/maximize')],
	  [cmd.Name.GET_WINDOW_POSITION, get('/session/:sessionId/window/position')],
	  [cmd.Name.SET_WINDOW_POSITION, post('/session/:sessionId/window/position')],
	  [cmd.Name.GET_WINDOW_SIZE, get('/session/:sessionId/window/size')],
	  [cmd.Name.SET_WINDOW_SIZE, post('/session/:sessionId/window/size')],
	  [cmd.Name.GET_CURRENT_WINDOW_HANDLE, get('/session/:sessionId/window')],
	  [cmd.Name.GET_WINDOW_HANDLES, get('/session/:sessionId/window/handles')],
	]);


	/**
	 * Handles sending HTTP messages to a remote end.
	 *
	 * @interface
	 */
	class Client {

	  /**
	   * Sends a request to the server. The client will automatically follow any
	   * redirects returned by the server, fulfilling the returned promise with the
	   * final response.
	   *
	   * @param {!Request} httpRequest The request to send.
	   * @return {!Promise<Response>} A promise that will be fulfilled with the
	   *     server's response.
	   */
	  send(httpRequest) {}
	}


	const CLIENTS =
	    /** !WeakMap<!Executor, !(Client|IThenable<!Client>)> */new WeakMap;


	/**
	 * Sends a request using the given executor.
	 * @param {!Executor} executor
	 * @param {!Request} request
	 * @return {!Promise<Response>}
	 */
	function doSend(executor, request) {
	  const client = CLIENTS.get(executor);
	  if (promise.isPromise(client)) {
	    return client.then(client => {
	      CLIENTS.set(executor, client);
	      return client.send(request);
	    });
	  } else {
	    return client.send(request);
	  }
	}


	/**
	 * @param {Map<string, CommandSpec>} customCommands
	 *     A map of custom command definitions.
	 * @param {boolean} w3c Whether to use W3C command mappings.
	 * @param {!cmd.Command} command The command to resolve.
	 * @return {!Promise<!Request>} A promise that will resolve with the
	 *     command to execute.
	 */
	function buildRequest(customCommands, w3c, command) {
	  LOG.finest(() => `Translating command: ${command.getName()}`);
	  let spec = customCommands && customCommands.get(command.getName());
	  if (spec) {
	    return toHttpRequest(spec);
	  }

	  if (w3c) {
	    spec = W3C_COMMAND_MAP.get(command.getName());
	    if (typeof spec === 'function') {
	      LOG.finest(() => `Transforming command for W3C: ${command.getName()}`);
	      return spec(command)
	          .then(newCommand => buildRequest(customCommands, w3c, newCommand));
	    } else if (spec) {
	      return toHttpRequest(spec);
	    }
	  }

	  spec = COMMAND_MAP.get(command.getName());
	  if (spec) {
	    return toHttpRequest(spec);
	  }
	  return Promise.reject(
	      new error.UnknownCommandError(
	          'Unrecognized command: ' + command.getName()));

	  /**
	   * @param {CommandSpec} resource
	   * @return {!Promise<!Request>}
	   */
	  function toHttpRequest(resource) {
	    LOG.finest(() => `Building HTTP request: ${JSON.stringify(resource)}`);
	    let parameters = command.getParameters();
	    let path = buildPath(resource.path, parameters);
	    return Promise.resolve(new Request(resource.method, path, parameters));
	  }
	}


	/**
	 * A command executor that communicates with the server using JSON over HTTP.
	 *
	 * By default, each instance of this class will use the legacy wire protocol
	 * from [Selenium project][json]. The executor will automatically switch to the
	 * [W3C wire protocol][w3c] if the remote end returns a compliant response to
	 * a new session command.
	 *
	 * [json]: https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol
	 * [w3c]: https://w3c.github.io/webdriver/webdriver-spec.html
	 *
	 * @implements {cmd.Executor}
	 */
	class Executor {
	  /**
	   * @param {!(Client|IThenable<!Client>)} client The client to use for sending
	   *     requests to the server, or a promise-like object that will resolve to
	   *     to the client.
	   */
	  constructor(client) {
	    CLIENTS.set(this, client);

	    /**
	     * Whether this executor should use the W3C wire protocol. The executor
	     * will automatically switch if the remote end sends a compliant response
	     * to a new session command, however, this property may be directly set to
	     * `true` to force the executor into W3C mode.
	     * @type {boolean}
	     */
	    this.w3c = false;

	    /** @private {Map<string, CommandSpec>} */
	    this.customCommands_ = null;

	    /** @private {!logging.Logger} */
	    this.log_ = logging.getLogger('webdriver.http.Executor');
	  }

	  /**
	   * Defines a new command for use with this executor. When a command is sent,
	   * the {@code path} will be preprocessed using the command's parameters; any
	   * path segments prefixed with ":" will be replaced by the parameter of the
	   * same name. For example, given "/person/:name" and the parameters
	   * "{name: 'Bob'}", the final command path will be "/person/Bob".
	   *
	   * @param {string} name The command name.
	   * @param {string} method The HTTP method to use when sending this command.
	   * @param {string} path The path to send the command to, relative to
	   *     the WebDriver server's command root and of the form
	   *     "/path/:variable/segment".
	   */
	  defineCommand(name, method, path) {
	    if (!this.customCommands_) {
	      this.customCommands_ = new Map;
	    }
	    this.customCommands_.set(name, {method, path});
	  }

	  /** @override */
	  execute(command) {
	    let request = buildRequest(this.customCommands_, this.w3c, command);
	    return request.then(request => {
	      this.log_.finer(() => `>>> ${request.method} ${request.path}`);
	      return doSend(this, request).then(response => {
	        this.log_.finer(() => `>>>\n${request}\n<<<\n${response}`);

	        let httpResponse = /** @type {!Response} */(response);
	        let {isW3C, value} = parseHttpResponse(command, httpResponse);

	        if (command.getName() === cmd.Name.NEW_SESSION
	            || command.getName() === cmd.Name.DESCRIBE_SESSION) {
	          if (!value || !value.sessionId) {
	            throw new error.WebDriverError(
	                `Unable to parse new session response: ${response.body}`);
	          }

	          // The remote end is a W3C compliant server if there is no `status`
	          // field in the response. This is not applicable for the DESCRIBE_SESSION
	          // command, which is not defined in the W3C spec.
	          if (command.getName() === cmd.Name.NEW_SESSION) {
	            this.w3c = this.w3c || isW3C;
	          }

	          // No implementations use the `capabilities` key yet...
	          let capabilities = value.capabilities || value.value;
	          return new Session(value.sessionId, capabilities);
	        }

	        return typeof value === 'undefined' ? null : value;
	      });
	    });
	  }
	}


	/**
	 * @param {string} str .
	 * @return {?} .
	 */
	function tryParse(str) {
	  try {
	    return JSON.parse(str);
	  } catch (ignored) {
	    // Do nothing.
	  }
	}


	/**
	 * Callback used to parse {@link Response} objects from a
	 * {@link HttpClient}.
	 *
	 * @param {!cmd.Command} command The command the response is for.
	 * @param {!Response} httpResponse The HTTP response to parse.
	 * @return {{isW3C: boolean, value: ?}} An object describing the parsed
	 *     response. This object will have two fields: `isW3C` indicates whether
	 *     the response looks like it came from a remote end that conforms with the
	 *     W3C WebDriver spec, and `value`, the actual response value.
	 * @throws {WebDriverError} If the HTTP response is an error.
	 */
	function parseHttpResponse(command, httpResponse) {
	  if (httpResponse.status < 200) {
	    // This should never happen, but throw the raw response so users report it.
	    throw new error.WebDriverError(
	        `Unexpected HTTP response:\n${httpResponse}`);
	  }

	  let parsed = tryParse(httpResponse.body);
	  if (parsed && typeof parsed === 'object') {
	    let value = parsed.value;
	    let isW3C =
	        value !== null && typeof value === 'object'
	            && typeof parsed.status === 'undefined';

	    if (!isW3C) {
	      error.checkLegacyResponse(parsed);

	      // Adjust legacy new session responses to look like W3C to simplify
	      // later processing.
	      if (command.getName() === cmd.Name.NEW_SESSION
	          || command.getName() == cmd.Name.DESCRIBE_SESSION) {
	        value = parsed;
	      }

	    } else if (httpResponse.status > 399) {
	      error.throwDecodedError(value);
	    }

	    return {isW3C, value};
	  }

	  if (parsed !== undefined) {
	    return {isW3C: false, value: parsed};
	  }

	  let value = httpResponse.body.replace(/\r\n/g, '\n');

	  // 404 represents an unknown command; anything else > 399 is a generic unknown
	  // error.
	  if (httpResponse.status == 404) {
	    throw new error.UnsupportedOperationError(value);
	  } else if (httpResponse.status >= 400) {
	    throw new error.WebDriverError(value);
	  }

	  return {isW3C: false, value: value || null};
	}


	/**
	 * Builds a fully qualified path using the given set of command parameters. Each
	 * path segment prefixed with ':' will be replaced by the value of the
	 * corresponding parameter. All parameters spliced into the path will be
	 * removed from the parameter map.
	 * @param {string} path The original resource path.
	 * @param {!Object<*>} parameters The parameters object to splice into the path.
	 * @return {string} The modified path.
	 */
	function buildPath(path, parameters) {
	  let pathParameters = path.match(/\/:(\w+)\b/g);
	  if (pathParameters) {
	    for (let i = 0; i < pathParameters.length; ++i) {
	      let key = pathParameters[i].substring(2);  // Trim the /:
	      if (key in parameters) {
	        let value = parameters[key];
	        if (WebElement.isId(value)) {
	          // When inserting a WebElement into the URL, only use its ID value,
	          // not the full JSON.
	          value = WebElement.extractId(value);
	        }
	        path = path.replace(pathParameters[i], '/' + value);
	        delete parameters[key];
	      } else {
	        throw new error.InvalidArgumentError(
	            'Missing required parameter: ' + key);
	      }
	    }
	  }
	  return path;
	}


	// PUBLIC API

	exports.Executor = Executor;
	exports.Client = Client;
	exports.Request = Request;
	exports.Response = Response;
	exports.buildPath = buildPath;  // Exported for testing.


/***/ }),
/* 97 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Contains several classes for handling commands.
	 */

	'use strict';

	/**
	 * Describes a command to execute.
	 * @final
	 */
	class Command {
	  /** @param {string} name The name of this command. */
	  constructor(name) {
	    /** @private {string} */
	    this.name_ = name;

	    /** @private {!Object<*>} */
	    this.parameters_ = {};
	  }

	  /** @return {string} This command's name. */
	  getName() {
	    return this.name_;
	  }

	  /**
	   * Sets a parameter to send with this command.
	   * @param {string} name The parameter name.
	   * @param {*} value The parameter value.
	   * @return {!Command} A self reference.
	   */
	  setParameter(name, value) {
	    this.parameters_[name] = value;
	    return this;
	  }

	  /**
	   * Sets the parameters for this command.
	   * @param {!Object<*>} parameters The command parameters.
	   * @return {!Command} A self reference.
	   */
	  setParameters(parameters) {
	    this.parameters_ = parameters;
	    return this;
	  }

	  /**
	   * Returns a named command parameter.
	   * @param {string} key The parameter key to look up.
	   * @return {*} The parameter value, or undefined if it has not been set.
	   */
	  getParameter(key) {
	    return this.parameters_[key];
	  }

	  /**
	   * @return {!Object<*>} The parameters to send with this command.
	   */
	  getParameters() {
	    return this.parameters_;
	  }
	}


	/**
	 * Enumeration of predefined names command names that all command processors
	 * will support.
	 * @enum {string}
	 */
	// TODO: Delete obsolete command names.
	const Name = {
	  GET_SERVER_STATUS: 'getStatus',

	  NEW_SESSION: 'newSession',
	  GET_SESSIONS: 'getSessions',
	  DESCRIBE_SESSION: 'getSessionCapabilities',

	  CLOSE: 'close',
	  QUIT: 'quit',

	  GET_CURRENT_URL: 'getCurrentUrl',
	  GET: 'get',
	  GO_BACK: 'goBack',
	  GO_FORWARD: 'goForward',
	  REFRESH: 'refresh',

	  ADD_COOKIE: 'addCookie',
	  GET_COOKIE: 'getCookie',
	  GET_ALL_COOKIES: 'getCookies',
	  DELETE_COOKIE: 'deleteCookie',
	  DELETE_ALL_COOKIES: 'deleteAllCookies',

	  GET_ACTIVE_ELEMENT: 'getActiveElement',
	  FIND_ELEMENT: 'findElement',
	  FIND_ELEMENTS: 'findElements',
	  FIND_CHILD_ELEMENT: 'findChildElement',
	  FIND_CHILD_ELEMENTS: 'findChildElements',

	  CLEAR_ELEMENT: 'clearElement',
	  CLICK_ELEMENT: 'clickElement',
	  SEND_KEYS_TO_ELEMENT: 'sendKeysToElement',
	  SUBMIT_ELEMENT: 'submitElement',

	  GET_CURRENT_WINDOW_HANDLE: 'getCurrentWindowHandle',
	  GET_WINDOW_HANDLES: 'getWindowHandles',
	  GET_WINDOW_POSITION: 'getWindowPosition',
	  SET_WINDOW_POSITION: 'setWindowPosition',
	  GET_WINDOW_SIZE: 'getWindowSize',
	  SET_WINDOW_SIZE: 'setWindowSize',
	  MAXIMIZE_WINDOW: 'maximizeWindow',

	  SWITCH_TO_WINDOW: 'switchToWindow',
	  SWITCH_TO_FRAME: 'switchToFrame',
	  GET_PAGE_SOURCE: 'getPageSource',
	  GET_TITLE: 'getTitle',

	  EXECUTE_SCRIPT: 'executeScript',
	  EXECUTE_ASYNC_SCRIPT: 'executeAsyncScript',

	  GET_ELEMENT_TEXT: 'getElementText',
	  GET_ELEMENT_TAG_NAME: 'getElementTagName',
	  IS_ELEMENT_SELECTED: 'isElementSelected',
	  IS_ELEMENT_ENABLED: 'isElementEnabled',
	  IS_ELEMENT_DISPLAYED: 'isElementDisplayed',
	  GET_ELEMENT_LOCATION: 'getElementLocation',
	  GET_ELEMENT_LOCATION_IN_VIEW: 'getElementLocationOnceScrolledIntoView',
	  GET_ELEMENT_SIZE: 'getElementSize',
	  GET_ELEMENT_ATTRIBUTE: 'getElementAttribute',
	  GET_ELEMENT_VALUE_OF_CSS_PROPERTY: 'getElementValueOfCssProperty',
	  ELEMENT_EQUALS: 'elementEquals',

	  SCREENSHOT: 'screenshot',
	  TAKE_ELEMENT_SCREENSHOT: 'takeElementScreenshot',
	  IMPLICITLY_WAIT: 'implicitlyWait',
	  SET_SCRIPT_TIMEOUT: 'setScriptTimeout',

	  GET_TIMEOUT: 'getTimeout',
	  SET_TIMEOUT: 'setTimeout',

	  ACCEPT_ALERT: 'acceptAlert',
	  DISMISS_ALERT: 'dismissAlert',
	  GET_ALERT_TEXT: 'getAlertText',
	  SET_ALERT_TEXT: 'setAlertValue',
	  SET_ALERT_CREDENTIALS: 'setAlertCredentials',

	  EXECUTE_SQL: 'executeSQL',
	  GET_LOCATION: 'getLocation',
	  SET_LOCATION: 'setLocation',
	  GET_APP_CACHE: 'getAppCache',
	  GET_APP_CACHE_STATUS: 'getStatus',
	  CLEAR_APP_CACHE: 'clearAppCache',
	  IS_BROWSER_ONLINE: 'isBrowserOnline',
	  SET_BROWSER_ONLINE: 'setBrowserOnline',

	  GET_LOCAL_STORAGE_ITEM: 'getLocalStorageItem',
	  GET_LOCAL_STORAGE_KEYS: 'getLocalStorageKeys',
	  SET_LOCAL_STORAGE_ITEM: 'setLocalStorageItem',
	  REMOVE_LOCAL_STORAGE_ITEM: 'removeLocalStorageItem',
	  CLEAR_LOCAL_STORAGE: 'clearLocalStorage',
	  GET_LOCAL_STORAGE_SIZE: 'getLocalStorageSize',

	  GET_SESSION_STORAGE_ITEM: 'getSessionStorageItem',
	  GET_SESSION_STORAGE_KEYS: 'getSessionStorageKey',
	  SET_SESSION_STORAGE_ITEM: 'setSessionStorageItem',
	  REMOVE_SESSION_STORAGE_ITEM: 'removeSessionStorageItem',
	  CLEAR_SESSION_STORAGE: 'clearSessionStorage',
	  GET_SESSION_STORAGE_SIZE: 'getSessionStorageSize',

	  SET_SCREEN_ORIENTATION: 'setScreenOrientation',
	  GET_SCREEN_ORIENTATION: 'getScreenOrientation',

	  // These belong to the Advanced user interactions - an element is
	  // optional for these commands.
	  CLICK: 'mouseClick',
	  DOUBLE_CLICK: 'mouseDoubleClick',
	  MOUSE_DOWN: 'mouseButtonDown',
	  MOUSE_UP: 'mouseButtonUp',
	  MOVE_TO: 'mouseMoveTo',
	  SEND_KEYS_TO_ACTIVE_ELEMENT: 'sendKeysToActiveElement',

	  // These belong to the Advanced Touch API
	  TOUCH_SINGLE_TAP: 'touchSingleTap',
	  TOUCH_DOWN: 'touchDown',
	  TOUCH_UP: 'touchUp',
	  TOUCH_MOVE: 'touchMove',
	  TOUCH_SCROLL: 'touchScroll',
	  TOUCH_DOUBLE_TAP: 'touchDoubleTap',
	  TOUCH_LONG_PRESS: 'touchLongPress',
	  TOUCH_FLICK: 'touchFlick',

	  GET_AVAILABLE_LOG_TYPES: 'getAvailableLogTypes',
	  GET_LOG: 'getLog',
	  GET_SESSION_LOGS: 'getSessionLogs',

	  // Non-standard commands used by the standalone Selenium server.
	  UPLOAD_FILE: 'uploadFile'
	};



	/**
	 * Handles the execution of WebDriver {@link Command commands}.
	 * @interface
	 */
	class Executor {
	  /**
	   * Executes the given {@code command}. If there is an error executing the
	   * command, the provided callback will be invoked with the offending error.
	   * Otherwise, the callback will be invoked with a null Error and non-null
	   * response object.
	   *
	   * @param {!Command} command The command to execute.
	   * @return {!Promise<?>} A promise that will be fulfilled with the command
	   *     result.
	   */
	  execute(command) {}
	}



	// PUBLIC API


	module.exports = {
	  Command: Command,
	  Name: Name,
	  Executor: Executor
	};


/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const {Capabilities} = __webpack_require__(99);


	/**
	 * Contains information about a single WebDriver session.
	 */
	class Session {

	  /**
	   * @param {string} id The session ID.
	   * @param {!(Object|Capabilities)} capabilities The session
	   *     capabilities.
	   */
	  constructor(id, capabilities) {
	    /** @private {string} */
	    this.id_ = id;

	    /** @private {!Capabilities} */
	    this.caps_ = capabilities instanceof Capabilities
	        ? /** @type {!Capabilities} */(capabilities)
	        : new Capabilities(capabilities);
	  }

	  /**
	   * @return {string} This session's ID.
	   */
	  getId() {
	    return this.id_;
	  }

	  /**
	   * @return {!Capabilities} This session's capabilities.
	   */
	  getCapabilities() {
	    return this.caps_;
	  }

	  /**
	   * Retrieves the value of a specific capability.
	   * @param {string} key The capability to retrieve.
	   * @return {*} The capability value.
	   */
	  getCapability(key) {
	    return this.caps_.get(key);
	  }

	  /**
	   * Returns the JSON representation of this object, which is just the string
	   * session ID.
	   * @return {string} The JSON representation of this Session.
	   */
	  toJSON() {
	    return this.getId();
	  }
	}


	// PUBLIC API


	module.exports = {Session: Session};


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines types related to describing the capabilities of a
	 * WebDriver session.
	 */

	const Symbols = __webpack_require__(100);


	/**
	 * Recognized browser names.
	 * @enum {string}
	 */
	const Browser = {
	  ANDROID: 'android',
	  CHROME: 'chrome',
	  EDGE: 'MicrosoftEdge',
	  FIREFOX: 'firefox',
	  IE: 'internet explorer',
	  INTERNET_EXPLORER: 'internet explorer',
	  IPAD: 'iPad',
	  IPHONE: 'iPhone',
	  OPERA: 'opera',
	  PHANTOM_JS: 'phantomjs',
	  SAFARI: 'safari',
	  HTMLUNIT: 'htmlunit'
	};


	/**
	 * Common Capability keys.
	 * @enum {string}
	 */
	const Capability = {

	  /**
	   * Indicates whether a driver should accept all SSL certs by default. This
	   * capability only applies when requesting a new session. To query whether
	   * a driver can handle insecure SSL certs, see {@link #SECURE_SSL}.
	   */
	  ACCEPT_SSL_CERTS: 'acceptSslCerts',


	  /**
	   * The browser name. Common browser names are defined in the {@link Browser}
	   * enum.
	   */
	  BROWSER_NAME: 'browserName',

	  /**
	   * Defines how elements should be scrolled into the viewport for interaction.
	   * This capability will be set to zero (0) if elements are aligned with the
	   * top of the viewport, or one (1) if aligned with the bottom. The default
	   * behavior is to align with the top of the viewport.
	   */
	  ELEMENT_SCROLL_BEHAVIOR: 'elementScrollBehavior',

	  /**
	   * Whether the driver is capable of handling modal alerts (e.g. alert,
	   * confirm, prompt). To define how a driver <i>should</i> handle alerts,
	   * use {@link #UNEXPECTED_ALERT_BEHAVIOR}.
	   */
	  HANDLES_ALERTS: 'handlesAlerts',

	  /**
	   * Key for the logging driver logging preferences.
	   */
	  LOGGING_PREFS: 'loggingPrefs',

	  /**
	   * Whether this session generates native events when simulating user input.
	   */
	  NATIVE_EVENTS: 'nativeEvents',

	  /**
	   * Describes the platform the browser is running on. Will be one of
	   * ANDROID, IOS, LINUX, MAC, UNIX, or WINDOWS. When <i>requesting</i> a
	   * session, ANY may be used to indicate no platform preference (this is
	   * semantically equivalent to omitting the platform capability).
	   */
	  PLATFORM: 'platform',

	  /**
	   * Describes the proxy configuration to use for a new WebDriver session.
	   */
	  PROXY: 'proxy',

	  /** Whether the driver supports changing the browser's orientation. */
	  ROTATABLE: 'rotatable',

	  /**
	   * Whether a driver is only capable of handling secure SSL certs. To request
	   * that a driver accept insecure SSL certs by default, use
	   * {@link #ACCEPT_SSL_CERTS}.
	   */
	  SECURE_SSL: 'secureSsl',

	  /** Whether the driver supports manipulating the app cache. */
	  SUPPORTS_APPLICATION_CACHE: 'applicationCacheEnabled',

	  /** Whether the driver supports locating elements with CSS selectors. */
	  SUPPORTS_CSS_SELECTORS: 'cssSelectorsEnabled',

	  /** Whether the browser supports JavaScript. */
	  SUPPORTS_JAVASCRIPT: 'javascriptEnabled',

	  /** Whether the driver supports controlling the browser's location info. */
	  SUPPORTS_LOCATION_CONTEXT: 'locationContextEnabled',

	  /** Whether the driver supports taking screenshots. */
	  TAKES_SCREENSHOT: 'takesScreenshot',

	  /**
	   * Defines how the driver should handle unexpected alerts. The value should
	   * be one of "accept", "dismiss", or "ignore".
	   */
	  UNEXPECTED_ALERT_BEHAVIOR: 'unexpectedAlertBehavior',

	  /** Defines the browser version. */
	  VERSION: 'version'
	};


	/**
	 * Describes how a proxy should be configured for a WebDriver session.
	 * @record
	 */
	function ProxyConfig() {}

	/**
	 * The proxy type. Must be one of {"manual", "pac", "system"}.
	 * @type {string}
	 */
	ProxyConfig.prototype.proxyType;

	/**
	 * URL for the PAC file to use. Only used if {@link #proxyType} is "pac".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.proxyAutoconfigUrl;

	/**
	 * The proxy host for FTP requests. Only used if {@link #proxyType} is "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.ftpProxy;

	/**
	 * The proxy host for HTTP requests. Only used if {@link #proxyType} is
	 * "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.httpProxy;

	/**
	 * The proxy host for HTTPS requests. Only used if {@link #proxyType} is
	 * "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.sslProxy;

	/**
	 * A comma delimited list of hosts which should bypass all proxies. Only used if
	 * {@link #proxyType} is "manual".
	 * @type {(string|undefined)}
	 */
	ProxyConfig.prototype.noProxy;


	/**
	 * Converts a generic hash object to a map.
	 * @param {!Object<string, ?>} hash The hash object.
	 * @return {!Map<string, ?>} The converted map.
	 */
	function toMap(hash) {
	  let m = new Map;
	  for (let key in hash) {
	    if (hash.hasOwnProperty(key)) {
	      m.set(key, hash[key]);
	    }
	  }
	  return m;
	}


	/**
	 * Describes a set of capabilities for a WebDriver session.
	 */
	class Capabilities extends Map {
	  /**
	   * @param {(Capabilities|Map<string, ?>|Object)=} opt_other Another set of
	   *     capabilities to initialize this instance from.
	   */
	  constructor(opt_other) {
	    if (opt_other && !(opt_other instanceof Map)) {
	      opt_other = toMap(opt_other);
	    }
	    super(opt_other);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Android.
	   */
	  static android() {
	    return new Capabilities()
	        .set(Capability.BROWSER_NAME, Browser.ANDROID)
	        .set(Capability.PLATFORM, 'ANDROID');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Chrome.
	   */
	  static chrome() {
	    return new Capabilities().set(Capability.BROWSER_NAME, Browser.CHROME);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Microsoft Edge.
	   */
	  static edge() {
	    return new Capabilities()
	        .set(Capability.BROWSER_NAME, Browser.EDGE)
	        .set(Capability.PLATFORM, 'WINDOWS');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Firefox.
	   */
	  static firefox() {
	    return new Capabilities().set(Capability.BROWSER_NAME, Browser.FIREFOX);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Internet Explorer.
	   */
	  static ie() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.INTERNET_EXPLORER).
	        set(Capability.PLATFORM, 'WINDOWS');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for iPad.
	   */
	  static ipad() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.IPAD).
	        set(Capability.PLATFORM, 'MAC');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for iPhone.
	   */
	  static iphone() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.IPHONE).
	        set(Capability.PLATFORM, 'MAC');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Opera.
	   */
	  static opera() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.OPERA);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for PhantomJS.
	   */
	  static phantomjs() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.PHANTOM_JS);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for Safari.
	   */
	  static safari() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.SAFARI).
	        set(Capability.PLATFORM, 'MAC');
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for HTMLUnit.
	   */
	  static htmlunit() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.HTMLUNIT);
	  }

	  /**
	   * @return {!Capabilities} A basic set of capabilities for HTMLUnit
	   *     with enabled Javascript.
	   */
	  static htmlunitwithjs() {
	    return new Capabilities().
	        set(Capability.BROWSER_NAME, Browser.HTMLUNIT).
	        set(Capability.SUPPORTS_JAVASCRIPT, true);
	  }

	  /**
	   * @return {!Object<string, ?>} The JSON representation of this instance.
	   *     Note, the returned object may contain nested promised values.
	   * @suppress {checkTypes} Suppress [] access on a struct (state inherited from
	   *     Map).
	   */
	  [Symbols.serialize]() {
	    return serialize(this);
	  }

	  /**
	   * Merges another set of capabilities into this instance.
	   * @param {!(Capabilities|Map<String, ?>|Object<string, ?>)} other The other
	   *     set of capabilities to merge.
	   * @return {!Capabilities} A self reference.
	   */
	  merge(other) {
	    if (!other) {
	      throw new TypeError('no capabilities provided for merge');
	    }

	    if (!(other instanceof Map)) {
	      other = toMap(other);
	    }

	    for (let key of other.keys()) {
	      this.set(key, other.get(key));
	    }

	    return this;
	  }

	  /**
	   * @param {string} key The capability key.
	   * @param {*} value The capability value.
	   * @return {!Capabilities} A self reference.
	   * @throws {TypeError} If the `key` is not a string.
	   * @override
	   */
	  set(key, value) {
	    if (typeof key !== 'string') {
	      throw new TypeError('Capability keys must be strings: ' + typeof key);
	    }
	    super.set(key, value);
	    return this;
	  }

	  /**
	   * Sets the logging preferences. Preferences may be specified as a
	   * {@link ./logging.Preferences} instance, or as a map of log-type to
	   * log-level.
	   * @param {!(./logging.Preferences|Object<string>)} prefs The logging
	   *     preferences.
	   * @return {!Capabilities} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    return this.set(Capability.LOGGING_PREFS, prefs);
	  }

	  /**
	   * Sets the proxy configuration for this instance.
	   * @param {ProxyConfig} proxy The desired proxy configuration.
	   * @return {!Capabilities} A self reference.
	   */
	  setProxy(proxy) {
	    return this.set(Capability.PROXY, proxy);
	  }

	  /**
	   * Sets whether native events should be used.
	   * @param {boolean} enabled Whether to enable native events.
	   * @return {!Capabilities} A self reference.
	   */
	  setEnableNativeEvents(enabled) {
	    return this.set(Capability.NATIVE_EVENTS, enabled);
	  }

	  /**
	   * Sets how elements should be scrolled into view for interaction.
	   * @param {number} behavior The desired scroll behavior: either 0 to align
	   *     with the top of the viewport or 1 to align with the bottom.
	   * @return {!Capabilities} A self reference.
	   */
	  setScrollBehavior(behavior) {
	    return this.set(Capability.ELEMENT_SCROLL_BEHAVIOR, behavior);
	  }

	  /**
	   * Sets the default action to take with an unexpected alert before returning
	   * an error.
	   * @param {string} behavior The desired behavior should be "accept",
	   *     "dismiss", or "ignore". Defaults to "dismiss".
	   * @return {!Capabilities} A self reference.
	   */
	  setAlertBehavior(behavior) {
	    return this.set(Capability.UNEXPECTED_ALERT_BEHAVIOR, behavior);
	  }
	}


	/**
	 * Serializes a capabilities object. This is defined as a standalone function
	 * so it may be type checked (where Capabilities[Symbols.serialize] has type
	 * checking disabled since it is defined with [] access on a struct).
	 *
	 * @param {!Capabilities} caps The capabilities to serialize.
	 * @return {!Object<string, ?>} The JSON representation of this instance.
	 *     Note, the returned object may contain nested promised values.
	 */
	function serialize(caps) {
	  let ret = {};
	  for (let key of caps.keys()) {
	    let cap = caps.get(key);
	    if (cap !== undefined && cap !== null) {
	      ret[key] = cap;
	    }
	  }
	  return ret;
	}


	// PUBLIC API


	module.exports = {
	  Browser: Browser,
	  Capabilities: Capabilities,
	  Capability: Capability,
	  ProxyConfig: ProxyConfig
	};


/***/ }),
/* 100 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines well-known symbols used within the selenium-webdriver
	 * library.
	 */


	module.exports = {
	  /**
	   * The serialize symbol specifies a method that returns an object's serialized
	   * representation. If an object's serialized form is not immediately
	   * available, the serialize method will return a promise that will be resolved
	   * with the serialized form.
	   *
	   * Note that the described method is analogous to objects that define a
	   * `toJSON()` method, except the serialized result may be a promise, or
	   * another object with a promised property.
	   */
	  serialize: Symbol('serialize')
	};


/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview The heart of the WebDriver JavaScript API.
	 */

	'use strict';

	const actions = __webpack_require__(102);
	const by = __webpack_require__(104);
	const Capabilities = __webpack_require__(99).Capabilities;
	const command = __webpack_require__(97);
	const error = __webpack_require__(38);
	const input = __webpack_require__(103);
	const logging = __webpack_require__(40);
	const {Session} = __webpack_require__(98);
	const Symbols = __webpack_require__(100);
	const promise = __webpack_require__(36);


	/**
	 * Defines a condition for use with WebDriver's {@linkplain WebDriver#wait wait
	 * command}.
	 *
	 * @template OUT
	 */
	class Condition {
	  /**
	   * @param {string} message A descriptive error message. Should complete the
	   *     sentence "Waiting [...]"
	   * @param {function(!WebDriver): OUT} fn The condition function to
	   *     evaluate on each iteration of the wait loop.
	   */
	  constructor(message, fn) {
	    /** @private {string} */
	    this.description_ = 'Waiting ' + message;

	    /** @type {function(!WebDriver): OUT} */
	    this.fn = fn;
	  }

	  /** @return {string} A description of this condition. */
	  description() {
	    return this.description_;
	  }
	}


	/**
	 * Defines a condition that will result in a {@link WebElement}.
	 *
	 * @extends {Condition<!(WebElement|IThenable<!WebElement>)>}
	 */
	class WebElementCondition extends Condition {
	  /**
	   * @param {string} message A descriptive error message. Should complete the
	   *     sentence "Waiting [...]"
	   * @param {function(!WebDriver): !(WebElement|IThenable<!WebElement>)}
	   *     fn The condition function to evaluate on each iteration of the wait
	   *     loop.
	   */
	  constructor(message, fn) {
	    super(message, fn);
	  }
	}


	//////////////////////////////////////////////////////////////////////////////
	//
	//  WebDriver
	//
	//////////////////////////////////////////////////////////////////////////////


	/**
	 * Translates a command to its wire-protocol representation before passing it
	 * to the given `executor` for execution.
	 * @param {!command.Executor} executor The executor to use.
	 * @param {!command.Command} command The command to execute.
	 * @return {!Promise} A promise that will resolve with the command response.
	 */
	function executeCommand(executor, command) {
	  return toWireValue(command.getParameters()).
	      then(function(parameters) {
	        command.setParameters(parameters);
	        return executor.execute(command);
	      });
	}


	/**
	 * Converts an object to its JSON representation in the WebDriver wire protocol.
	 * When converting values of type object, the following steps will be taken:
	 * <ol>
	 * <li>if the object is a WebElement, the return value will be the element's
	 *     server ID
	 * <li>if the object defines a {@link Symbols.serialize} method, this algorithm
	 *     will be recursively applied to the object's serialized representation
	 * <li>if the object provides a "toJSON" function, this algorithm will
	 *     recursively be applied to the result of that function
	 * <li>otherwise, the value of each key will be recursively converted according
	 *     to the rules above.
	 * </ol>
	 *
	 * @param {*} obj The object to convert.
	 * @return {!Promise<?>} A promise that will resolve to the input value's JSON
	 *     representation.
	 */
	function toWireValue(obj) {
	  if (promise.isPromise(obj)) {
	    return Promise.resolve(obj).then(toWireValue);
	  }
	  return Promise.resolve(convertValue(obj));
	}


	function convertValue(value) {
	  if (value === void 0 || value === null) {
	    return value;
	  }

	  if (typeof value === 'boolean'
	      || typeof value === 'number'
	      || typeof value === 'string') {
	    return value;
	  }

	  if (Array.isArray(value)) {
	    return convertKeys(value);
	  }

	  if (typeof value === 'function') {
	    return '' + value;
	  }

	  if (typeof value[Symbols.serialize] === 'function') {
	    return toWireValue(value[Symbols.serialize]());
	  } else if (typeof value.toJSON === 'function') {
	    return toWireValue(value.toJSON());
	  }
	  return convertKeys(value);
	}


	function convertKeys(obj) {
	  const isArray = Array.isArray(obj);
	  const numKeys = isArray ? obj.length : Object.keys(obj).length;
	  const ret = isArray ? new Array(numKeys) : {};
	  if (!numKeys) {
	    return Promise.resolve(ret);
	  }

	  let numResolved = 0;

	  function forEachKey(obj, fn) {
	    if (Array.isArray(obj)) {
	      for (let i = 0, n = obj.length; i < n; i++) {
	        fn(obj[i], i);
	      }
	    } else {
	      for (let key in obj) {
	        fn(obj[key], key);
	      }
	    }
	  }

	  return new Promise(function(done, reject) {
	    forEachKey(obj, function(value, key) {
	      if (promise.isPromise(value)) {
	        value.then(toWireValue).then(setValue, reject);
	      } else {
	        value = convertValue(value);
	        if (promise.isPromise(value)) {
	          value.then(toWireValue).then(setValue, reject);
	        } else {
	          setValue(value);
	        }
	      }

	      function setValue(value) {
	        ret[key] = value;
	        maybeFulfill();
	      }
	    });

	    function maybeFulfill() {
	      if (++numResolved === numKeys) {
	        done(ret);
	      }
	    }
	  });
	}


	/**
	 * Converts a value from its JSON representation according to the WebDriver wire
	 * protocol. Any JSON object that defines a WebElement ID will be decoded to a
	 * {@link WebElement} object. All other values will be passed through as is.
	 *
	 * @param {!WebDriver} driver The driver to use as the parent of any unwrapped
	 *     {@link WebElement} values.
	 * @param {*} value The value to convert.
	 * @return {*} The converted value.
	 */
	function fromWireValue(driver, value) {
	  if (Array.isArray(value)) {
	    value = value.map(v => fromWireValue(driver, v));
	  } else if (WebElement.isId(value)) {
	    let id = WebElement.extractId(value);
	    value = new WebElement(driver, id);
	  } else if (value && typeof value === 'object') {
	    let result = {};
	    for (let key in value) {
	      if (value.hasOwnProperty(key)) {
	        result[key] = fromWireValue(driver, value[key]);
	      }
	    }
	    value = result;
	  }
	  return value;
	}


	/**
	 * Structural interface for a WebDriver client.
	 *
	 * @record
	 */
	class IWebDriver {

	  /** @return {!promise.ControlFlow} The control flow used by this instance. */
	  controlFlow() {}

	  /**
	   * Schedules a {@link command.Command} to be executed by this driver's
	   * {@link command.Executor}.
	   *
	   * @param {!command.Command} command The command to schedule.
	   * @param {string} description A description of the command for debugging.
	   * @return {!promise.Thenable<T>} A promise that will be resolved
	   *     with the command result.
	   * @template T
	   */
	  schedule(command, description) {}

	  /**
	   * Sets the {@linkplain input.FileDetector file detector} that should be
	   * used with this instance.
	   * @param {input.FileDetector} detector The detector to use or {@code null}.
	   */
	  setFileDetector(detector) {}

	  /**
	   * @return {!command.Executor} The command executor used by this instance.
	   */
	  getExecutor() {}

	  /**
	   * @return {!promise.Thenable<!Session>} A promise for this client's session.
	   */
	  getSession() {}

	  /**
	   * @return {!promise.Thenable<!Capabilities>} A promise that will resolve with
	   *     the this instance's capabilities.
	   */
	  getCapabilities() {}

	  /**
	   * Terminates the browser session. After calling quit, this instance will be
	   * invalidated and may no longer be used to issue commands against the
	   * browser.
	   *
	   * @return {!promise.Thenable<void>} A promise that will be resolved when the
	   *     command has completed.
	   */
	  quit() {}

	  /**
	   * Creates a new action sequence using this driver. The sequence will not be
	   * scheduled for execution until {@link actions.ActionSequence#perform} is
	   * called. Example:
	   *
	   *     driver.actions().
	   *         mouseDown(element1).
	   *         mouseMove(element2).
	   *         mouseUp().
	   *         perform();
	   *
	   * @return {!actions.ActionSequence} A new action sequence for this instance.
	   */
	  actions() {}

	  /**
	   * Creates a new touch sequence using this driver. The sequence will not be
	   * scheduled for execution until {@link actions.TouchSequence#perform} is
	   * called. Example:
	   *
	   *     driver.touchActions().
	   *         tap(element1).
	   *         doubleTap(element2).
	   *         perform();
	   *
	   * @return {!actions.TouchSequence} A new touch sequence for this instance.
	   */
	  touchActions() {}

	  /**
	   * Schedules a command to execute JavaScript in the context of the currently
	   * selected frame or window. The script fragment will be executed as the body
	   * of an anonymous function. If the script is provided as a function object,
	   * that function will be converted to a string for injection into the target
	   * window.
	   *
	   * Any arguments provided in addition to the script will be included as script
	   * arguments and may be referenced using the {@code arguments} object.
	   * Arguments may be a boolean, number, string, or {@linkplain WebElement}.
	   * Arrays and objects may also be used as script arguments as long as each item
	   * adheres to the types previously mentioned.
	   *
	   * The script may refer to any variables accessible from the current window.
	   * Furthermore, the script will execute in the window's context, thus
	   * {@code document} may be used to refer to the current document. Any local
	   * variables will not be available once the script has finished executing,
	   * though global variables will persist.
	   *
	   * If the script has a return value (i.e. if the script contains a return
	   * statement), then the following steps will be taken for resolving this
	   * functions return value:
	   *
	   * - For a HTML element, the value will resolve to a {@linkplain WebElement}
	   * - Null and undefined return values will resolve to null</li>
	   * - Booleans, numbers, and strings will resolve as is</li>
	   * - Functions will resolve to their string representation</li>
	   * - For arrays and objects, each member item will be converted according to
	   *     the rules above
	   *
	   * @param {!(string|Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {!promise.Thenable<T>} A promise that will resolve to the
	   *    scripts return value.
	   * @template T
	   */
	  executeScript(script, var_args) {}

	  /**
	   * Schedules a command to execute asynchronous JavaScript in the context of the
	   * currently selected frame or window. The script fragment will be executed as
	   * the body of an anonymous function. If the script is provided as a function
	   * object, that function will be converted to a string for injection into the
	   * target window.
	   *
	   * Any arguments provided in addition to the script will be included as script
	   * arguments and may be referenced using the {@code arguments} object.
	   * Arguments may be a boolean, number, string, or {@code WebElement}.
	   * Arrays and objects may also be used as script arguments as long as each item
	   * adheres to the types previously mentioned.
	   *
	   * Unlike executing synchronous JavaScript with {@link #executeScript},
	   * scripts executed with this function must explicitly signal they are finished
	   * by invoking the provided callback. This callback will always be injected
	   * into the executed function as the last argument, and thus may be referenced
	   * with {@code arguments[arguments.length - 1]}. The following steps will be
	   * taken for resolving this functions return value against the first argument
	   * to the script's callback function:
	   *
	   * - For a HTML element, the value will resolve to a
	   *     {@link WebElement}
	   * - Null and undefined return values will resolve to null
	   * - Booleans, numbers, and strings will resolve as is
	   * - Functions will resolve to their string representation
	   * - For arrays and objects, each member item will be converted according to
	   *     the rules above
	   *
	   * __Example #1:__ Performing a sleep that is synchronized with the currently
	   * selected window:
	   *
	   *     var start = new Date().getTime();
	   *     driver.executeAsyncScript(
	   *         'window.setTimeout(arguments[arguments.length - 1], 500);').
	   *         then(function() {
	   *           console.log(
	   *               'Elapsed time: ' + (new Date().getTime() - start) + ' ms');
	   *         });
	   *
	   * __Example #2:__ Synchronizing a test with an AJAX application:
	   *
	   *     var button = driver.findElement(By.id('compose-button'));
	   *     button.click();
	   *     driver.executeAsyncScript(
	   *         'var callback = arguments[arguments.length - 1];' +
	   *         'mailClient.getComposeWindowWidget().onload(callback);');
	   *     driver.switchTo().frame('composeWidget');
	   *     driver.findElement(By.id('to')).sendKeys('dog@example.com');
	   *
	   * __Example #3:__ Injecting a XMLHttpRequest and waiting for the result. In
	   * this example, the inject script is specified with a function literal. When
	   * using this format, the function is converted to a string for injection, so it
	   * should not reference any symbols not defined in the scope of the page under
	   * test.
	   *
	   *     driver.executeAsyncScript(function() {
	   *       var callback = arguments[arguments.length - 1];
	   *       var xhr = new XMLHttpRequest();
	   *       xhr.open("GET", "/resource/data.json", true);
	   *       xhr.onreadystatechange = function() {
	   *         if (xhr.readyState == 4) {
	   *           callback(xhr.responseText);
	   *         }
	   *       };
	   *       xhr.send('');
	   *     }).then(function(str) {
	   *       console.log(JSON.parse(str)['food']);
	   *     });
	   *
	   * @param {!(string|Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {!promise.Thenable<T>} A promise that will resolve to the
	   *    scripts return value.
	   * @template T
	   */
	  executeAsyncScript(script, var_args) {}

	  /**
	   * Schedules a command to execute a custom function.
	   * @param {function(...): (T|IThenable<T>)} fn The function to execute.
	   * @param {Object=} opt_scope The object in whose scope to execute the function.
	   * @param {...*} var_args Any arguments to pass to the function.
	   * @return {!promise.Thenable<T>} A promise that will be resolved'
	   *     with the function's result.
	   * @template T
	   */
	  call(fn, opt_scope, var_args) {}

	  /**
	   * Schedules a command to wait for a condition to hold. The condition may be
	   * specified by a {@link Condition}, as a custom function, or as any
	   * promise-like thenable.
	   *
	   * For a {@link Condition} or function, the wait will repeatedly
	   * evaluate the condition until it returns a truthy value. If any errors occur
	   * while evaluating the condition, they will be allowed to propagate. In the
	   * event a condition returns a {@link promise.Promise promise}, the polling
	   * loop will wait for it to be resolved and use the resolved value for whether
	   * the condition has been satisfied. Note the resolution time for a promise
	   * is factored into whether a wait has timed out.
	   *
	   * Note, if the provided condition is a {@link WebElementCondition}, then
	   * the wait will return a {@link WebElementPromise} that will resolve to the
	   * element that satisfied the condition.
	   *
	   * _Example:_ waiting up to 10 seconds for an element to be present on the
	   * page.
	   *
	   *     var button = driver.wait(until.elementLocated(By.id('foo')), 10000);
	   *     button.click();
	   *
	   * This function may also be used to block the command flow on the resolution
	   * of any thenable promise object. When given a promise, the command will
	   * simply wait for its resolution before completing. A timeout may be provided
	   * to fail the command if the promise does not resolve before the timeout
	   * expires.
	   *
	   * _Example:_ Suppose you have a function, `startTestServer`, that returns a
	   * promise for when a server is ready for requests. You can block a WebDriver
	   * client on this promise with:
	   *
	   *     var started = startTestServer();
	   *     driver.wait(started, 5 * 1000, 'Server should start within 5 seconds');
	   *     driver.get(getServerUrl());
	   *
	   * @param {!(IThenable<T>|
	   *           Condition<T>|
	   *           function(!WebDriver): T)} condition The condition to
	   *     wait on, defined as a promise, condition object, or  a function to
	   *     evaluate as a condition.
	   * @param {number=} opt_timeout How long to wait for the condition to be true.
	   * @param {string=} opt_message An optional message to use if the wait times
	   *     out.
	   * @return {!(promise.Thenable<T>|WebElementPromise)} A promise that will be
	   *     resolved with the first truthy value returned by the condition
	   *     function, or rejected if the condition times out. If the input
	   *     input condition is an instance of a {@link WebElementCondition},
	   *     the returned value will be a {@link WebElementPromise}.
	   * @throws {TypeError} if the provided `condition` is not a valid type.
	   * @template T
	   */
	  wait(condition, opt_timeout, opt_message) {}

	  /**
	   * Schedules a command to make the driver sleep for the given amount of time.
	   * @param {number} ms The amount of time, in milliseconds, to sleep.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the sleep has finished.
	   */
	  sleep(ms) {}

	  /**
	   * Schedules a command to retrieve the current window handle.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current window handle.
	   */
	  getWindowHandle() {}

	  /**
	   * Schedules a command to retrieve the current list of available window handles.
	   * @return {!promise.Thenable<!Array<string>>} A promise that will
	   *     be resolved with an array of window handles.
	   */
	  getAllWindowHandles() {}

	  /**
	   * Schedules a command to retrieve the current page's source. The page source
	   * returned is a representation of the underlying DOM: do not expect it to be
	   * formatted or escaped in the same way as the response sent from the web
	   * server.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current page source.
	   */
	  getPageSource() {}

	  /**
	   * Schedules a command to close the current window.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  close() {}

	  /**
	   * Schedules a command to navigate to the given URL.
	   * @param {string} url The fully qualified URL to open.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the document has finished loading.
	   */
	  get(url) {}

	  /**
	   * Schedules a command to retrieve the URL of the current page.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current URL.
	   */
	  getCurrentUrl() {}

	  /**
	   * Schedules a command to retrieve the current page's title.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the current page's title.
	   */
	  getTitle() {}

	  /**
	   * Schedule a command to find an element on the page. If the element cannot be
	   * found, a {@link bot.ErrorCode.NO_SUCH_ELEMENT} result will be returned
	   * by the driver. Unlike other commands, this error cannot be suppressed. In
	   * other words, scheduling a command to find an element doubles as an assert
	   * that the element is present on the page. To test whether an element is
	   * present on the page, use {@link #findElements}:
	   *
	   *     driver.findElements(By.id('foo'))
	   *         .then(found => console.log('Element found? %s', !!found.length));
	   *
	   * The search criteria for an element may be defined using one of the
	   * factories in the {@link webdriver.By} namespace, or as a short-hand
	   * {@link webdriver.By.Hash} object. For example, the following two statements
	   * are equivalent:
	   *
	   *     var e1 = driver.findElement(By.id('foo'));
	   *     var e2 = driver.findElement({id:'foo'});
	   *
	   * You may also provide a custom locator function, which takes as input this
	   * instance and returns a {@link WebElement}, or a promise that will resolve
	   * to a WebElement. If the returned promise resolves to an array of
	   * WebElements, WebDriver will use the first element. For example, to find the
	   * first visible link on a page, you could write:
	   *
	   *     var link = driver.findElement(firstVisibleLink);
	   *
	   *     function firstVisibleLink(driver) {
	   *       var links = driver.findElements(By.tagName('a'));
	   *       return promise.filter(links, function(link) {
	   *         return link.isDisplayed();
	   *       });
	   *     }
	   *
	   * @param {!(by.By|Function)} locator The locator to use.
	   * @return {!WebElementPromise} A WebElement that can be used to issue
	   *     commands against the located element. If the element is not found, the
	   *     element will be invalidated and all scheduled commands aborted.
	   */
	  findElement(locator) {}

	  /**
	   * Schedule a command to search for multiple elements on the page.
	   *
	   * @param {!(by.By|Function)} locator The locator to use.
	   * @return {!promise.Thenable<!Array<!WebElement>>} A
	   *     promise that will resolve to an array of WebElements.
	   */
	  findElements(locator) {}

	  /**
	   * Schedule a command to take a screenshot. The driver makes a best effort to
	   * return a screenshot of the following, in order of preference:
	   *
	   * 1. Entire page
	   * 2. Current window
	   * 3. Visible portion of the current frame
	   * 4. The entire display containing the browser
	   *
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved to the screenshot as a base-64 encoded PNG.
	   */
	  takeScreenshot() {}

	  /**
	   * @return {!Options} The options interface for this instance.
	   */
	  manage() {}

	  /**
	   * @return {!Navigation} The navigation interface for this instance.
	   */
	  navigate() {}

	  /**
	   * @return {!TargetLocator} The target locator interface for this
	   *     instance.
	   */
	  switchTo() {}
	}


	/**
	 * Each WebDriver instance provides automated control over a browser session.
	 *
	 * @implements {IWebDriver}
	 */
	class WebDriver {
	  /**
	   * @param {!(Session|IThenable<!Session>)} session Either a known session or a
	   *     promise that will be resolved to a session.
	   * @param {!command.Executor} executor The executor to use when sending
	   *     commands to the browser.
	   * @param {promise.ControlFlow=} opt_flow The flow to
	   *     schedule commands through. Defaults to the active flow object.
	   * @param {(function(this: void): ?)=} opt_onQuit A function to call, if any,
	   *     when the session is terminated.
	   */
	  constructor(session, executor, opt_flow, opt_onQuit) {
	    /** @private {!promise.ControlFlow} */
	    this.flow_ = opt_flow || promise.controlFlow();

	    /** @private {!promise.Thenable<!Session>} */
	    this.session_ = this.flow_.promise(resolve => resolve(session));

	    /** @private {!command.Executor} */
	    this.executor_ = executor;

	    /** @private {input.FileDetector} */
	    this.fileDetector_ = null;

	    /** @private @const {(function(this: void): ?|undefined)} */
	    this.onQuit_ = opt_onQuit;
	  }

	  /**
	   * Creates a new WebDriver client for an existing session.
	   * @param {!command.Executor} executor Command executor to use when querying
	   *     for session details.
	   * @param {string} sessionId ID of the session to attach to.
	   * @param {promise.ControlFlow=} opt_flow The control flow all
	   *     driver commands should execute under. Defaults to the
	   *     {@link promise.controlFlow() currently active}  control flow.
	   * @return {!WebDriver} A new client for the specified session.
	   */
	  static attachToSession(executor, sessionId, opt_flow) {
	    let flow = opt_flow || promise.controlFlow();
	    let cmd = new command.Command(command.Name.DESCRIBE_SESSION)
	        .setParameter('sessionId', sessionId);
	    let session = flow.execute(
	        () => executeCommand(executor, cmd).catch(err => {
	          // The DESCRIBE_SESSION command is not supported by the W3C spec, so
	          // if we get back an unknown command, just return a session with
	          // unknown capabilities.
	          if (err instanceof error.UnknownCommandError) {
	            return new Session(sessionId, new Capabilities);
	          }
	          throw err;
	        }),
	        'WebDriver.attachToSession()');
	    return new WebDriver(session, executor, flow);
	  }

	  /**
	   * Creates a new WebDriver session.
	   *
	   * By default, the requested session `capabilities` are merely "desired" and
	   * the remote end will still create a new session even if it cannot satisfy
	   * all of the requested capabilities. You can query which capabilities a
	   * session actually has using the
	   * {@linkplain #getCapabilities() getCapabilities()} method on the returned
	   * WebDriver instance.
	   *
	   * To define _required capabilities_, provide the `capabilities` as an object
	   * literal with `required` and `desired` keys. The `desired` key may be
	   * omitted if all capabilities are required, and vice versa. If the server
	   * cannot create a session with all of the required capabilities, it will
	   * return an {@linkplain error.SessionNotCreatedError}.
	   *
	   *     let required = new Capabilities().set('browserName', 'firefox');
	   *     let desired = new Capabilities().set('version', '45');
	   *     let driver = WebDriver.createSession(executor, {required, desired});
	   *
	   * This function will always return a WebDriver instance. If there is an error
	   * creating the session, such as the aforementioned SessionNotCreatedError,
	   * the driver will have a rejected {@linkplain #getSession session} promise.
	   * It is recommended that this promise is left _unhandled_ so it will
	   * propagate through the {@linkplain promise.ControlFlow control flow} and
	   * cause subsequent commands to fail.
	   *
	   *     let required = Capabilities.firefox();
	   *     let driver = WebDriver.createSession(executor, {required});
	   *
	   *     // If the createSession operation failed, then this command will also
	   *     // also fail, propagating the creation failure.
	   *     driver.get('http://www.google.com').catch(e => console.log(e));
	   *
	   * @param {!command.Executor} executor The executor to create the new session
	   *     with.
	   * @param {(!Capabilities|
	   *          {desired: (Capabilities|undefined),
	   *           required: (Capabilities|undefined)})} capabilities The desired
	   *     capabilities for the new session.
	   * @param {promise.ControlFlow=} opt_flow The control flow all driver
	   *     commands should execute under, including the initial session creation.
	   *     Defaults to the {@link promise.controlFlow() currently active}
	   *     control flow.
	   * @param {(function(new: WebDriver,
	   *                   !IThenable<!Session>,
	   *                   !command.Executor,
	   *                   promise.ControlFlow=))=} opt_ctor
	   *    A reference to the constructor of the specific type of WebDriver client
	   *    to instantiate. Will create a vanilla {@linkplain WebDriver} instance
	   *    if a constructor is not provided.
	   * @param {(function(this: void): ?)=} opt_onQuit A callback to invoke when
	   *    the newly created session is terminated. This should be used to clean
	   *    up any resources associated with the session.
	   * @return {!WebDriver} The driver for the newly created session.
	   */
	  static createSession(
	        executor, capabilities, opt_flow, opt_ctor, opt_onQuit) {
	    let flow = opt_flow || promise.controlFlow();
	    let cmd = new command.Command(command.Name.NEW_SESSION);

	    if (capabilities && (capabilities.desired || capabilities.required)) {
	      cmd.setParameter('desiredCapabilities', capabilities.desired);
	      cmd.setParameter('requiredCapabilities', capabilities.required);
	    } else {
	      cmd.setParameter('desiredCapabilities', capabilities);
	    }

	    let session = flow.execute(
	        () => executeCommand(executor, cmd),
	        'WebDriver.createSession()');
	    if (typeof opt_onQuit === 'function') {
	      session = session.catch(err => {
	        return Promise.resolve(opt_onQuit.call(void 0)).then(_ => {throw err;});
	      });
	    }
	    const ctor = opt_ctor || WebDriver;
	    return new ctor(session, executor, flow, opt_onQuit);
	  }

	  /** @override */
	  controlFlow() {
	    return this.flow_;
	  }

	  /** @override */
	  schedule(command, description) {
	    command.setParameter('sessionId', this.session_);

	    // If any of the command parameters are rejected promises, those
	    // rejections may be reported as unhandled before the control flow
	    // attempts to execute the command. To ensure parameters errors
	    // propagate through the command itself, we resolve all of the
	    // command parameters now, but suppress any errors until the ControlFlow
	    // actually executes the command. This addresses scenarios like catching
	    // an element not found error in:
	    //
	    //     driver.findElement(By.id('foo')).click().catch(function(e) {
	    //       if (e instanceof NoSuchElementError) {
	    //         // Do something.
	    //       }
	    //     });
	    var prepCommand = toWireValue(command.getParameters());
	    prepCommand.catch(function() {});

	    var flow = this.flow_;
	    var executor = this.executor_;
	    return flow.execute(() => {
	      // Retrieve resolved command parameters; any previously suppressed errors
	      // will now propagate up through the control flow as part of the command
	      // execution.
	      return prepCommand.then(function(parameters) {
	        command.setParameters(parameters);
	        return executor.execute(command);
	      }).then(value => fromWireValue(this, value));
	    }, description);
	  }

	  /** @override */
	  setFileDetector(detector) {
	    this.fileDetector_ = detector;
	  }

	  /** @override */
	  getExecutor() {
	    return this.executor_;
	  }

	  /** @override */
	  getSession() {
	    return this.session_;
	  }

	  /** @override */
	  getCapabilities() {
	    return this.session_.then(s => s.getCapabilities());
	  }

	  /** @override */
	  quit() {
	    var result = this.schedule(
	        new command.Command(command.Name.QUIT),
	        'WebDriver.quit()');
	    // Delete our session ID when the quit command finishes; this will allow us
	    // to throw an error when attempting to use a driver post-quit.
	    return /** @type {!promise.Thenable} */(promise.finally(result, () => {
	      this.session_ = this.flow_.promise((_, reject) => {
	        reject(new error.NoSuchSessionError(
	            'This driver instance does not have a valid session ID ' +
	            '(did you call WebDriver.quit()?) and may no longer be used.'));
	      });

	      // Only want the session rejection to bubble if accessed.
	      this.session_.catch(function() {});

	      if (this.onQuit_) {
	        return this.onQuit_.call(void 0);
	      }
	    }));
	  }

	  /** @override */
	  actions() {
	    return new actions.ActionSequence(this);
	  }

	  /** @override */
	  touchActions() {
	    return new actions.TouchSequence(this);
	  }

	  /** @override */
	  executeScript(script, var_args) {
	    if (typeof script === 'function') {
	      script = 'return (' + script + ').apply(null, arguments);';
	    }
	    let args =
	        arguments.length > 1 ? Array.prototype.slice.call(arguments, 1) : [];
	   return this.schedule(
	        new command.Command(command.Name.EXECUTE_SCRIPT).
	            setParameter('script', script).
	            setParameter('args', args),
	        'WebDriver.executeScript()');
	  }

	  /** @override */
	  executeAsyncScript(script, var_args) {
	    if (typeof script === 'function') {
	      script = 'return (' + script + ').apply(null, arguments);';
	    }
	    let args = Array.prototype.slice.call(arguments, 1);
	    return this.schedule(
	        new command.Command(command.Name.EXECUTE_ASYNC_SCRIPT).
	            setParameter('script', script).
	            setParameter('args', args),
	        'WebDriver.executeScript()');
	  }

	  /** @override */
	  call(fn, opt_scope, var_args) {
	    let args = Array.prototype.slice.call(arguments, 2);
	    return this.flow_.execute(function() {
	      return promise.fullyResolved(args).then(function(args) {
	        if (promise.isGenerator(fn)) {
	          args.unshift(fn, opt_scope);
	          return promise.consume.apply(null, args);
	        }
	        return fn.apply(opt_scope, args);
	      });
	    }, 'WebDriver.call(' + (fn.name || 'function') + ')');
	  }

	  /** @override */
	  wait(condition, opt_timeout, opt_message) {
	    if (promise.isPromise(condition)) {
	      return this.flow_.wait(
	          /** @type {!IThenable} */(condition),
	          opt_timeout, opt_message);
	    }

	    var message = opt_message;
	    var fn = /** @type {!Function} */(condition);
	    if (condition instanceof Condition) {
	      message = message || condition.description();
	      fn = condition.fn;
	    }

	    if (typeof fn !== 'function') {
	      throw TypeError(
	          'Wait condition must be a promise-like object, function, or a '
	              + 'Condition object');
	    }

	    var driver = this;
	    var result = this.flow_.wait(function() {
	      if (promise.isGenerator(fn)) {
	        return promise.consume(fn, null, [driver]);
	      }
	      return fn(driver);
	    }, opt_timeout, message);

	    if (condition instanceof WebElementCondition) {
	      result = new WebElementPromise(this, result.then(function(value) {
	        if (!(value instanceof WebElement)) {
	          throw TypeError(
	              'WebElementCondition did not resolve to a WebElement: '
	                  + Object.prototype.toString.call(value));
	        }
	        return value;
	      }));
	    }
	    return result;
	  }

	  /** @override */
	  sleep(ms) {
	    return this.flow_.timeout(ms, 'WebDriver.sleep(' + ms + ')');
	  }

	  /** @override */
	  getWindowHandle() {
	    return this.schedule(
	        new command.Command(command.Name.GET_CURRENT_WINDOW_HANDLE),
	        'WebDriver.getWindowHandle()');
	  }

	  /** @override */
	  getAllWindowHandles() {
	    return this.schedule(
	        new command.Command(command.Name.GET_WINDOW_HANDLES),
	        'WebDriver.getAllWindowHandles()');
	  }

	  /** @override */
	  getPageSource() {
	    return this.schedule(
	        new command.Command(command.Name.GET_PAGE_SOURCE),
	        'WebDriver.getPageSource()');
	  }

	  /** @override */
	  close() {
	    return this.schedule(new command.Command(command.Name.CLOSE),
	                         'WebDriver.close()');
	  }

	  /** @override */
	  get(url) {
	    return this.navigate().to(url);
	  }

	  /** @override */
	  getCurrentUrl() {
	    return this.schedule(
	        new command.Command(command.Name.GET_CURRENT_URL),
	        'WebDriver.getCurrentUrl()');
	  }

	  /** @override */
	  getTitle() {
	    return this.schedule(new command.Command(command.Name.GET_TITLE),
	                         'WebDriver.getTitle()');
	  }

	  /** @override */
	  findElement(locator) {
	    let id;
	    locator = by.checkedLocator(locator);
	    if (typeof locator === 'function') {
	      id = this.findElementInternal_(locator, this);
	    } else {
	      let cmd = new command.Command(command.Name.FIND_ELEMENT).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      id = this.schedule(cmd, 'WebDriver.findElement(' + locator + ')');
	    }
	    return new WebElementPromise(this, id);
	  }

	  /**
	   * @param {!Function} locatorFn The locator function to use.
	   * @param {!(WebDriver|WebElement)} context The search
	   *     context.
	   * @return {!promise.Thenable<!WebElement>} A
	   *     promise that will resolve to a list of WebElements.
	   * @private
	   */
	  findElementInternal_(locatorFn, context) {
	    return this.call(() => locatorFn(context)).then(function(result) {
	      if (Array.isArray(result)) {
	        result = result[0];
	      }
	      if (!(result instanceof WebElement)) {
	        throw new TypeError('Custom locator did not return a WebElement');
	      }
	      return result;
	    });
	  }

	  /** @override */
	  findElements(locator) {
	    locator = by.checkedLocator(locator);
	    if (typeof locator === 'function') {
	      return this.findElementsInternal_(locator, this);
	    } else {
	      let cmd = new command.Command(command.Name.FIND_ELEMENTS).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      let res = this.schedule(cmd, 'WebDriver.findElements(' + locator + ')');
	      return res.catch(function(e) {
	        if (e instanceof error.NoSuchElementError) {
	          return [];
	        }
	        throw e;
	      });
	    }
	  }

	  /**
	   * @param {!Function} locatorFn The locator function to use.
	   * @param {!(WebDriver|WebElement)} context The search context.
	   * @return {!promise.Thenable<!Array<!WebElement>>} A promise that
	   *     will resolve to an array of WebElements.
	   * @private
	   */
	  findElementsInternal_(locatorFn, context) {
	    return this.call(() => locatorFn(context)).then(function(result) {
	      if (result instanceof WebElement) {
	        return [result];
	      }

	      if (!Array.isArray(result)) {
	        return [];
	      }

	      return result.filter(function(item) {
	        return item instanceof WebElement;
	      });
	    });
	  }

	  /** @override */
	  takeScreenshot() {
	    return this.schedule(new command.Command(command.Name.SCREENSHOT),
	        'WebDriver.takeScreenshot()');
	  }

	  /** @override */
	  manage() {
	    return new Options(this);
	  }

	  /** @override */
	  navigate() {
	    return new Navigation(this);
	  }

	  /** @override */
	  switchTo() {
	    return new TargetLocator(this);
	  }
	}


	/**
	 * Interface for navigating back and forth in the browser history.
	 *
	 * This class should never be instantiated directly. Instead, obtain an instance
	 * with
	 *
	 *    webdriver.navigate()
	 *
	 * @see WebDriver#navigate()
	 */
	class Navigation {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Schedules a command to navigate to a new URL.
	   * @param {string} url The URL to navigate to.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the URL has been loaded.
	   */
	  to(url) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET).
	            setParameter('url', url),
	        'WebDriver.navigate().to(' + url + ')');
	  }

	  /**
	   * Schedules a command to move backwards in the browser history.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the navigation event has completed.
	   */
	  back() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GO_BACK),
	        'WebDriver.navigate().back()');
	  }

	  /**
	   * Schedules a command to move forwards in the browser history.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the navigation event has completed.
	   */
	  forward() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GO_FORWARD),
	        'WebDriver.navigate().forward()');
	  }

	  /**
	   * Schedules a command to refresh the current page.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the navigation event has completed.
	   */
	  refresh() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.REFRESH),
	        'WebDriver.navigate().refresh()');
	  }
	}


	/**
	 * Provides methods for managing browser and driver state.
	 *
	 * This class should never be instantiated directly. Instead, obtain an instance
	 * with {@linkplain WebDriver#manage() webdriver.manage()}.
	 */
	class Options {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Schedules a command to add a cookie.
	   *
	   * __Sample Usage:__
	   *
	   *     // Set a basic cookie.
	   *     driver.options().addCookie({name: 'foo', value: 'bar'});
	   *
	   *     // Set a cookie that expires in 10 minutes.
	   *     let expiry = new Date(Date.now() + (10 * 60 * 1000));
	   *     driver.options().addCookie({name: 'foo', value: 'bar', expiry});
	   *
	   *     // The cookie expiration may also be specified in seconds since epoch.
	   *     driver.options().addCookie({
	   *       name: 'foo',
	   *       value: 'bar',
	   *       expiry: Math.floor(Date.now() / 1000)
	   *     });
	   *
	   * @param {!Options.Cookie} spec Defines the cookie to add.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the cookie has been added to the page.
	   * @throws {error.InvalidArgumentError} if any of the cookie parameters are
	   *     invalid.
	   * @throws {TypeError} if `spec` is not a cookie object.
	   */
	  addCookie(spec) {
	    if (!spec || typeof spec !== 'object') {
	      throw TypeError('addCookie called with non-cookie parameter');
	    }

	    // We do not allow '=' or ';' in the name.
	    let name = spec.name;
	    if (/[;=]/.test(name)) {
	      throw new error.InvalidArgumentError(
	          'Invalid cookie name "' + name + '"');
	    }

	    // We do not allow ';' in value.
	    let value = spec.value;
	    if (/;/.test(value)) {
	      throw new error.InvalidArgumentError(
	          'Invalid cookie value "' + value + '"');
	    }

	    let cookieString = name + '=' + value +
	        (spec.domain ? ';domain=' + spec.domain : '') +
	        (spec.path ? ';path=' + spec.path : '') +
	        (spec.secure ? ';secure' : '');

	    let expiry;
	    if (typeof spec.expiry === 'number') {
	      expiry = Math.floor(spec.expiry);
	      cookieString += ';expires=' + new Date(spec.expiry * 1000).toUTCString();
	    } else if (spec.expiry instanceof Date) {
	      let date = /** @type {!Date} */(spec.expiry);
	      expiry = Math.floor(date.getTime() / 1000);
	      cookieString += ';expires=' + date.toUTCString();
	    }

	    return this.driver_.schedule(
	        new command.Command(command.Name.ADD_COOKIE).
	            setParameter('cookie', {
	              'name': name,
	              'value': value,
	              'path': spec.path,
	              'domain': spec.domain,
	              'secure': !!spec.secure,
	              'expiry': expiry
	            }),
	        'WebDriver.manage().addCookie(' + cookieString + ')');
	  }

	  /**
	   * Schedules a command to delete all cookies visible to the current page.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when all cookies have been deleted.
	   */
	  deleteAllCookies() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.DELETE_ALL_COOKIES),
	        'WebDriver.manage().deleteAllCookies()');
	  }

	  /**
	   * Schedules a command to delete the cookie with the given name. This command
	   * is a no-op if there is no cookie with the given name visible to the current
	   * page.
	   * @param {string} name The name of the cookie to delete.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the cookie has been deleted.
	   */
	  deleteCookie(name) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.DELETE_COOKIE).
	            setParameter('name', name),
	        'WebDriver.manage().deleteCookie(' + name + ')');
	  }

	  /**
	   * Schedules a command to retrieve all cookies visible to the current page.
	   * Each cookie will be returned as a JSON object as described by the WebDriver
	   * wire protocol.
	   * @return {!promise.Thenable<!Array<!Options.Cookie>>} A promise that will be
	   *     resolved with the cookies visible to the current browsing context.
	   */
	  getCookies() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_ALL_COOKIES),
	        'WebDriver.manage().getCookies()');
	  }

	  /**
	   * Schedules a command to retrieve the cookie with the given name. Returns null
	   * if there is no such cookie. The cookie will be returned as a JSON object as
	   * described by the WebDriver wire protocol.
	   *
	   * @param {string} name The name of the cookie to retrieve.
	   * @return {!promise.Thenable<?Options.Cookie>} A promise that will be resolved
	   *     with the named cookie, or `null` if there is no such cookie.
	   */
	  getCookie(name) {
	    return this.getCookies().then(function(cookies) {
	      for (let cookie of cookies) {
	        if (cookie && cookie['name'] === name) {
	          return cookie;
	        }
	      }
	      return null;
	    });
	  }

	  /**
	   * Schedules a command to fetch the timeouts currently configured for the
	   * current session.
	   *
	   * @return {!promise.Thenable<{script: number,
	   *                             pageLoad: number,
	   *                             implicit: number}>} A promise that will be
	   *     resolved with the timeouts currently configured for the current
	   *     session.
	   * @see #setTimeouts()
	   */
	  getTimeouts() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_TIMEOUT),
	        `WebDriver.manage().getTimeouts()`)
	  }

	  /**
	   * Schedules a command to set timeout durations associated with the current
	   * session.
	   *
	   * The following timeouts are supported (all timeouts are specified in
	   * milliseconds):
	   *
	   * -  `implicit` specifies the maximum amount of time to wait for an element
	   *    locator to succeed when {@linkplain WebDriver#findElement locating}
	   *    {@linkplain WebDriver#findElements elements} on the page.
	   *    Defaults to 0 milliseconds.
	   *
	   * -  `pageLoad` specifies the maximum amount of time to wait for a page to
	   *    finishing loading. Defaults to 300000 milliseconds.
	   *
	   * -  `script` specifies the maximum amount of time to wait for an
	   *    {@linkplain WebDriver#executeScript evaluated script} to run. If set to
	   *    `null`, the script timeout will be indefinite.
	   *    Defaults to 30000 milliseconds.
	   *
	   * @param {{script: (number|null|undefined),
	   *          pageLoad: (number|null|undefined),
	   *          implicit: (number|null|undefined)}} conf
	   *     The desired timeout configuration.
	   * @return {!promise.Thenable<void>} A promise that will be resolved when the
	   *     timeouts have been set.
	   * @throws {!TypeError} if an invalid options object is provided.
	   * @see #getTimeouts()
	   * @see <https://w3c.github.io/webdriver/webdriver-spec.html#dfn-set-timeouts>
	   */
	  setTimeouts({script, pageLoad, implicit} = {}) {
	    let cmd = new command.Command(command.Name.SET_TIMEOUT);

	    let valid = false;
	    function setParam(key, value) {
	      if (value === null || typeof value === 'number') {
	        valid = true;
	        cmd.setParameter(key, value);
	      } else if (typeof value !== 'undefined') {
	        throw TypeError(
	            'invalid timeouts configuration:'
	                + ` expected "${key}" to be a number, got ${typeof value}`);
	      }
	    }
	    setParam('implicit', implicit);
	    setParam('pageLoad', pageLoad);
	    setParam('script', script);

	    if (valid) {
	      return this.driver_.schedule(cmd, `WebDriver.manage().setTimeouts()`)
	          .catch(() => {
	            // Fallback to the legacy method.
	            let cmds = [];
	            if (typeof script === 'number') {
	              cmds.push(legacyTimeout(this.driver_, 'script', script));
	            }
	            if (typeof implicit === 'number') {
	              cmds.push(legacyTimeout(this.driver_, 'implicit', implicit));
	            }
	            if (typeof pageLoad === 'number') {
	              cmds.push(legacyTimeout(this.driver_, 'page load', pageLoad));
	            }
	            return Promise.all(cmds);
	          });
	    }
	    throw TypeError('no timeouts specified');
	  }

	  /**
	   * @return {!Logs} The interface for managing driver
	   *     logs.
	   */
	  logs() {
	    return new Logs(this.driver_);
	  }

	  /**
	   * @return {!Timeouts} The interface for managing driver timeouts.
	   * @deprecated Use {@link #setTimeouts()} instead.
	   */
	  timeouts() {
	    return new Timeouts(this.driver_);
	  }

	  /**
	   * @return {!Window} The interface for managing the current window.
	   */
	  window() {
	    return new Window(this.driver_);
	  }
	}


	/**
	 * @param {!WebDriver} driver
	 * @param {string} type
	 * @param {number} ms
	 * @return {!promise.Thenable<void>}
	 */
	function legacyTimeout(driver, type, ms) {
	  return driver.schedule(
	      new command.Command(command.Name.SET_TIMEOUT)
	          .setParameter('type', type)
	          .setParameter('ms', ms),
	      `WebDriver.manage().setTimeouts({${type}: ${ms}})`);
	}



	/**
	 * A record object describing a browser cookie.
	 *
	 * @record
	 */
	Options.Cookie = function() {};


	/**
	 * The name of the cookie.
	 *
	 * @type {string}
	 */
	Options.Cookie.prototype.name;


	/**
	 * The cookie value.
	 *
	 * @type {string}
	 */
	Options.Cookie.prototype.value;


	/**
	 * The cookie path. Defaults to "/" when adding a cookie.
	 *
	 * @type {(string|undefined)}
	 */
	Options.Cookie.prototype.path;


	/**
	 * The domain the cookie is visible to. Defaults to the current browsing
	 * context's document's URL when adding a cookie.
	 *
	 * @type {(string|undefined)}
	 */
	Options.Cookie.prototype.domain;


	/**
	 * Whether the cookie is a secure cookie. Defaults to false when adding a new
	 * cookie.
	 *
	 * @type {(boolean|undefined)}
	 */
	Options.Cookie.prototype.secure;


	/**
	 * Whether the cookie is an HTTP only cookie. Defaults to false when adding a
	 * new cookie.
	 *
	 * @type {(boolean|undefined)}
	 */
	Options.Cookie.prototype.httpOnly;


	/**
	 * When the cookie expires.
	 *
	 * When {@linkplain Options#addCookie() adding a cookie}, this may be specified
	 * in _seconds_ since Unix epoch (January 1, 1970). The expiry will default to
	 * 20 years in the future if omitted.
	 *
	 * The expiry is always returned in seconds since epoch when
	 * {@linkplain Options#getCookies() retrieving cookies} from the browser.
	 *
	 * @type {(!Date|number|undefined)}
	 */
	Options.Cookie.prototype.expiry;


	/**
	 * An interface for managing timeout behavior for WebDriver instances.
	 *
	 * This class should never be instantiated directly. Instead, obtain an instance
	 * with
	 *
	 *    webdriver.manage().timeouts()
	 *
	 * @deprecated This has been deprecated in favor of
	 *     {@link Options#setTimeouts()}, which supports setting multiple timeouts
	 *     at once.
	 * @see WebDriver#manage()
	 * @see Options#timeouts()
	 */
	class Timeouts {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Specifies the amount of time the driver should wait when searching for an
	   * element if it is not immediately present.
	   *
	   * When searching for a single element, the driver should poll the page
	   * until the element has been found, or this timeout expires before failing
	   * with a {@link bot.ErrorCode.NO_SUCH_ELEMENT} error. When searching
	   * for multiple elements, the driver should poll the page until at least one
	   * element has been found or this timeout has expired.
	   *
	   * Setting the wait timeout to 0 (its default value), disables implicit
	   * waiting.
	   *
	   * Increasing the implicit wait timeout should be used judiciously as it
	   * will have an adverse effect on test run time, especially when used with
	   * slower location strategies like XPath.
	   *
	   * @param {number} ms The amount of time to wait, in milliseconds.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the implicit wait timeout has been set.
	   * @deprecated Use {@link Options#setTimeouts()
	   *     driver.manage().setTimeouts({implicit: ms})}.
	   */
	  implicitlyWait(ms) {
	    return this.driver_.manage().setTimeouts({implicit: ms});
	  }

	  /**
	   * Sets the amount of time to wait, in milliseconds, for an asynchronous
	   * script to finish execution before returning an error. If the timeout is
	   * less than or equal to 0, the script will be allowed to run indefinitely.
	   *
	   * @param {number} ms The amount of time to wait, in milliseconds.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the script timeout has been set.
	   * @deprecated Use {@link Options#setTimeouts()
	   *     driver.manage().setTimeouts({script: ms})}.
	   */
	  setScriptTimeout(ms) {
	    return this.driver_.manage().setTimeouts({script: ms});
	  }

	  /**
	   * Sets the amount of time to wait for a page load to complete before
	   * returning an error.  If the timeout is negative, page loads may be
	   * indefinite.
	   *
	   * @param {number} ms The amount of time to wait, in milliseconds.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the timeout has been set.
	   * @deprecated Use {@link Options#setTimeouts()
	   *     driver.manage().setTimeouts({pageLoad: ms})}.
	   */
	  pageLoadTimeout(ms) {
	    return this.driver_.manage().setTimeouts({pageLoad: ms});
	  }
	}


	/**
	 * An interface for managing the current window.
	 *
	 * This class should never be instantiated directly. Instead, obtain an instance
	 * with
	 *
	 *    webdriver.manage().window()
	 *
	 * @see WebDriver#manage()
	 * @see Options#window()
	 */
	class Window {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Retrieves the window's current position, relative to the top left corner of
	   * the screen.
	   * @return {!promise.Thenable<{x: number, y: number}>} A promise
	   *     that will be resolved with the window's position in the form of a
	   *     {x:number, y:number} object literal.
	   */
	  getPosition() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_WINDOW_POSITION).
	            setParameter('windowHandle', 'current'),
	        'WebDriver.manage().window().getPosition()');
	  }

	  /**
	   * Repositions the current window.
	   * @param {number} x The desired horizontal position, relative to the left
	   *     side of the screen.
	   * @param {number} y The desired vertical position, relative to the top of the
	   *     of the screen.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the command has completed.
	   */
	  setPosition(x, y) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_WINDOW_POSITION).
	            setParameter('windowHandle', 'current').
	            setParameter('x', x).
	            setParameter('y', y),
	        'WebDriver.manage().window().setPosition(' + x + ', ' + y + ')');
	  }

	  /**
	   * Retrieves the window's current size.
	   * @return {!promise.Thenable<{width: number, height: number}>} A
	   *     promise that will be resolved with the window's size in the form of a
	   *     {width:number, height:number} object literal.
	   */
	  getSize() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_WINDOW_SIZE).
	            setParameter('windowHandle', 'current'),
	        'WebDriver.manage().window().getSize()');
	  }

	  /**
	   * Resizes the current window.
	   * @param {number} width The desired window width.
	   * @param {number} height The desired window height.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the command has completed.
	   */
	  setSize(width, height) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_WINDOW_SIZE).
	            setParameter('windowHandle', 'current').
	            setParameter('width', width).
	            setParameter('height', height),
	        'WebDriver.manage().window().setSize(' + width + ', ' + height + ')');
	  }

	  /**
	   * Maximizes the current window.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the command has completed.
	   */
	  maximize() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.MAXIMIZE_WINDOW).
	            setParameter('windowHandle', 'current'),
	        'WebDriver.manage().window().maximize()');
	  }
	}


	/**
	 * Interface for managing WebDriver log records.
	 *
	 * This class should never be instantiated directly. Instead, obtain an
	 * instance with
	 *
	 *     webdriver.manage().logs()
	 *
	 * @see WebDriver#manage()
	 * @see Options#logs()
	 */
	class Logs {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Fetches available log entries for the given type.
	   *
	   * Note that log buffers are reset after each call, meaning that available
	   * log entries correspond to those entries not yet returned for a given log
	   * type. In practice, this means that this call will return the available log
	   * entries since the last call, or from the start of the session.
	   *
	   * @param {!logging.Type} type The desired log type.
	   * @return {!promise.Thenable<!Array.<!logging.Entry>>} A
	   *   promise that will resolve to a list of log entries for the specified
	   *   type.
	   */
	  get(type) {
	    let cmd = new command.Command(command.Name.GET_LOG).
	        setParameter('type', type);
	    return this.driver_.schedule(
	        cmd, 'WebDriver.manage().logs().get(' + type + ')').
	        then(function(entries) {
	          return entries.map(function(entry) {
	            if (!(entry instanceof logging.Entry)) {
	              return new logging.Entry(
	                  entry['level'], entry['message'], entry['timestamp'],
	                  entry['type']);
	            }
	            return entry;
	          });
	        });
	  }

	  /**
	   * Retrieves the log types available to this driver.
	   * @return {!promise.Thenable<!Array<!logging.Type>>} A
	   *     promise that will resolve to a list of available log types.
	   */
	  getAvailableLogTypes() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.GET_AVAILABLE_LOG_TYPES),
	        'WebDriver.manage().logs().getAvailableLogTypes()');
	  }
	}


	/**
	 * An interface for changing the focus of the driver to another frame or window.
	 *
	 * This class should never be instantiated directly. Instead, obtain an
	 * instance with
	 *
	 *     webdriver.switchTo()
	 *
	 * @see WebDriver#switchTo()
	 */
	class TargetLocator {
	  /**
	   * @param {!WebDriver} driver The parent driver.
	   * @private
	   */
	  constructor(driver) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;
	  }

	  /**
	   * Schedules a command retrieve the {@code document.activeElement} element on
	   * the current document, or {@code document.body} if activeElement is not
	   * available.
	   * @return {!WebElementPromise} The active element.
	   */
	  activeElement() {
	    var id = this.driver_.schedule(
	        new command.Command(command.Name.GET_ACTIVE_ELEMENT),
	        'WebDriver.switchTo().activeElement()');
	    return new WebElementPromise(this.driver_, id);
	  }

	  /**
	   * Schedules a command to switch focus of all future commands to the topmost
	   * frame on the page.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the driver has changed focus to the default content.
	   */
	  defaultContent() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SWITCH_TO_FRAME).
	            setParameter('id', null),
	        'WebDriver.switchTo().defaultContent()');
	  }

	  /**
	   * Schedules a command to switch the focus of all future commands to another
	   * frame on the page. The target frame may be specified as one of the
	   * following:
	   *
	   * - A number that specifies a (zero-based) index into [window.frames](
	   *   https://developer.mozilla.org/en-US/docs/Web/API/Window.frames).
	   * - A {@link WebElement} reference, which correspond to a `frame` or `iframe`
	   *   DOM element.
	   * - The `null` value, to select the topmost frame on the page. Passing `null`
	   *   is the same as calling {@link #defaultContent defaultContent()}.
	   *
	   * If the specified frame can not be found, the returned promise will be
	   * rejected with a {@linkplain error.NoSuchFrameError}.
	   *
	   * @param {(number|WebElement|null)} id The frame locator.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the driver has changed focus to the specified frame.
	   */
	  frame(id) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SWITCH_TO_FRAME).
	            setParameter('id', id),
	        'WebDriver.switchTo().frame(' + id + ')');
	  }

	  /**
	   * Schedules a command to switch the focus of all future commands to another
	   * window. Windows may be specified by their {@code window.name} attribute or
	   * by its handle (as returned by {@link WebDriver#getWindowHandles}).
	   *
	   * If the specified window cannot be found, the returned promise will be
	   * rejected with a {@linkplain error.NoSuchWindowError}.
	   *
	   * @param {string} nameOrHandle The name or window handle of the window to
	   *     switch focus to.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the driver has changed focus to the specified window.
	   */
	  window(nameOrHandle) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SWITCH_TO_WINDOW).
	            // "name" supports the legacy drivers. "handle" is the W3C
	            // compliant parameter.
	            setParameter('name', nameOrHandle).
	            setParameter('handle', nameOrHandle),
	        'WebDriver.switchTo().window(' + nameOrHandle + ')');
	  }

	  /**
	   * Schedules a command to change focus to the active modal dialog, such as
	   * those opened by `window.alert()`, `window.confirm()`, and
	   * `window.prompt()`. The returned promise will be rejected with a
	   * {@linkplain error.NoSuchAlertError} if there are no open alerts.
	   *
	   * @return {!AlertPromise} The open alert.
	   */
	  alert() {
	    var text = this.driver_.schedule(
	        new command.Command(command.Name.GET_ALERT_TEXT),
	        'WebDriver.switchTo().alert()');
	    var driver = this.driver_;
	    return new AlertPromise(driver, text.then(function(text) {
	      return new Alert(driver, text);
	    }));
	  }
	}


	//////////////////////////////////////////////////////////////////////////////
	//
	//  WebElement
	//
	//////////////////////////////////////////////////////////////////////////////


	const LEGACY_ELEMENT_ID_KEY = 'ELEMENT';
	const ELEMENT_ID_KEY = 'element-6066-11e4-a52e-4f735466cecf';


	/**
	 * Represents a DOM element. WebElements can be found by searching from the
	 * document root using a {@link WebDriver} instance, or by searching
	 * under another WebElement:
	 *
	 *     driver.get('http://www.google.com');
	 *     var searchForm = driver.findElement(By.tagName('form'));
	 *     var searchBox = searchForm.findElement(By.name('q'));
	 *     searchBox.sendKeys('webdriver');
	 */
	class WebElement {
	  /**
	   * @param {!WebDriver} driver the parent WebDriver instance for this element.
	   * @param {(!IThenable<string>|string)} id The server-assigned opaque ID for
	   *     the underlying DOM element.
	   */
	  constructor(driver, id) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;

	    /** @private {!promise.Thenable<string>} */
	    this.id_ = driver.controlFlow().promise(resolve => resolve(id));
	  }

	  /**
	   * @param {string} id The raw ID.
	   * @param {boolean=} opt_noLegacy Whether to exclude the legacy element key.
	   * @return {!Object} The element ID for use with WebDriver's wire protocol.
	   */
	  static buildId(id, opt_noLegacy) {
	    return opt_noLegacy
	        ? {[ELEMENT_ID_KEY]: id}
	        : {[ELEMENT_ID_KEY]: id, [LEGACY_ELEMENT_ID_KEY]: id};
	  }

	  /**
	   * Extracts the encoded WebElement ID from the object.
	   *
	   * @param {?} obj The object to extract the ID from.
	   * @return {string} the extracted ID.
	   * @throws {TypeError} if the object is not a valid encoded ID.
	   */
	  static extractId(obj) {
	    if (obj && typeof obj === 'object') {
	      if (typeof obj[ELEMENT_ID_KEY] === 'string') {
	        return obj[ELEMENT_ID_KEY];
	      } else if (typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string') {
	        return obj[LEGACY_ELEMENT_ID_KEY];
	      }
	    }
	    throw new TypeError('object is not a WebElement ID');
	  }

	  /**
	   * @param {?} obj the object to test.
	   * @return {boolean} whether the object is a valid encoded WebElement ID.
	   */
	  static isId(obj) {
	    return obj && typeof obj === 'object'
	        && (typeof obj[ELEMENT_ID_KEY] === 'string'
	            || typeof obj[LEGACY_ELEMENT_ID_KEY] === 'string');
	  }

	  /**
	   * Compares two WebElements for equality.
	   *
	   * @param {!WebElement} a A WebElement.
	   * @param {!WebElement} b A WebElement.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved to whether the two WebElements are equal.
	   */
	  static equals(a, b) {
	    if (a === b) {
	      return a.driver_.controlFlow().promise(resolve => resolve(true));
	    }
	    let ids = [a.getId(), b.getId()];
	    return promise.all(ids).then(function(ids) {
	      // If the two element's have the same ID, they should be considered
	      // equal. Otherwise, they may still be equivalent, but we'll need to
	      // ask the server to check for us.
	      if (ids[0] === ids[1]) {
	        return true;
	      }

	      let cmd = new command.Command(command.Name.ELEMENT_EQUALS);
	      cmd.setParameter('id', ids[0]);
	      cmd.setParameter('other', ids[1]);
	      return a.driver_.schedule(cmd, 'WebElement.equals()');
	    });
	  }

	  /** @return {!WebDriver} The parent driver for this instance. */
	  getDriver() {
	    return this.driver_;
	  }

	  /**
	   * @return {!promise.Thenable<string>} A promise that resolves to
	   *     the server-assigned opaque ID assigned to this element.
	   */
	  getId() {
	    return this.id_;
	  }

	  /**
	   * @return {!Object} Returns the serialized representation of this WebElement.
	   */
	  [Symbols.serialize]() {
	    return this.getId().then(WebElement.buildId);
	  }

	  /**
	   * Schedules a command that targets this element with the parent WebDriver
	   * instance. Will ensure this element's ID is included in the command
	   * parameters under the "id" key.
	   *
	   * @param {!command.Command} command The command to schedule.
	   * @param {string} description A description of the command for debugging.
	   * @return {!promise.Thenable<T>} A promise that will be resolved
	   *     with the command result.
	   * @template T
	   * @see WebDriver#schedule
	   * @private
	   */
	  schedule_(command, description) {
	    command.setParameter('id', this);
	    return this.driver_.schedule(command, description);
	  }

	  /**
	   * Schedule a command to find a descendant of this element. If the element
	   * cannot be found, the returned promise will be rejected with a
	   * {@linkplain error.NoSuchElementError NoSuchElementError}.
	   *
	   * The search criteria for an element may be defined using one of the static
	   * factories on the {@link by.By} class, or as a short-hand
	   * {@link ./by.ByHash} object. For example, the following two statements
	   * are equivalent:
	   *
	   *     var e1 = element.findElement(By.id('foo'));
	   *     var e2 = element.findElement({id:'foo'});
	   *
	   * You may also provide a custom locator function, which takes as input this
	   * instance and returns a {@link WebElement}, or a promise that will resolve
	   * to a WebElement. If the returned promise resolves to an array of
	   * WebElements, WebDriver will use the first element. For example, to find the
	   * first visible link on a page, you could write:
	   *
	   *     var link = element.findElement(firstVisibleLink);
	   *
	   *     function firstVisibleLink(element) {
	   *       var links = element.findElements(By.tagName('a'));
	   *       return promise.filter(links, function(link) {
	   *         return link.isDisplayed();
	   *       });
	   *     }
	   *
	   * @param {!(by.By|Function)} locator The locator strategy to use when
	   *     searching for the element.
	   * @return {!WebElementPromise} A WebElement that can be used to issue
	   *     commands against the located element. If the element is not found, the
	   *     element will be invalidated and all scheduled commands aborted.
	   */
	  findElement(locator) {
	    locator = by.checkedLocator(locator);
	    let id;
	    if (typeof locator === 'function') {
	      id = this.driver_.findElementInternal_(locator, this);
	    } else {
	      let cmd = new command.Command(
	          command.Name.FIND_CHILD_ELEMENT).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      id = this.schedule_(cmd, 'WebElement.findElement(' + locator + ')');
	    }
	    return new WebElementPromise(this.driver_, id);
	  }

	  /**
	   * Schedules a command to find all of the descendants of this element that
	   * match the given search criteria.
	   *
	   * @param {!(by.By|Function)} locator The locator strategy to use when
	   *     searching for the element.
	   * @return {!promise.Thenable<!Array<!WebElement>>} A
	   *     promise that will resolve to an array of WebElements.
	   */
	  findElements(locator) {
	    locator = by.checkedLocator(locator);
	    let id;
	    if (typeof locator === 'function') {
	      return this.driver_.findElementsInternal_(locator, this);
	    } else {
	      var cmd = new command.Command(
	          command.Name.FIND_CHILD_ELEMENTS).
	          setParameter('using', locator.using).
	          setParameter('value', locator.value);
	      return this.schedule_(cmd, 'WebElement.findElements(' + locator + ')');
	    }
	  }

	  /**
	   * Schedules a command to click on this element.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the click command has completed.
	   */
	  click() {
	    return this.schedule_(
	        new command.Command(command.Name.CLICK_ELEMENT),
	        'WebElement.click()');
	  }

	  /**
	   * Schedules a command to type a sequence on the DOM element represented by
	   * this instance.
	   *
	   * Modifier keys (SHIFT, CONTROL, ALT, META) are stateful; once a modifier is
	   * processed in the key sequence, that key state is toggled until one of the
	   * following occurs:
	   *
	   * - The modifier key is encountered again in the sequence. At this point the
	   *   state of the key is toggled (along with the appropriate keyup/down
	   *   events).
	   * - The {@link input.Key.NULL} key is encountered in the sequence. When
	   *   this key is encountered, all modifier keys current in the down state are
	   *   released (with accompanying keyup events). The NULL key can be used to
	   *   simulate common keyboard shortcuts:
	   *
	   *         element.sendKeys("text was",
	   *                          Key.CONTROL, "a", Key.NULL,
	   *                          "now text is");
	   *         // Alternatively:
	   *         element.sendKeys("text was",
	   *                          Key.chord(Key.CONTROL, "a"),
	   *                          "now text is");
	   *
	   * - The end of the key sequence is encountered. When there are no more keys
	   *   to type, all depressed modifier keys are released (with accompanying
	   *   keyup events).
	   *
	   * If this element is a file input ({@code <input type="file">}), the
	   * specified key sequence should specify the path to the file to attach to
	   * the element. This is analogous to the user clicking "Browse..." and entering
	   * the path into the file select dialog.
	   *
	   *     var form = driver.findElement(By.css('form'));
	   *     var element = form.findElement(By.css('input[type=file]'));
	   *     element.sendKeys('/path/to/file.txt');
	   *     form.submit();
	   *
	   * For uploads to function correctly, the entered path must reference a file
	   * on the _browser's_ machine, not the local machine running this script. When
	   * running against a remote Selenium server, a {@link input.FileDetector}
	   * may be used to transparently copy files to the remote machine before
	   * attempting to upload them in the browser.
	   *
	   * __Note:__ On browsers where native keyboard events are not supported
	   * (e.g. Firefox on OS X), key events will be synthesized. Special
	   * punctuation keys will be synthesized according to a standard QWERTY en-us
	   * keyboard layout.
	   *
	   * @param {...(number|string|!IThenable<(number|string)>)} var_args The
	   *     sequence of keys to type. Number keys may be referenced numerically or
	   *     by string (1 or '1'). All arguments will be joined into a single
	   *     sequence.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when all keys have been typed.
	   */
	  sendKeys(var_args) {
	    let keys = Promise.all(Array.prototype.slice.call(arguments, 0)).
	        then(keys => {
	          let ret = [];
	          keys.forEach(key => {
	            let type = typeof key;
	            if (type === 'number') {
	              key = String(key);
	            } else if (type !== 'string') {
	              throw TypeError(
	                  'each key must be a number of string; got ' + type);
	            }

	            // The W3C protocol requires keys to be specified as an array where
	            // each element is a single key.
	            ret.push.apply(ret, key.split(''));
	          });
	          return ret;
	        });

	    if (!this.driver_.fileDetector_) {
	      return this.schedule_(
	          new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).
	              setParameter('text', keys).
	              setParameter('value', keys),
	          'WebElement.sendKeys()');
	    }

	    // Suppress unhandled rejection errors until the flow executes the command.
	    keys.catch(function() {});

	    var element = this;
	    return this.getDriver().controlFlow().execute(function() {
	      return keys.then(function(keys) {
	        return element.driver_.fileDetector_
	            .handleFile(element.driver_, keys.join(''));
	      }).then(function(keys) {
	        return element.schedule_(
	            new command.Command(command.Name.SEND_KEYS_TO_ELEMENT).
	                setParameter('text', keys).
	                setParameter('value', keys.split('')),
	            'WebElement.sendKeys()');
	      });
	    }, 'WebElement.sendKeys()');
	  }

	  /**
	   * Schedules a command to query for the tag/node name of this element.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the element's tag name.
	   */
	  getTagName() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_TAG_NAME),
	        'WebElement.getTagName()');
	  }

	  /**
	   * Schedules a command to query for the computed style of the element
	   * represented by this instance. If the element inherits the named style from
	   * its parent, the parent will be queried for its value.  Where possible, color
	   * values will be converted to their hex representation (e.g. #00ff00 instead
	   * of rgb(0, 255, 0)).
	   *
	   * _Warning:_ the value returned will be as the browser interprets it, so
	   * it may be tricky to form a proper assertion.
	   *
	   * @param {string} cssStyleProperty The name of the CSS style property to look
	   *     up.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the requested CSS value.
	   */
	  getCssValue(cssStyleProperty) {
	    var name = command.Name.GET_ELEMENT_VALUE_OF_CSS_PROPERTY;
	    return this.schedule_(
	        new command.Command(name).
	            setParameter('propertyName', cssStyleProperty),
	        'WebElement.getCssValue(' + cssStyleProperty + ')');
	  }

	  /**
	   * Schedules a command to query for the value of the given attribute of the
	   * element. Will return the current value, even if it has been modified after
	   * the page has been loaded. More exactly, this method will return the value
	   * of the given attribute, unless that attribute is not present, in which case
	   * the value of the property with the same name is returned. If neither value
	   * is set, null is returned (for example, the "value" property of a textarea
	   * element). The "style" attribute is converted as best can be to a
	   * text representation with a trailing semi-colon. The following are deemed to
	   * be "boolean" attributes and will return either "true" or null:
	   *
	   * async, autofocus, autoplay, checked, compact, complete, controls, declare,
	   * defaultchecked, defaultselected, defer, disabled, draggable, ended,
	   * formnovalidate, hidden, indeterminate, iscontenteditable, ismap, itemscope,
	   * loop, multiple, muted, nohref, noresize, noshade, novalidate, nowrap, open,
	   * paused, pubdate, readonly, required, reversed, scoped, seamless, seeking,
	   * selected, spellcheck, truespeed, willvalidate
	   *
	   * Finally, the following commonly mis-capitalized attribute/property names
	   * are evaluated as expected:
	   *
	   * - "class"
	   * - "readonly"
	   *
	   * @param {string} attributeName The name of the attribute to query.
	   * @return {!promise.Thenable<?string>} A promise that will be
	   *     resolved with the attribute's value. The returned value will always be
	   *     either a string or null.
	   */
	  getAttribute(attributeName) {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_ATTRIBUTE).
	            setParameter('name', attributeName),
	        'WebElement.getAttribute(' + attributeName + ')');
	  }

	  /**
	   * Get the visible (i.e. not hidden by CSS) innerText of this element,
	   * including sub-elements, without any leading or trailing whitespace.
	   *
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved with the element's visible text.
	   */
	  getText() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_TEXT),
	        'WebElement.getText()');
	  }

	  /**
	   * Schedules a command to compute the size of this element's bounding box, in
	   * pixels.
	   * @return {!promise.Thenable<{width: number, height: number}>} A
	   *     promise that will be resolved with the element's size as a
	   *     {@code {width:number, height:number}} object.
	   */
	  getSize() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_SIZE),
	        'WebElement.getSize()');
	  }

	  /**
	   * Schedules a command to compute the location of this element in page space.
	   * @return {!promise.Thenable<{x: number, y: number}>} A promise that
	   *     will be resolved to the element's location as a
	   *     {@code {x:number, y:number}} object.
	   */
	  getLocation() {
	    return this.schedule_(
	        new command.Command(command.Name.GET_ELEMENT_LOCATION),
	        'WebElement.getLocation()');
	  }

	  /**
	   * Schedules a command to query whether the DOM element represented by this
	   * instance is enabled, as dictated by the {@code disabled} attribute.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved with whether this element is currently enabled.
	   */
	  isEnabled() {
	    return this.schedule_(
	        new command.Command(command.Name.IS_ELEMENT_ENABLED),
	        'WebElement.isEnabled()');
	  }

	  /**
	   * Schedules a command to query whether this element is selected.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved with whether this element is currently selected.
	   */
	  isSelected() {
	    return this.schedule_(
	        new command.Command(command.Name.IS_ELEMENT_SELECTED),
	        'WebElement.isSelected()');
	  }

	  /**
	   * Schedules a command to submit the form containing this element (or this
	   * element if it is a FORM element). This command is a no-op if the element is
	   * not contained in a form.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the form has been submitted.
	   */
	  submit() {
	    return this.schedule_(
	        new command.Command(command.Name.SUBMIT_ELEMENT),
	        'WebElement.submit()');
	  }

	  /**
	   * Schedules a command to clear the `value` of this element. This command has
	   * no effect if the underlying DOM element is neither a text INPUT element
	   * nor a TEXTAREA element.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when the element has been cleared.
	   */
	  clear() {
	    return this.schedule_(
	        new command.Command(command.Name.CLEAR_ELEMENT),
	        'WebElement.clear()');
	  }

	  /**
	   * Schedules a command to test whether this element is currently displayed.
	   * @return {!promise.Thenable<boolean>} A promise that will be
	   *     resolved with whether this element is currently visible on the page.
	   */
	  isDisplayed() {
	    return this.schedule_(
	        new command.Command(command.Name.IS_ELEMENT_DISPLAYED),
	        'WebElement.isDisplayed()');
	  }

	  /**
	   * Take a screenshot of the visible region encompassed by this element's
	   * bounding rectangle.
	   *
	   * @param {boolean=} opt_scroll Optional argument that indicates whether the
	   *     element should be scrolled into view before taking a screenshot.
	   *     Defaults to false.
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved to the screenshot as a base-64 encoded PNG.
	   */
	  takeScreenshot(opt_scroll) {
	    var scroll = !!opt_scroll;
	    return this.schedule_(
	        new command.Command(command.Name.TAKE_ELEMENT_SCREENSHOT)
	            .setParameter('scroll', scroll),
	        'WebElement.takeScreenshot(' + scroll + ')');
	  }
	}


	/**
	 * WebElementPromise is a promise that will be fulfilled with a WebElement.
	 * This serves as a forward proxy on WebElement, allowing calls to be
	 * scheduled without directly on this instance before the underlying
	 * WebElement has been fulfilled. In other words, the following two statements
	 * are equivalent:
	 *
	 *     driver.findElement({id: 'my-button'}).click();
	 *     driver.findElement({id: 'my-button'}).then(function(el) {
	 *       return el.click();
	 *     });
	 *
	 * @implements {promise.CancellableThenable<!WebElement>}
	 * @final
	 */
	class WebElementPromise extends WebElement {
	  /**
	   * @param {!WebDriver} driver The parent WebDriver instance for this
	   *     element.
	   * @param {!promise.Thenable<!WebElement>} el A promise
	   *     that will resolve to the promised element.
	   */
	  constructor(driver, el) {
	    super(driver, 'unused');

	    /**
	     * Cancel operation is only supported if the wrapped thenable is also
	     * cancellable.
	     * @param {(string|Error)=} opt_reason
	     * @override
	     */
	    this.cancel = function(opt_reason) {
	      if (promise.CancellableThenable.isImplementation(el)) {
	        /** @type {!promise.CancellableThenable} */(el).cancel(opt_reason);
	      }
	    };

	    /** @override */
	    this.then = el.then.bind(el);

	    /** @override */
	    this.catch = el.catch.bind(el);

	    /**
	     * Defers returning the element ID until the wrapped WebElement has been
	     * resolved.
	     * @override
	     */
	    this.getId = function() {
	      return el.then(function(el) {
	        return el.getId();
	      });
	    };
	  }
	}
	promise.CancellableThenable.addImplementation(WebElementPromise);


	//////////////////////////////////////////////////////////////////////////////
	//
	//  Alert
	//
	//////////////////////////////////////////////////////////////////////////////


	/**
	 * Represents a modal dialog such as {@code alert}, {@code confirm}, or
	 * {@code prompt}. Provides functions to retrieve the message displayed with
	 * the alert, accept or dismiss the alert, and set the response text (in the
	 * case of {@code prompt}).
	 */
	class Alert {
	  /**
	   * @param {!WebDriver} driver The driver controlling the browser this alert
	   *     is attached to.
	   * @param {string} text The message text displayed with this alert.
	   */
	  constructor(driver, text) {
	    /** @private {!WebDriver} */
	    this.driver_ = driver;

	    /** @private {!promise.Thenable<string>} */
	    this.text_ = driver.controlFlow().promise(resolve => resolve(text));
	  }

	  /**
	   * Retrieves the message text displayed with this alert. For instance, if the
	   * alert were opened with alert("hello"), then this would return "hello".
	   *
	   * @return {!promise.Thenable<string>} A promise that will be
	   *     resolved to the text displayed with this alert.
	   */
	  getText() {
	    return this.text_;
	  }

	  /**
	   * Sets the username and password in an alert prompting for credentials (such
	   * as a Basic HTTP Auth prompt). This method will implicitly
	   * {@linkplain #accept() submit} the dialog.
	   *
	   * @param {string} username The username to send.
	   * @param {string} password The password to send.
	   * @return {!promise.Thenable<void>} A promise that will be resolved when this
	   *     command has completed.
	   */
	  authenticateAs(username, password) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_ALERT_CREDENTIALS),
	        'WebDriver.switchTo().alert()'
	            + `.authenticateAs("${username}", "${password}")`);
	  }

	  /**
	   * Accepts this alert.
	   *
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  accept() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.ACCEPT_ALERT),
	        'WebDriver.switchTo().alert().accept()');
	  }

	  /**
	   * Dismisses this alert.
	   *
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  dismiss() {
	    return this.driver_.schedule(
	        new command.Command(command.Name.DISMISS_ALERT),
	        'WebDriver.switchTo().alert().dismiss()');
	  }

	  /**
	   * Sets the response text on this alert. This command will return an error if
	   * the underlying alert does not support response text (e.g. window.alert and
	   * window.confirm).
	   *
	   * @param {string} text The text to set.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when this command has completed.
	   */
	  sendKeys(text) {
	    return this.driver_.schedule(
	        new command.Command(command.Name.SET_ALERT_TEXT).
	            setParameter('text', text),
	        'WebDriver.switchTo().alert().sendKeys(' + text + ')');
	  }
	}


	/**
	 * AlertPromise is a promise that will be fulfilled with an Alert. This promise
	 * serves as a forward proxy on an Alert, allowing calls to be scheduled
	 * directly on this instance before the underlying Alert has been fulfilled. In
	 * other words, the following two statements are equivalent:
	 *
	 *     driver.switchTo().alert().dismiss();
	 *     driver.switchTo().alert().then(function(alert) {
	 *       return alert.dismiss();
	 *     });
	 *
	 * @implements {promise.CancellableThenable<!webdriver.Alert>}
	 * @final
	 */
	class AlertPromise extends Alert {
	  /**
	   * @param {!WebDriver} driver The driver controlling the browser this
	   *     alert is attached to.
	   * @param {!promise.Thenable<!Alert>} alert A thenable
	   *     that will be fulfilled with the promised alert.
	   */
	  constructor(driver, alert) {
	    super(driver, 'unused');

	    /**
	     * Cancel operation is only supported if the wrapped thenable is also
	     * cancellable.
	     * @param {(string|Error)=} opt_reason
	     * @override
	     */
	    this.cancel = function(opt_reason) {
	      if (promise.CancellableThenable.isImplementation(alert)) {
	        /** @type {!promise.CancellableThenable} */(alert).cancel(opt_reason);
	      }
	    };

	    /** @override */
	    this.then = alert.then.bind(alert);

	    /** @override */
	    this.catch = alert.catch.bind(alert);

	    /**
	     * Defer returning text until the promised alert has been resolved.
	     * @override
	     */
	    this.getText = function() {
	      return alert.then(function(alert) {
	        return alert.getText();
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.authenticateAs = function(username, password) {
	      return alert.then(function(alert) {
	        return alert.authenticateAs(username, password);
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.accept = function() {
	      return alert.then(function(alert) {
	        return alert.accept();
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.dismiss = function() {
	      return alert.then(function(alert) {
	        return alert.dismiss();
	      });
	    };

	    /**
	     * Defers action until the alert has been located.
	     * @override
	     */
	    this.sendKeys = function(text) {
	      return alert.then(function(alert) {
	        return alert.sendKeys(text);
	      });
	    };
	  }
	}
	promise.CancellableThenable.addImplementation(AlertPromise);


	// PUBLIC API


	module.exports = {
	  Alert: Alert,
	  AlertPromise: AlertPromise,
	  Condition: Condition,
	  Logs: Logs,
	  Navigation: Navigation,
	  Options: Options,
	  TargetLocator: TargetLocator,
	  Timeouts: Timeouts,
	  IWebDriver: IWebDriver,
	  WebDriver: WebDriver,
	  WebElement: WebElement,
	  WebElementCondition: WebElementCondition,
	  WebElementPromise: WebElementPromise,
	  Window: Window
	};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const command = __webpack_require__(97);
	const error = __webpack_require__(38);
	const input = __webpack_require__(103);


	/**
	 * @param {!IArrayLike} args .
	 * @return {!Array} .
	 */
	function flatten(args) {
	  let result = [];
	  for (let i = 0; i < args.length; i++) {
	    let element = args[i];
	    if (Array.isArray(element)) {
	      result.push.apply(result, flatten(element));
	    } else {
	      result.push(element);
	    }
	  }
	  return result;
	}


	const MODIFIER_KEYS = new Set([
	  input.Key.ALT,
	  input.Key.CONTROL,
	  input.Key.SHIFT,
	  input.Key.COMMAND
	]);


	/**
	 * Checks that a key is a modifier key.
	 * @param {!input.Key} key The key to check.
	 * @throws {error.InvalidArgumentError} If the key is not a modifier key.
	 * @private
	 */
	function checkModifierKey(key) {
	  if (!MODIFIER_KEYS.has(key)) {
	    throw new error.InvalidArgumentError('Not a modifier key');
	  }
	}


	/**
	 * Class for defining sequences of complex user interactions. Each sequence
	 * will not be executed until {@link #perform} is called.
	 *
	 * This class should not be instantiated directly. Instead, obtain an instance
	 * using {@link ./webdriver.WebDriver#actions() WebDriver.actions()}.
	 *
	 * Sample usage:
	 *
	 *     driver.actions().
	 *         keyDown(Key.SHIFT).
	 *         click(element1).
	 *         click(element2).
	 *         dragAndDrop(element3, element4).
	 *         keyUp(Key.SHIFT).
	 *         perform();
	 *
	 */
	class ActionSequence {
	  /**
	   * @param {!./webdriver.WebDriver} driver The driver that should be used to
	   *     perform this action sequence.
	   */
	  constructor(driver) {
	    /** @private {!./webdriver.WebDriver} */
	    this.driver_ = driver;

	    /** @private {!Array<{description: string, command: !command.Command}>} */
	    this.actions_ = [];
	  }

	  /**
	   * Schedules an action to be executed each time {@link #perform} is called on
	   * this instance.
	   *
	   * @param {string} description A description of the command.
	   * @param {!command.Command} command The command.
	   * @private
	   */
	  schedule_(description, command) {
	    this.actions_.push({
	      description: description,
	      command: command
	    });
	  }

	  /**
	   * Executes this action sequence.
	   *
	   * @return {!./promise.Thenable} A promise that will be resolved once
	   *     this sequence has completed.
	   */
	  perform() {
	    // Make a protected copy of the scheduled actions. This will protect against
	    // users defining additional commands before this sequence is actually
	    // executed.
	    let actions = this.actions_.concat();
	    let driver = this.driver_;
	    return driver.controlFlow().execute(function() {
	      let results = actions.map(action => {
	        return driver.schedule(action.command, action.description);
	      });
	      return Promise.all(results);
	    }, 'ActionSequence.perform');
	  }

	  /**
	   * Moves the mouse. The location to move to may be specified in terms of the
	   * mouse's current location, an offset relative to the top-left corner of an
	   * element, or an element (in which case the middle of the element is used).
	   *
	   * @param {(!./webdriver.WebElement|{x: number, y: number})} location The
	   *     location to drag to, as either another WebElement or an offset in
	   *     pixels.
	   * @param {{x: number, y: number}=} opt_offset If the target {@code location}
	   *     is defined as a {@link ./webdriver.WebElement}, this parameter defines
	   *     an offset within that element. The offset should be specified in pixels
	   *     relative to the top-left corner of the element's bounding box. If
	   *     omitted, the element's center will be used as the target offset.
	   * @return {!ActionSequence} A self reference.
	   */
	  mouseMove(location, opt_offset) {
	    let cmd = new command.Command(command.Name.MOVE_TO);

	    if (typeof location.x === 'number') {
	      setOffset(/** @type {{x: number, y: number}} */(location));
	    } else {
	      cmd.setParameter('element', location.getId());
	      if (opt_offset) {
	        setOffset(opt_offset);
	      }
	    }

	    this.schedule_('mouseMove', cmd);
	    return this;

	    /** @param {{x: number, y: number}} offset The offset to use. */
	    function setOffset(offset) {
	      cmd.setParameter('xoffset', offset.x || 0);
	      cmd.setParameter('yoffset', offset.y || 0);
	    }
	  }

	  /**
	   * Schedules a mouse action.
	   * @param {string} description A simple descriptive label for the scheduled
	   *     action.
	   * @param {!command.Name} commandName The name of the command.
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if the previous argument is
	   *     provided as a button.
	   * @return {!ActionSequence} A self reference.
	   * @private
	   */
	  scheduleMouseAction_(
	      description, commandName, opt_elementOrButton, opt_button) {
	    let button;
	    if (typeof opt_elementOrButton === 'number') {
	      button = opt_elementOrButton;
	    } else {
	      if (opt_elementOrButton) {
	        this.mouseMove(
	            /** @type {!./webdriver.WebElement} */ (opt_elementOrButton));
	      }
	      button = opt_button !== void(0) ? opt_button : input.Button.LEFT;
	    }

	    let cmd = new command.Command(commandName).
	        setParameter('button', button);
	    this.schedule_(description, cmd);
	    return this;
	  }

	  /**
	   * Presses a mouse button. The mouse button will not be released until
	   * {@link #mouseUp} is called, regardless of whether that call is made in this
	   * sequence or another. The behavior for out-of-order events (e.g. mouseDown,
	   * click) is undefined.
	   *
	   * If an element is provided, the mouse will first be moved to the center
	   * of that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).mouseDown()
	   *
	   * Warning: this method currently only supports the left mouse button. See
	   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  mouseDown(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('mouseDown',
	        command.Name.MOUSE_DOWN, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Releases a mouse button. Behavior is undefined for calling this function
	   * without a previous call to {@link #mouseDown}.
	   *
	   * If an element is provided, the mouse will first be moved to the center
	   * of that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).mouseUp()
	   *
	   * Warning: this method currently only supports the left mouse button. See
	   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  mouseUp(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('mouseUp',
	        command.Name.MOUSE_UP, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Convenience function for performing a "drag and drop" manuever. The target
	   * element may be moved to the location of another element, or by an offset (in
	   * pixels).
	   *
	   * @param {!./webdriver.WebElement} element The element to drag.
	   * @param {(!./webdriver.WebElement|{x: number, y: number})} location The
	   *     location to drag to, either as another WebElement or an offset in
	   *     pixels.
	   * @return {!ActionSequence} A self reference.
	   */
	  dragAndDrop(element, location) {
	    return this.mouseDown(element).mouseMove(location).mouseUp();
	  }

	  /**
	   * Clicks a mouse button.
	   *
	   * If an element is provided, the mouse will first be moved to the center
	   * of that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).click()
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  click(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('click',
	        command.Name.CLICK, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Double-clicks a mouse button.
	   *
	   * If an element is provided, the mouse will first be moved to the center of
	   * that element. This is equivalent to:
	   *
	   *     sequence.mouseMove(element).doubleClick()
	   *
	   * Warning: this method currently only supports the left mouse button. See
	   * [issue 4047](http://code.google.com/p/selenium/issues/detail?id=4047).
	   *
	   * @param {(./webdriver.WebElement|input.Button)=} opt_elementOrButton Either
	   *     the element to interact with or the button to click with.
	   *     Defaults to {@link input.Button.LEFT} if neither an element nor
	   *     button is specified.
	   * @param {input.Button=} opt_button The button to use. Defaults to
	   *     {@link input.Button.LEFT}. Ignored if a button is provided as the
	   *     first argument.
	   * @return {!ActionSequence} A self reference.
	   */
	  doubleClick(opt_elementOrButton, opt_button) {
	    return this.scheduleMouseAction_('doubleClick',
	        command.Name.DOUBLE_CLICK, opt_elementOrButton, opt_button);
	  }

	  /**
	   * Schedules a keyboard action.
	   *
	   * @param {string} description A simple descriptive label for the scheduled
	   *     action.
	   * @param {!Array<(string|!input.Key)>} keys The keys to send.
	   * @return {!ActionSequence} A self reference.
	   * @private
	   */
	  scheduleKeyboardAction_(description, keys) {
	    let cmd = new command.Command(command.Name.SEND_KEYS_TO_ACTIVE_ELEMENT)
	        .setParameter('value', keys);
	    this.schedule_(description, cmd);
	    return this;
	  }

	  /**
	   * Performs a modifier key press. The modifier key is <em>not released</em>
	   * until {@link #keyUp} or {@link #sendKeys} is called. The key press will be
	   * targeted at the currently focused element.
	   *
	   * @param {!input.Key} key The modifier key to push. Must be one of
	   *     {ALT, CONTROL, SHIFT, COMMAND, META}.
	   * @return {!ActionSequence} A self reference.
	   * @throws {error.InvalidArgumentError} If the key is not a valid modifier
	   *     key.
	   */
	  keyDown(key) {
	    checkModifierKey(key);
	    return this.scheduleKeyboardAction_('keyDown', [key]);
	  }

	  /**
	   * Performs a modifier key release. The release is targeted at the currently
	   * focused element.
	   * @param {!input.Key} key The modifier key to release. Must be one of
	   *     {ALT, CONTROL, SHIFT, COMMAND, META}.
	   * @return {!ActionSequence} A self reference.
	   * @throws {error.InvalidArgumentError} If the key is not a valid modifier
	   *     key.
	   */
	  keyUp(key) {
	    checkModifierKey(key);
	    return this.scheduleKeyboardAction_('keyUp', [key]);
	  }

	  /**
	   * Simulates typing multiple keys. Each modifier key encountered in the
	   * sequence will not be released until it is encountered again. All key events
	   * will be targeted at the currently focused element.
	   *
	   * @param {...(string|!input.Key|!Array<(string|!input.Key)>)} var_args
	   *     The keys to type.
	   * @return {!ActionSequence} A self reference.
	   * @throws {Error} If the key is not a valid modifier key.
	   */
	  sendKeys(var_args) {
	    let keys = flatten(arguments);
	    return this.scheduleKeyboardAction_('sendKeys', keys);
	  }
	}


	/**
	 * Class for defining sequences of user touch interactions. Each sequence
	 * will not be executed until {@link #perform} is called.
	 *
	 * This class should not be instantiated directly. Instead, obtain an instance
	 * using {@link ./webdriver.WebDriver#touchActions() WebDriver.touchActions()}.
	 *
	 * Sample usage:
	 *
	 *     driver.touchActions().
	 *         tapAndHold({x: 0, y: 0}).
	 *         move({x: 3, y: 4}).
	 *         release({x: 10, y: 10}).
	 *         perform();
	 *
	 */
	class TouchSequence {
	  /**
	   * @param {!./webdriver.WebDriver} driver The driver that should be used to
	   *     perform this action sequence.
	   */
	  constructor(driver) {
	    /** @private {!./webdriver.WebDriver} */
	    this.driver_ = driver;

	    /** @private {!Array<{description: string, command: !command.Command}>} */
	    this.actions_ = [];
	  }

	  /**
	   * Schedules an action to be executed each time {@link #perform} is called on
	   * this instance.
	   * @param {string} description A description of the command.
	   * @param {!command.Command} command The command.
	   * @private
	   */
	  schedule_(description, command) {
	    this.actions_.push({
	      description: description,
	      command: command
	    });
	  }

	  /**
	   * Executes this action sequence.
	   * @return {!./promise.Thenable} A promise that will be resolved once
	   *     this sequence has completed.
	   */
	  perform() {
	    // Make a protected copy of the scheduled actions. This will protect against
	    // users defining additional commands before this sequence is actually
	    // executed.
	    let actions = this.actions_.concat();
	    let driver = this.driver_;
	    return driver.controlFlow().execute(function() {
	      let results = actions.map(action => {
	        return driver.schedule(action.command, action.description);
	      });
	      return Promise.all(results);
	    }, 'TouchSequence.perform');
	  }

	  /**
	   * Taps an element.
	   *
	   * @param {!./webdriver.WebElement} elem The element to tap.
	   * @return {!TouchSequence} A self reference.
	   */
	  tap(elem) {
	    let cmd = new command.Command(command.Name.TOUCH_SINGLE_TAP).
	        setParameter('element', elem.getId());

	    this.schedule_('tap', cmd);
	    return this;
	  }

	  /**
	   * Double taps an element.
	   *
	   * @param {!./webdriver.WebElement} elem The element to double tap.
	   * @return {!TouchSequence} A self reference.
	   */
	  doubleTap(elem) {
	    let cmd = new command.Command(command.Name.TOUCH_DOUBLE_TAP).
	        setParameter('element', elem.getId());

	    this.schedule_('doubleTap', cmd);
	    return this;
	  }

	  /**
	   * Long press on an element.
	   *
	   * @param {!./webdriver.WebElement} elem The element to long press.
	   * @return {!TouchSequence} A self reference.
	   */
	  longPress(elem) {
	    let cmd = new command.Command(command.Name.TOUCH_LONG_PRESS).
	        setParameter('element', elem.getId());

	    this.schedule_('longPress', cmd);
	    return this;
	  }

	  /**
	   * Touch down at the given location.
	   *
	   * @param {{x: number, y: number}} location The location to touch down at.
	   * @return {!TouchSequence} A self reference.
	   */
	  tapAndHold(location) {
	    let cmd = new command.Command(command.Name.TOUCH_DOWN).
	        setParameter('x', location.x).
	        setParameter('y', location.y);

	    this.schedule_('tapAndHold', cmd);
	    return this;
	  }

	  /**
	   * Move a held {@linkplain #tapAndHold touch} to the specified location.
	   *
	   * @param {{x: number, y: number}} location The location to move to.
	   * @return {!TouchSequence} A self reference.
	   */
	  move(location) {
	    let cmd = new command.Command(command.Name.TOUCH_MOVE).
	        setParameter('x', location.x).
	        setParameter('y', location.y);

	    this.schedule_('move', cmd);
	    return this;
	  }

	  /**
	   * Release a held {@linkplain #tapAndHold touch} at the specified location.
	   *
	   * @param {{x: number, y: number}} location The location to release at.
	   * @return {!TouchSequence} A self reference.
	   */
	  release(location) {
	    let cmd = new command.Command(command.Name.TOUCH_UP).
	        setParameter('x', location.x).
	        setParameter('y', location.y);

	    this.schedule_('release', cmd);
	    return this;
	  }

	  /**
	   * Scrolls the touch screen by the given offset.
	   *
	   * @param {{x: number, y: number}} offset The offset to scroll to.
	   * @return {!TouchSequence} A self reference.
	   */
	  scroll(offset) {
	    let cmd = new command.Command(command.Name.TOUCH_SCROLL).
	        setParameter('xoffset', offset.x).
	        setParameter('yoffset', offset.y);

	    this.schedule_('scroll', cmd);
	    return this;
	  }

	  /**
	   * Scrolls the touch screen, starting on `elem` and moving by the specified
	   * offset.
	   *
	   * @param {!./webdriver.WebElement} elem The element where scroll starts.
	   * @param {{x: number, y: number}} offset The offset to scroll to.
	   * @return {!TouchSequence} A self reference.
	   */
	  scrollFromElement(elem, offset) {
	    let cmd = new command.Command(command.Name.TOUCH_SCROLL).
	        setParameter('element', elem.getId()).
	        setParameter('xoffset', offset.x).
	        setParameter('yoffset', offset.y);

	    this.schedule_('scrollFromElement', cmd);
	    return this;
	  }

	  /**
	   * Flick, starting anywhere on the screen, at speed xspeed and yspeed.
	   *
	   * @param {{xspeed: number, yspeed: number}} speed The speed to flick in each
	         direction, in pixels per second.
	   * @return {!TouchSequence} A self reference.
	   */
	  flick(speed) {
	    let cmd = new command.Command(command.Name.TOUCH_FLICK).
	        setParameter('xspeed', speed.xspeed).
	        setParameter('yspeed', speed.yspeed);

	    this.schedule_('flick', cmd);
	    return this;
	  }

	  /**
	   * Flick starting at elem and moving by x and y at specified speed.
	   *
	   * @param {!./webdriver.WebElement} elem The element where flick starts.
	   * @param {{x: number, y: number}} offset The offset to flick to.
	   * @param {number} speed The speed to flick at in pixels per second.
	   * @return {!TouchSequence} A self reference.
	   */
	  flickElement(elem, offset, speed) {
	    let cmd = new command.Command(command.Name.TOUCH_FLICK).
	        setParameter('element', elem.getId()).
	        setParameter('xoffset', offset.x).
	        setParameter('yoffset', offset.y).
	        setParameter('speed', speed);

	    this.schedule_('flickElement', cmd);
	    return this;
	  }
	}


	// PUBLIC API

	module.exports = {
	  ActionSequence: ActionSequence,
	  TouchSequence: TouchSequence,
	};


/***/ }),
/* 103 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Defines types related to user input with the WebDriver API.
	 */


	/**
	 * Enumeration of the buttons used in the advanced interactions API.
	 * @enum {number}
	 */
	const Button = {
	  LEFT: 0,
	  MIDDLE: 1,
	  RIGHT: 2
	};



	/**
	 * Representations of pressable keys that aren't text.  These are stored in
	 * the Unicode PUA (Private Use Area) code points, 0xE000-0xF8FF.  Refer to
	 * http://www.google.com.au/search?&q=unicode+pua&btnG=Search
	 *
	 * @enum {string}
	 */
	const Key = {
	  NULL:         '\uE000',
	  CANCEL:       '\uE001',  // ^break
	  HELP:         '\uE002',
	  BACK_SPACE:   '\uE003',
	  TAB:          '\uE004',
	  CLEAR:        '\uE005',
	  RETURN:       '\uE006',
	  ENTER:        '\uE007',
	  SHIFT:        '\uE008',
	  CONTROL:      '\uE009',
	  ALT:          '\uE00A',
	  PAUSE:        '\uE00B',
	  ESCAPE:       '\uE00C',
	  SPACE:        '\uE00D',
	  PAGE_UP:      '\uE00E',
	  PAGE_DOWN:    '\uE00F',
	  END:          '\uE010',
	  HOME:         '\uE011',
	  ARROW_LEFT:   '\uE012',
	  LEFT:         '\uE012',
	  ARROW_UP:     '\uE013',
	  UP:           '\uE013',
	  ARROW_RIGHT:  '\uE014',
	  RIGHT:        '\uE014',
	  ARROW_DOWN:   '\uE015',
	  DOWN:         '\uE015',
	  INSERT:       '\uE016',
	  DELETE:       '\uE017',
	  SEMICOLON:    '\uE018',
	  EQUALS:       '\uE019',

	  NUMPAD0:      '\uE01A',  // number pad keys
	  NUMPAD1:      '\uE01B',
	  NUMPAD2:      '\uE01C',
	  NUMPAD3:      '\uE01D',
	  NUMPAD4:      '\uE01E',
	  NUMPAD5:      '\uE01F',
	  NUMPAD6:      '\uE020',
	  NUMPAD7:      '\uE021',
	  NUMPAD8:      '\uE022',
	  NUMPAD9:      '\uE023',
	  MULTIPLY:     '\uE024',
	  ADD:          '\uE025',
	  SEPARATOR:    '\uE026',
	  SUBTRACT:     '\uE027',
	  DECIMAL:      '\uE028',
	  DIVIDE:       '\uE029',

	  F1:           '\uE031',  // function keys
	  F2:           '\uE032',
	  F3:           '\uE033',
	  F4:           '\uE034',
	  F5:           '\uE035',
	  F6:           '\uE036',
	  F7:           '\uE037',
	  F8:           '\uE038',
	  F9:           '\uE039',
	  F10:          '\uE03A',
	  F11:          '\uE03B',
	  F12:          '\uE03C',

	  COMMAND:      '\uE03D',  // Apple command key
	  META:         '\uE03D'   // alias for Windows key
	};


	/**
	 * Simulate pressing many keys at once in a "chord". Takes a sequence of
	 * {@linkplain Key keys} or strings, appends each of the values to a string,
	 * adds the chord termination key ({@link Key.NULL}) and returns the resulting
	 * string.
	 *
	 * Note: when the low-level webdriver key handlers see Keys.NULL, active
	 * modifier keys (CTRL/ALT/SHIFT/etc) release via a keyup event.
	 *
	 * @param {...string} var_args The key sequence to concatenate.
	 * @return {string} The null-terminated key sequence.
	 */
	Key.chord = function(var_args) {
	  return Array.prototype.slice.call(arguments, 0).join('') + Key.NULL;
	};


	/**
	 * Used with {@link ./webelement.WebElement#sendKeys WebElement#sendKeys} on
	 * file input elements (`<input type="file">`) to detect when the entered key
	 * sequence defines the path to a file.
	 *
	 * By default, {@linkplain ./webelement.WebElement WebElement's} will enter all
	 * key sequences exactly as entered. You may set a
	 * {@linkplain ./webdriver.WebDriver#setFileDetector file detector} on the
	 * parent WebDriver instance to define custom behavior for handling file
	 * elements. Of particular note is the
	 * {@link selenium-webdriver/remote.FileDetector}, which should be used when
	 * running against a remote
	 * [Selenium Server](http://docs.seleniumhq.org/download/).
	 */
	class FileDetector {

	  /**
	   * Handles the file specified by the given path, preparing it for use with
	   * the current browser. If the path does not refer to a valid file, it will
	   * be returned unchanged, otherwise a path suitable for use with the current
	   * browser will be returned.
	   *
	   * This default implementation is a no-op. Subtypes may override this function
	   * for custom tailored file handling.
	   *
	   * @param {!./webdriver.WebDriver} driver The driver for the current browser.
	   * @param {string} path The path to process.
	   * @return {!Promise<string>} A promise for the processed file path.
	   * @package
	   */
	  handleFile(driver, path) {
	    return Promise.resolve(path);
	  }
	}


	// PUBLIC API


	module.exports = {
	  Button: Button,
	  Key: Key,
	  FileDetector: FileDetector
	};


/***/ }),
/* 104 */
/***/ (function(module, exports) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	/**
	 * @fileoverview Factory methods for the supported locator strategies.
	 */

	/**
	 * Short-hand expressions for the primary element locator strategies.
	 * For example the following two statements are equivalent:
	 *
	 *     var e1 = driver.findElement(By.id('foo'));
	 *     var e2 = driver.findElement({id: 'foo'});
	 *
	 * Care should be taken when using JavaScript minifiers (such as the
	 * Closure compiler), as locator hashes will always be parsed using
	 * the un-obfuscated properties listed.
	 *
	 * @typedef {(
	 *     {className: string}|
	 *     {css: string}|
	 *     {id: string}|
	 *     {js: string}|
	 *     {linkText: string}|
	 *     {name: string}|
	 *     {partialLinkText: string}|
	 *     {tagName: string}|
	 *     {xpath: string})}
	 */
	var ByHash;


	/**
	 * Error thrown if an invalid character is encountered while escaping a CSS
	 * identifier.
	 * @see https://drafts.csswg.org/cssom/#serialize-an-identifier
	 */
	class InvalidCharacterError extends Error {
	  constructor() {
	    super();
	    this.name = this.constructor.name;
	  }
	}


	/**
	 * Escapes a CSS string.
	 * @param {string} css the string to escape.
	 * @return {string} the escaped string.
	 * @throws {TypeError} if the input value is not a string.
	 * @throws {InvalidCharacterError} if the string contains an invalid character.
	 * @see https://drafts.csswg.org/cssom/#serialize-an-identifier
	 */
	function escapeCss(css) {
	  if (typeof css !== 'string') {
	    throw new TypeError('input must be a string');
	  }
	  let ret = '';
	  const n = css.length;
	  for (let i = 0; i  < n; i++) {
	    const c = css.charCodeAt(i);
	    if (c == 0x0) {
	      throw new InvalidCharacterError();
	    }

	    if ((c >= 0x0001 && c <= 0x001F)
	        || c == 0x007F
	        || (i == 0 && c >= 0x0030 && c <= 0x0039)
	        || (i == 1 && c >= 0x0030 && c <= 0x0039
	            && css.charCodeAt(0) == 0x002D)) {
	      ret += '\\' + c.toString(16) + ' ';
	      continue;
	    }

	    if (i == 0 && c == 0x002D && n == 1) {
	      ret += '\\' + css.charAt(i);
	      continue;
	    }

	    if (c >= 0x0080
	        || c == 0x002D                      // -
	        || c == 0x005F                      // _
	        || (c >= 0x0030 && c <= 0x0039)     // [0-9]
	        || (c >= 0x0041 && c <= 0x005A)     // [A-Z]
	        || (c >= 0x0061 && c <= 0x007A)) {  // [a-z]
	      ret += css.charAt(i);
	      continue;
	    }

	    ret += '\\' + css.charAt(i);
	  }
	  return ret;
	}


	/**
	 * Describes a mechanism for locating an element on the page.
	 * @final
	 */
	class By {
	  /**
	   * @param {string} using the name of the location strategy to use.
	   * @param {string} value the value to search for.
	   */
	  constructor(using, value) {
	    /** @type {string} */
	    this.using = using;

	    /** @type {string} */
	    this.value = value;
	  }

	  /**
	   * Locates elements that have a specific class name.
	   *
	   * @param {string} name The class name to search for.
	   * @return {!By} The new locator.
	   * @see http://www.w3.org/TR/2011/WD-html5-20110525/elements.html#classes
	   * @see http://www.w3.org/TR/CSS2/selector.html#class-html
	   */
	  static className(name) {
	    let names = name.split(/\s+/g)
	        .filter(s => s.length > 0)
	        .map(s => escapeCss(s));
	    return By.css('.' + names.join('.'));
	  }

	  /**
	   * Locates elements using a CSS selector.
	   *
	   * @param {string} selector The CSS selector to use.
	   * @return {!By} The new locator.
	   * @see http://www.w3.org/TR/CSS2/selector.html
	   */
	  static css(selector) {
	    return new By('css selector', selector);
	  }

	  /**
	   * Locates elements by the ID attribute. This locator uses the CSS selector
	   * `*[id="$ID"]`, _not_ `document.getElementById`.
	   *
	   * @param {string} id The ID to search for.
	   * @return {!By} The new locator.
	   */
	  static id(id) {
	    return By.css('*[id="' + escapeCss(id) + '"]');
	  }

	  /**
	   * Locates link elements whose
	   * {@linkplain webdriver.WebElement#getText visible text} matches the given
	   * string.
	   *
	   * @param {string} text The link text to search for.
	   * @return {!By} The new locator.
	   */
	  static linkText(text) {
	    return new By('link text', text);
	  }

	  /**
	   * Locates an elements by evaluating a
	   * {@linkplain webdriver.WebDriver#executeScript JavaScript expression}.
	   * The result of this expression must be an element or list of elements.
	   *
	   * @param {!(string|Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {function(!./webdriver.WebDriver): !./promise.Promise}
	   *     A new JavaScript-based locator function.
	   */
	  static js(script, var_args) {
	    let args = Array.prototype.slice.call(arguments, 0);
	    return function(driver) {
	      return driver.executeScript.apply(driver, args);
	    };
	  }

	  /**
	   * Locates elements whose `name` attribute has the given value.
	   *
	   * @param {string} name The name attribute to search for.
	   * @return {!By} The new locator.
	   */
	  static name(name) {
	    return By.css('*[name="' + escapeCss(name) + '"]');
	  }

	  /**
	   * Locates link elements whose
	   * {@linkplain webdriver.WebElement#getText visible text} contains the given
	   * substring.
	   *
	   * @param {string} text The substring to check for in a link's visible text.
	   * @return {!By} The new locator.
	   */
	  static partialLinkText(text) {
	    return new By('partial link text', text);
	  }

	  /**
	   * Locates elements with a given tag name.
	   *
	   * @param {string} name The tag name to search for.
	   * @return {!By} The new locator.
	   * @deprecated Use {@link By.css() By.css(tagName)} instead.
	   */
	  static tagName(name) {
	    return By.css(name);
	  }

	  /**
	   * Locates elements matching a XPath selector. Care should be taken when
	   * using an XPath selector with a {@link webdriver.WebElement} as WebDriver
	   * will respect the context in the specified in the selector. For example,
	   * given the selector `//div`, WebDriver will search from the document root
	   * regardless of whether the locator was used with a WebElement.
	   *
	   * @param {string} xpath The XPath selector to use.
	   * @return {!By} The new locator.
	   * @see http://www.w3.org/TR/xpath/
	   */
	  static xpath(xpath) {
	    return new By('xpath', xpath);
	  }

	  /** @override */
	  toString() {
	    // The static By.name() overrides this.constructor.name.  Shame...
	    return `By(${this.using}, ${this.value})`;
	  }
	}


	/**
	 * Checks if a value is a valid locator.
	 * @param {!(By|Function|ByHash)} locator The value to check.
	 * @return {!(By|Function)} The valid locator.
	 * @throws {TypeError} If the given value does not define a valid locator
	 *     strategy.
	 */
	function check(locator) {
	  if (locator instanceof By || typeof locator === 'function') {
	    return locator;
	  }

	  if (locator
	      && typeof locator === 'object'
	      && typeof locator.using === 'string'
	      && typeof locator.value === 'string') {
	    return new By(locator.using, locator.value);
	  }

	  for (let key in locator) {
	    if (locator.hasOwnProperty(key) && By.hasOwnProperty(key)) {
	      return By[key](locator[key]);
	    }
	  }
	  throw new TypeError('Invalid locator');
	}



	// PUBLIC API

	module.exports = {
	  By: By,
	  checkedLocator: check,
	};


/***/ }),
/* 105 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {// GENERATED CODE - DO NOT EDIT
	module.exports = function(){return function(){var aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)},ba="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global?global:this;
	function e(a,c){if(c){for(var b=ba,d=a.split("."),f=0;f<d.length-1;f++){var h=d[f];h in b||(b[h]={});b=b[h]}d=d[d.length-1];f=b[d];h=c(f);h!=f&&null!=h&&aa(b,d,{configurable:!0,writable:!0,value:h})}}
	e("String.prototype.repeat",function(a){return a?a:function(a){var b;if(null==this)throw new TypeError("The 'this' value for String.prototype.repeat must not be null or undefined");b=this+"";if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}});e("Math.sign",function(a){return a?a:function(a){a=Number(a);return!a||isNaN(a)?a:0<a?1:-1}});var g=this;function l(a){return"string"==typeof a};function m(a,c){this.a=n[a]||p;this.message=c||"";var b=this.a.replace(/((?:^|\s+)[a-z])/g,function(a){return a.toUpperCase().replace(/^[\s\xa0]+/g,"")}),d=b.length-5;if(0>d||b.indexOf("Error",d)!=d)b+="Error";this.name=b;b=Error(this.message);b.name=this.name;this.stack=b.stack||""}
	(function(){var a=Error;function c(){}c.prototype=a.prototype;m.b=a.prototype;m.prototype=new c;m.prototype.constructor=m;m.a=function(b,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return a.prototype[c].apply(b,h)}})();var p="unknown error",n={15:"element not selectable",11:"element not visible"};n[31]=p;n[30]=p;n[24]="invalid cookie domain";n[29]="invalid element coordinates";n[12]="invalid element state";n[32]="invalid selector";n[51]="invalid selector";
	n[52]="invalid selector";n[17]="javascript error";n[405]="unsupported operation";n[34]="move target out of bounds";n[27]="no such alert";n[7]="no such element";n[8]="no such frame";n[23]="no such window";n[28]="script timeout";n[33]="session not created";n[10]="stale element reference";n[21]="timeout";n[25]="unable to set cookie";n[26]="unexpected alert open";n[13]=p;n[9]="unknown command";m.prototype.toString=function(){return this.name+": "+this.message};var q=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")};
	function r(a,c){for(var b=0,d=q(String(a)).split("."),f=q(String(c)).split("."),h=Math.max(d.length,f.length),k=0;!b&&k<h;k++){var S=d[k]||"",ja=f[k]||"",ka=RegExp("(\\d*)(\\D*)","g"),la=RegExp("(\\d*)(\\D*)","g");do{var t=ka.exec(S)||["","",""],u=la.exec(ja)||["","",""];if(0==t[0].length&&0==u[0].length)break;b=v(0==t[1].length?0:parseInt(t[1],10),0==u[1].length?0:parseInt(u[1],10))||v(0==t[2].length,0==u[2].length)||v(t[2],u[2])}while(!b)}return b}function v(a,c){return a<c?-1:a>c?1:0};var w;a:{var x=g.navigator;if(x){var y=x.userAgent;if(y){w=y;break a}}w=""}function z(a){return-1!=w.indexOf(a)};function ca(a,c){for(var b=a.length,d=l(a)?a.split(""):a,f=0;f<b;f++)f in d&&c.call(void 0,d[f],f,a)};function A(){return z("iPhone")&&!z("iPod")&&!z("iPad")};function B(){return z("Opera")||z("OPR")}function C(){return(z("Chrome")||z("CriOS"))&&!B()&&!z("Edge")};var D=B(),E=z("Trident")||z("MSIE"),F=z("Edge"),G=z("Gecko")&&!(-1!=w.toLowerCase().indexOf("webkit")&&!z("Edge"))&&!(z("Trident")||z("MSIE"))&&!z("Edge"),da=-1!=w.toLowerCase().indexOf("webkit")&&!z("Edge");function ea(){var a=w;if(G)return/rv\:([^\);]+)(\)|;)/.exec(a);if(F)return/Edge\/([\d\.]+)/.exec(a);if(E)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(da)return/WebKit\/(\S+)/.exec(a)}function H(){var a=g.document;return a?a.documentMode:void 0}
	var I=function(){if(D&&g.opera){var a;var c=g.opera.version;try{a=c()}catch(b){a=c}return a}a="";(c=ea())&&(a=c?c[1]:"");return E&&(c=H(),null!=c&&c>parseFloat(a))?String(c):a}(),J={},K=g.document,L=K&&E?H()||("CSS1Compat"==K.compatMode?parseInt(I,10):5):void 0;!G&&!E||E&&9<=Number(L)||G&&(J["1.9.1"]||(J["1.9.1"]=0<=r(I,"1.9.1")));E&&(J["9"]||(J["9"]=0<=r(I,"9")));var fa=z("Firefox"),ga=A()||z("iPod"),ha=z("iPad"),M=z("Android")&&!(C()||z("Firefox")||B()||z("Silk")),ia=C(),N=z("Safari")&&!(C()||z("Coast")||B()||z("Edge")||z("Silk")||z("Android"))&&!(A()||z("iPad")||z("iPod"));var ma={SCRIPT:1,STYLE:1,HEAD:1,IFRAME:1,OBJECT:1},na={IMG:" ",BR:"\n"};function oa(a,c,b){if(!(a.nodeName in ma))if(3==a.nodeType)b?c.push(String(a.nodeValue).replace(/(\r\n|\r|\n)/g,"")):c.push(a.nodeValue);else if(a.nodeName in na)c.push(na[a.nodeName]);else for(a=a.firstChild;a;)oa(a,c,b),a=a.nextSibling};function O(a){return(a=a.exec(w))?a[1]:""}var pa=function(){if(fa)return O(/Firefox\/([0-9.]+)/);if(E||F||D)return I;if(ia)return O(/Chrome\/([0-9.]+)/);if(N&&!(A()||z("iPad")||z("iPod")))return O(/Version\/([0-9.]+)/);if(ga||ha){var a=/Version\/(\S+).*Mobile\/(\S+)/.exec(w);if(a)return a[1]+"."+a[2]}else if(M)return(a=O(/Android\s+([0-9.]+)/))?a:O(/Version\/([0-9.]+)/);return""}();var qa;function P(a){ra?qa(a):M?r(sa,a):r(pa,a)}var ra=function(){if(!G)return!1;var a=g.Components;if(!a)return!1;try{if(!a.classes)return!1}catch(f){return!1}var c=a.classes,a=a.interfaces,b=c["@mozilla.org/xpcom/version-comparator;1"].getService(a.nsIVersionComparator),d=c["@mozilla.org/xre/app-info;1"].getService(a.nsIXULAppInfo).version;qa=function(a){b.compare(d,""+a)};return!0}(),Q;if(M){var ta=/Android\s+([0-9\.]+)/.exec(w);Q=ta?ta[1]:"0"}else Q="0";
	var sa=Q,ua=E&&!(8<=Number(L)),va=E&&!(9<=Number(L));M&&P(2.3);M&&P(4);N&&P(6);function R(a,c){c=c.toLowerCase();if("style"==c)return wa(a.style.cssText);if(ua&&"value"==c&&T(a,"INPUT"))return a.value;if(va&&!0===a[c])return String(a.getAttribute(c));var b=a.getAttributeNode(c);return b&&b.specified?b.value:null}var xa=/[;]+(?=(?:(?:[^"]*"){2})*[^"]*$)(?=(?:(?:[^']*'){2})*[^']*$)(?=(?:[^()]*\([^()]*\))*[^()]*$)/;
	function wa(a){var c=[];ca(a.split(xa),function(a){var d=a.indexOf(":");0<d&&(a=[a.slice(0,d),a.slice(d+1)],2==a.length&&c.push(a[0].toLowerCase(),":",a[1],";"))});c=c.join("");return c=";"==c.charAt(c.length-1)?c:c+";"}function U(a,c){var b;ua&&"value"==c&&T(a,"OPTION")&&null===R(a,"value")?(b=[],oa(a,b,!1),b=b.join("")):b=a[c];return b}function T(a,c){return!!a&&1==a.nodeType&&(!c||a.tagName.toUpperCase()==c)}
	function ya(a){return T(a,"OPTION")?!0:T(a,"INPUT")?(a=a.type.toLowerCase(),"checkbox"==a||"radio"==a):!1};var za={"class":"className",readonly:"readOnly"},V="async autofocus autoplay checked compact complete controls declare defaultchecked defaultselected defer disabled draggable ended formnovalidate hidden indeterminate iscontenteditable ismap itemscope loop multiple muted nohref noresize noshade novalidate nowrap open paused pubdate readonly required reversed scoped seamless seeking selected spellcheck truespeed willvalidate".split(" ");function Aa(a,c){var b=null,d=c.toLowerCase();if("style"==d)return(b=a.style)&&!l(b)&&(b=b.cssText),b;if(("selected"==d||"checked"==d)&&ya(a)){if(!ya(a))throw new m(15,"Element is not selectable");var b="selected",f=a.type&&a.type.toLowerCase();if("checkbox"==f||"radio"==f)b="checked";return U(a,b)?"true":null}var h=T(a,"A");if(T(a,"IMG")&&"src"==d||h&&"href"==d)return(b=R(a,d))&&(b=U(a,d)),b;if("spellcheck"==d){b=R(a,d);if(null!==b){if("false"==b.toLowerCase())return"false";if("true"==b.toLowerCase())return"true"}return U(a,
	d)+""}h=za[c]||c;a:if(l(V))d=l(d)&&1==d.length?V.indexOf(d,0):-1;else{for(var k=0;k<V.length;k++)if(k in V&&V[k]===d){d=k;break a}d=-1}if(0<=d)return(b=null!==R(a,c)||U(a,h))?"true":null;try{f=U(a,h)}catch(S){}(d=null==f)||(d=typeof f,d="object"==d&&null!=f||"function"==d);d?b=R(a,c):b=f;return null!=b?b.toString():null}var W=["_"],X=g;W[0]in X||!X.execScript||X.execScript("var "+W[0]);for(var Y;W.length&&(Y=W.shift());){var Z;if(Z=!W.length)Z=void 0!==Aa;Z?X[Y]=Aa:X[Y]?X=X[Y]:X=X[Y]={}};; return this._.apply(null,arguments);}.apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 106 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {// GENERATED CODE - DO NOT EDIT
	module.exports = function(){return function(){var aa="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)},ba="undefined"!=typeof window&&window===this?this:"undefined"!=typeof global?global:this;
	function ca(a,b){if(b){for(var c=ba,d=a.split("."),e=0;e<d.length-1;e++){var f=d[e];f in c||(c[f]={});c=c[f]}d=d[d.length-1];e=c[d];f=b(e);f!=e&&null!=f&&aa(c,d,{configurable:!0,writable:!0,value:f})}}
	ca("String.prototype.repeat",function(a){return a?a:function(a){var c;if(null==this)throw new TypeError("The 'this' value for String.prototype.repeat must not be null or undefined");c=this+"";if(0>a||1342177279<a)throw new RangeError("Invalid count value");a|=0;for(var d="";a;)if(a&1&&(d+=c),a>>>=1)c+=c;return d}});ca("Math.sign",function(a){return a?a:function(a){a=Number(a);return!a||isNaN(a)?a:0<a?1:-1}});var k=this;function l(a){return void 0!==a}
	function da(a,b){var c=a.split("."),d=k;c[0]in d||!d.execScript||d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)!c.length&&l(b)?d[e]=b:d[e]?d=d[e]:d=d[e]={}}
	function ea(a){var b=typeof a;if("object"==b)if(a){if(a instanceof Array)return"array";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if("[object Window]"==c)return"object";if("[object Array]"==c||"number"==typeof a.length&&"undefined"!=typeof a.splice&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("splice"))return"array";if("[object Function]"==c||"undefined"!=typeof a.call&&"undefined"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable("call"))return"function"}else return"null";
	else if("function"==b&&"undefined"==typeof a.call)return"object";return b}function n(a){return"string"==typeof a}function fa(a,b,c){return a.call.apply(a.bind,arguments)}function ga(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}
	function ha(a,b,c){ha=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?fa:ga;return ha.apply(null,arguments)}function ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}
	function q(a,b){function c(){}c.prototype=b.prototype;a.H=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.G=function(a,c,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[c].apply(a,g)}};function ja(a,b){this.a=r[a]||ka;this.message=b||"";var c=this.a.replace(/((?:^|\s+)[a-z])/g,function(a){return a.toUpperCase().replace(/^[\s\xa0]+/g,"")}),d=c.length-5;if(0>d||c.indexOf("Error",d)!=d)c+="Error";this.name=c;c=Error(this.message);c.name=this.name;this.stack=c.stack||""}q(ja,Error);var ka="unknown error",r={15:"element not selectable",11:"element not visible"};r[31]=ka;r[30]=ka;r[24]="invalid cookie domain";r[29]="invalid element coordinates";r[12]="invalid element state";r[32]="invalid selector";
	r[51]="invalid selector";r[52]="invalid selector";r[17]="javascript error";r[405]="unsupported operation";r[34]="move target out of bounds";r[27]="no such alert";r[7]="no such element";r[8]="no such frame";r[23]="no such window";r[28]="script timeout";r[33]="session not created";r[10]="stale element reference";r[21]="timeout";r[25]="unable to set cookie";r[26]="unexpected alert open";r[13]=ka;r[9]="unknown command";ja.prototype.toString=function(){return this.name+": "+this.message};var la={aliceblue:"#f0f8ff",antiquewhite:"#faebd7",aqua:"#00ffff",aquamarine:"#7fffd4",azure:"#f0ffff",beige:"#f5f5dc",bisque:"#ffe4c4",black:"#000000",blanchedalmond:"#ffebcd",blue:"#0000ff",blueviolet:"#8a2be2",brown:"#a52a2a",burlywood:"#deb887",cadetblue:"#5f9ea0",chartreuse:"#7fff00",chocolate:"#d2691e",coral:"#ff7f50",cornflowerblue:"#6495ed",cornsilk:"#fff8dc",crimson:"#dc143c",cyan:"#00ffff",darkblue:"#00008b",darkcyan:"#008b8b",darkgoldenrod:"#b8860b",darkgray:"#a9a9a9",darkgreen:"#006400",
	darkgrey:"#a9a9a9",darkkhaki:"#bdb76b",darkmagenta:"#8b008b",darkolivegreen:"#556b2f",darkorange:"#ff8c00",darkorchid:"#9932cc",darkred:"#8b0000",darksalmon:"#e9967a",darkseagreen:"#8fbc8f",darkslateblue:"#483d8b",darkslategray:"#2f4f4f",darkslategrey:"#2f4f4f",darkturquoise:"#00ced1",darkviolet:"#9400d3",deeppink:"#ff1493",deepskyblue:"#00bfff",dimgray:"#696969",dimgrey:"#696969",dodgerblue:"#1e90ff",firebrick:"#b22222",floralwhite:"#fffaf0",forestgreen:"#228b22",fuchsia:"#ff00ff",gainsboro:"#dcdcdc",
	ghostwhite:"#f8f8ff",gold:"#ffd700",goldenrod:"#daa520",gray:"#808080",green:"#008000",greenyellow:"#adff2f",grey:"#808080",honeydew:"#f0fff0",hotpink:"#ff69b4",indianred:"#cd5c5c",indigo:"#4b0082",ivory:"#fffff0",khaki:"#f0e68c",lavender:"#e6e6fa",lavenderblush:"#fff0f5",lawngreen:"#7cfc00",lemonchiffon:"#fffacd",lightblue:"#add8e6",lightcoral:"#f08080",lightcyan:"#e0ffff",lightgoldenrodyellow:"#fafad2",lightgray:"#d3d3d3",lightgreen:"#90ee90",lightgrey:"#d3d3d3",lightpink:"#ffb6c1",lightsalmon:"#ffa07a",
	lightseagreen:"#20b2aa",lightskyblue:"#87cefa",lightslategray:"#778899",lightslategrey:"#778899",lightsteelblue:"#b0c4de",lightyellow:"#ffffe0",lime:"#00ff00",limegreen:"#32cd32",linen:"#faf0e6",magenta:"#ff00ff",maroon:"#800000",mediumaquamarine:"#66cdaa",mediumblue:"#0000cd",mediumorchid:"#ba55d3",mediumpurple:"#9370db",mediumseagreen:"#3cb371",mediumslateblue:"#7b68ee",mediumspringgreen:"#00fa9a",mediumturquoise:"#48d1cc",mediumvioletred:"#c71585",midnightblue:"#191970",mintcream:"#f5fffa",mistyrose:"#ffe4e1",
	moccasin:"#ffe4b5",navajowhite:"#ffdead",navy:"#000080",oldlace:"#fdf5e6",olive:"#808000",olivedrab:"#6b8e23",orange:"#ffa500",orangered:"#ff4500",orchid:"#da70d6",palegoldenrod:"#eee8aa",palegreen:"#98fb98",paleturquoise:"#afeeee",palevioletred:"#db7093",papayawhip:"#ffefd5",peachpuff:"#ffdab9",peru:"#cd853f",pink:"#ffc0cb",plum:"#dda0dd",powderblue:"#b0e0e6",purple:"#800080",red:"#ff0000",rosybrown:"#bc8f8f",royalblue:"#4169e1",saddlebrown:"#8b4513",salmon:"#fa8072",sandybrown:"#f4a460",seagreen:"#2e8b57",
	seashell:"#fff5ee",sienna:"#a0522d",silver:"#c0c0c0",skyblue:"#87ceeb",slateblue:"#6a5acd",slategray:"#708090",slategrey:"#708090",snow:"#fffafa",springgreen:"#00ff7f",steelblue:"#4682b4",tan:"#d2b48c",teal:"#008080",thistle:"#d8bfd8",tomato:"#ff6347",turquoise:"#40e0d0",violet:"#ee82ee",wheat:"#f5deb3",white:"#ffffff",whitesmoke:"#f5f5f5",yellow:"#ffff00",yellowgreen:"#9acd32"};function ma(a,b){this.width=a;this.height=b}ma.prototype.clone=function(){return new ma(this.width,this.height)};ma.prototype.toString=function(){return"("+this.width+" x "+this.height+")"};ma.prototype.ceil=function(){this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};ma.prototype.floor=function(){this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};
	ma.prototype.round=function(){this.width=Math.round(this.width);this.height=Math.round(this.height);return this};var na=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\s\xa0]+|[\s\xa0]+$/g,"")};
	function oa(a,b){for(var c=0,d=na(String(a)).split("."),e=na(String(b)).split("."),f=Math.max(d.length,e.length),g=0;!c&&g<f;g++){var h=d[g]||"",p=e[g]||"",w=RegExp("(\\d*)(\\D*)","g"),m=RegExp("(\\d*)(\\D*)","g");do{var u=w.exec(h)||["","",""],y=m.exec(p)||["","",""];if(0==u[0].length&&0==y[0].length)break;c=pa(0==u[1].length?0:parseInt(u[1],10),0==y[1].length?0:parseInt(y[1],10))||pa(0==u[2].length,0==y[2].length)||pa(u[2],y[2])}while(!c)}return c}function pa(a,b){return a<b?-1:a>b?1:0}
	function qa(a){return String(a).replace(/\-([a-z])/g,function(a,c){return c.toUpperCase()})};/*

	 The MIT License

	 Copyright (c) 2007 Cybozu Labs, Inc.
	 Copyright (c) 2012 Google Inc.

	 Permission is hereby granted, free of charge, to any person obtaining a copy
	 of this software and associated documentation files (the "Software"), to
	 deal in the Software without restriction, including without limitation the
	 rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	 sell copies of the Software, and to permit persons to whom the Software is
	 furnished to do so, subject to the following conditions:

	 The above copyright notice and this permission notice shall be included in
	 all copies or substantial portions of the Software.

	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
	 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
	 IN THE SOFTWARE.
	*/
	function ra(a,b,c){this.a=a;this.b=b||1;this.f=c||1};function sa(a){this.b=a;this.a=0}function ta(a){a=a.match(ua);for(var b=0;b<a.length;b++)va.test(a[b])&&a.splice(b,1);return new sa(a)}var ua=RegExp("\\$?(?:(?![0-9-\\.])(?:\\*|[\\w-\\.]+):)?(?![0-9-\\.])(?:\\*|[\\w-\\.]+)|\\/\\/|\\.\\.|::|\\d+(?:\\.\\d*)?|\\.\\d+|\"[^\"]*\"|'[^']*'|[!<>]=|\\s+|.","g"),va=/^\s/;function t(a,b){return a.b[a.a+(b||0)]}function v(a){return a.b[a.a++]}function wa(a){return a.b.length<=a.a};var x;a:{var xa=k.navigator;if(xa){var ya=xa.userAgent;if(ya){x=ya;break a}}x=""}function z(a){return-1!=x.indexOf(a)};function A(a,b){this.h=a;this.c=l(b)?b:null;this.b=null;switch(a){case "comment":this.b=8;break;case "text":this.b=3;break;case "processing-instruction":this.b=7;break;case "node":break;default:throw Error("Unexpected argument");}}function za(a){return"comment"==a||"text"==a||"processing-instruction"==a||"node"==a}A.prototype.a=function(a){return null===this.b||this.b==a.nodeType};A.prototype.f=function(){return this.h};
	A.prototype.toString=function(){var a="Kind Test: "+this.h;!this.c||(a+=B(this.c));return a};function Aa(a,b){this.j=a.toLowerCase();var c;c="*"==this.j?"*":"http://www.w3.org/1999/xhtml";this.c=b?b.toLowerCase():c}Aa.prototype.a=function(a){var b=a.nodeType;if(1!=b&&2!=b)return!1;b=l(a.localName)?a.localName:a.nodeName;return"*"!=this.j&&this.j!=b.toLowerCase()?!1:"*"==this.c?!0:this.c==(a.namespaceURI?a.namespaceURI.toLowerCase():"http://www.w3.org/1999/xhtml")};Aa.prototype.f=function(){return this.j};
	Aa.prototype.toString=function(){return"Name Test: "+("http://www.w3.org/1999/xhtml"==this.c?"":this.c+":")+this.j};function Ba(a){switch(a.nodeType){case 1:return ia(Ca,a);case 9:return Ba(a.documentElement);case 11:case 10:case 6:case 12:return Da;default:return a.parentNode?Ba(a.parentNode):Da}}function Da(){return null}function Ca(a,b){if(a.prefix==b)return a.namespaceURI||"http://www.w3.org/1999/xhtml";var c=a.getAttributeNode("xmlns:"+b);return c&&c.specified?c.value||null:a.parentNode&&9!=a.parentNode.nodeType?Ca(a.parentNode,b):null};function Ea(a,b){if(n(a))return n(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1}function C(a,b){for(var c=a.length,d=n(a)?a.split(""):a,e=0;e<c;e++)e in d&&b.call(void 0,d[e],e,a)}function Fa(a,b){for(var c=a.length,d=[],e=0,f=n(a)?a.split(""):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h)}return d}function Ga(a,b,c){var d=c;C(a,function(c,f){d=b.call(void 0,d,c,f,a)});return d}
	function Ha(a,b){for(var c=a.length,d=n(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return!0;return!1}function Ia(a,b){for(var c=a.length,d=n(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&!b.call(void 0,d[e],e,a))return!1;return!0}function Ja(a,b){var c;a:{c=a.length;for(var d=n(a)?a.split(""):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){c=e;break a}c=-1}return 0>c?null:n(a)?a.charAt(c):a[c]}function Ka(a){return Array.prototype.concat.apply(Array.prototype,arguments)}
	function La(a,b,c){return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};function Ma(){return z("iPhone")&&!z("iPod")&&!z("iPad")};var Na="backgroundColor borderTopColor borderRightColor borderBottomColor borderLeftColor color outlineColor".split(" "),Oa=/#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])/,Pa=/^#(?:[0-9a-f]{3}){1,2}$/i,Qa=/^(?:rgba)?\((\d{1,3}),\s?(\d{1,3}),\s?(\d{1,3}),\s?(0|1|0\.\d*)\)$/i,Ra=/^(?:rgb)?\((0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2}),\s?(0|[1-9]\d{0,2})\)$/i;function Sa(){return z("Opera")||z("OPR")}function Ta(){return(z("Chrome")||z("CriOS"))&&!Sa()&&!z("Edge")};function D(a,b){this.x=l(a)?a:0;this.y=l(b)?b:0}D.prototype.clone=function(){return new D(this.x,this.y)};D.prototype.toString=function(){return"("+this.x+", "+this.y+")"};D.prototype.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this};D.prototype.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this};D.prototype.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this};var Ua=Sa(),E=z("Trident")||z("MSIE"),Va=z("Edge"),Wa=z("Gecko")&&!(-1!=x.toLowerCase().indexOf("webkit")&&!z("Edge"))&&!(z("Trident")||z("MSIE"))&&!z("Edge"),Xa=-1!=x.toLowerCase().indexOf("webkit")&&!z("Edge");function Ya(){var a=x;if(Wa)return/rv\:([^\);]+)(\)|;)/.exec(a);if(Va)return/Edge\/([\d\.]+)/.exec(a);if(E)return/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);if(Xa)return/WebKit\/(\S+)/.exec(a)}function Za(){var a=k.document;return a?a.documentMode:void 0}
	var $a=function(){if(Ua&&k.opera){var a;var b=k.opera.version;try{a=b()}catch(c){a=b}return a}a="";(b=Ya())&&(a=b?b[1]:"");return E&&(b=Za(),null!=b&&b>parseFloat(a))?String(b):a}(),ab={};function bb(a){return ab[a]||(ab[a]=0<=oa($a,a))}var cb=k.document,db=cb&&E?Za()||("CSS1Compat"==cb.compatMode?parseInt($a,10):5):void 0;!Wa&&!E||E&&9<=Number(db)||Wa&&bb("1.9.1");E&&bb("9");function eb(a,b,c,d){this.top=a;this.right=b;this.bottom=c;this.left=d}eb.prototype.clone=function(){return new eb(this.top,this.right,this.bottom,this.left)};eb.prototype.toString=function(){return"("+this.top+"t, "+this.right+"r, "+this.bottom+"b, "+this.left+"l)"};eb.prototype.ceil=function(){this.top=Math.ceil(this.top);this.right=Math.ceil(this.right);this.bottom=Math.ceil(this.bottom);this.left=Math.ceil(this.left);return this};
	eb.prototype.floor=function(){this.top=Math.floor(this.top);this.right=Math.floor(this.right);this.bottom=Math.floor(this.bottom);this.left=Math.floor(this.left);return this};eb.prototype.round=function(){this.top=Math.round(this.top);this.right=Math.round(this.right);this.bottom=Math.round(this.bottom);this.left=Math.round(this.left);return this};var fb=z("Firefox"),gb=Ma()||z("iPod"),hb=z("iPad"),ib=z("Android")&&!(Ta()||z("Firefox")||Sa()||z("Silk")),jb=Ta(),kb=z("Safari")&&!(Ta()||z("Coast")||Sa()||z("Edge")||z("Silk")||z("Android"))&&!(Ma()||z("iPad")||z("iPod"));var F=E&&!(9<=Number(db)),lb=E&&!(8<=Number(db));function mb(a,b){if(!a||!b)return!1;if(a.contains&&1==b.nodeType)return a==b||a.contains(b);if("undefined"!=typeof a.compareDocumentPosition)return a==b||!!(a.compareDocumentPosition(b)&16);for(;b&&a!=b;)b=b.parentNode;return b==a}
	function nb(a,b){if(a==b)return 0;if(a.compareDocumentPosition)return a.compareDocumentPosition(b)&2?1:-1;if(E&&!(9<=Number(db))){if(9==a.nodeType)return-1;if(9==b.nodeType)return 1}if("sourceIndex"in a||a.parentNode&&"sourceIndex"in a.parentNode){var c=1==a.nodeType,d=1==b.nodeType;if(c&&d)return a.sourceIndex-b.sourceIndex;var e=a.parentNode,f=b.parentNode;return e==f?ob(a,b):!c&&mb(e,b)?-1*pb(a,b):!d&&mb(f,a)?pb(b,a):(c?a.sourceIndex:e.sourceIndex)-(d?b.sourceIndex:f.sourceIndex)}d=G(a);c=d.createRange();
	c.selectNode(a);c.collapse(!0);d=d.createRange();d.selectNode(b);d.collapse(!0);return c.compareBoundaryPoints(k.Range.START_TO_END,d)}function pb(a,b){var c=a.parentNode;if(c==b)return-1;for(var d=b;d.parentNode!=c;)d=d.parentNode;return ob(d,a)}function ob(a,b){for(var c=b;c=c.previousSibling;)if(c==a)return-1;return 1}function G(a){return 9==a.nodeType?a:a.ownerDocument||a.document}function qb(a,b){a=a.parentNode;for(var c=0;a;){if(b(a))return a;a=a.parentNode;c++}return null}
	function rb(a){this.a=a||k.document||document};function H(a,b,c,d){this.left=a;this.top=b;this.width=c;this.height=d}H.prototype.clone=function(){return new H(this.left,this.top,this.width,this.height)};H.prototype.toString=function(){return"("+this.left+", "+this.top+" - "+this.width+"w x "+this.height+"h)"};H.prototype.ceil=function(){this.left=Math.ceil(this.left);this.top=Math.ceil(this.top);this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};
	H.prototype.floor=function(){this.left=Math.floor(this.left);this.top=Math.floor(this.top);this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};H.prototype.round=function(){this.left=Math.round(this.left);this.top=Math.round(this.top);this.width=Math.round(this.width);this.height=Math.round(this.height);return this};function sb(a){return(a=a.exec(x))?a[1]:""}var tb=function(){if(fb)return sb(/Firefox\/([0-9.]+)/);if(E||Va||Ua)return $a;if(jb)return sb(/Chrome\/([0-9.]+)/);if(kb&&!(Ma()||z("iPad")||z("iPod")))return sb(/Version\/([0-9.]+)/);if(gb||hb){var a=/Version\/(\S+).*Mobile\/(\S+)/.exec(x);if(a)return a[1]+"."+a[2]}else if(ib)return(a=sb(/Android\s+([0-9.]+)/))?a:sb(/Version\/([0-9.]+)/);return""}();function ub(a,b,c,d){this.a=a;this.nodeName=c;this.nodeValue=d;this.nodeType=2;this.parentNode=this.ownerElement=b}function vb(a,b){var c=lb&&"href"==b.nodeName?a.getAttribute(b.nodeName,2):b.nodeValue;return new ub(b,a,b.nodeName,c)};var wb;function xb(a){yb?wb(a):ib?oa(zb,a):oa(tb,a)}var yb=function(){if(!Wa)return!1;var a=k.Components;if(!a)return!1;try{if(!a.classes)return!1}catch(e){return!1}var b=a.classes,a=a.interfaces,c=b["@mozilla.org/xpcom/version-comparator;1"].getService(a.nsIVersionComparator),d=b["@mozilla.org/xre/app-info;1"].getService(a.nsIXULAppInfo).version;wb=function(a){c.compare(d,""+a)};return!0}(),Ab;if(ib){var Bb=/Android\s+([0-9\.]+)/.exec(x);Ab=Bb?Bb[1]:"0"}else Ab="0";var zb=Ab,Cb=E&&!(9<=Number(db));
	ib&&xb(2.3);ib&&xb(4);kb&&xb(6);function I(a){var b=null,c=a.nodeType;1==c&&(b=a.textContent,b=void 0==b||null==b?a.innerText:b,b=void 0==b||null==b?"":b);if("string"!=typeof b)if(F&&"title"==a.nodeName.toLowerCase()&&1==c)b=a.text;else if(9==c||1==c){a=9==c?a.documentElement:a.firstChild;for(var c=0,d=[],b="";a;){do 1!=a.nodeType&&(b+=a.nodeValue),F&&"title"==a.nodeName.toLowerCase()&&(b+=a.text),d[c++]=a;while(a=a.firstChild);for(;c&&!(a=d[--c].nextSibling););}}else b=a.nodeValue;return""+b}
	function J(a,b,c){if(null===b)return!0;try{if(!a.getAttribute)return!1}catch(d){return!1}lb&&"class"==b&&(b="className");return null==c?!!a.getAttribute(b):a.getAttribute(b,2)==c}function Db(a,b,c,d,e){return(F?Eb:Fb).call(null,a,b,n(c)?c:null,n(d)?d:null,e||new K)}
	function Eb(a,b,c,d,e){if(a instanceof Aa||8==a.b||c&&null===a.b){var f=b.all;if(!f)return e;a=Gb(a);if("*"!=a&&(f=b.getElementsByTagName(a),!f))return e;if(c){for(var g=[],h=0;b=f[h++];)J(b,c,d)&&g.push(b);f=g}for(h=0;b=f[h++];)"*"==a&&"!"==b.tagName||L(e,b);return e}Hb(a,b,c,d,e);return e}
	function Fb(a,b,c,d,e){b.getElementsByName&&d&&"name"==c&&!E?(b=b.getElementsByName(d),C(b,function(b){a.a(b)&&L(e,b)})):b.getElementsByClassName&&d&&"class"==c?(b=b.getElementsByClassName(d),C(b,function(b){b.className==d&&a.a(b)&&L(e,b)})):a instanceof A?Hb(a,b,c,d,e):b.getElementsByTagName&&(b=b.getElementsByTagName(a.f()),C(b,function(a){J(a,c,d)&&L(e,a)}));return e}
	function Ib(a,b,c,d,e){var f;if((a instanceof Aa||8==a.b||c&&null===a.b)&&(f=b.childNodes)){var g=Gb(a);if("*"!=g&&(f=Fa(f,function(a){return a.tagName&&a.tagName.toLowerCase()==g}),!f))return e;c&&(f=Fa(f,function(a){return J(a,c,d)}));C(f,function(a){"*"==g&&("!"==a.tagName||"*"==g&&1!=a.nodeType)||L(e,a)});return e}return Jb(a,b,c,d,e)}function Jb(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)J(b,c,d)&&a.a(b)&&L(e,b);return e}
	function Hb(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)J(b,c,d)&&a.a(b)&&L(e,b),Hb(a,b,c,d,e)}function Gb(a){if(a instanceof A){if(8==a.b)return"!";if(null===a.b)return"*"}return a.f()};function M(a,b){return!!a&&1==a.nodeType&&(!b||a.tagName.toUpperCase()==b)};function K(){this.b=this.a=null;this.l=0}function Kb(a){this.node=a;this.a=this.b=null}function Lb(a,b){if(!a.a)return b;if(!b.a)return a;for(var c=a.a,d=b.a,e=null,f,g=0;c&&d;){f=c.node;var h=d.node;f==h||f instanceof ub&&h instanceof ub&&f.a==h.a?(f=c,c=c.a,d=d.a):0<nb(c.node,d.node)?(f=d,d=d.a):(f=c,c=c.a);(f.b=e)?e.a=f:a.a=f;e=f;g++}for(f=c||d;f;)f.b=e,e=e.a=f,g++,f=f.a;a.b=e;a.l=g;return a}K.prototype.unshift=function(a){a=new Kb(a);a.a=this.a;this.b?this.a.b=a:this.a=this.b=a;this.a=a;this.l++};
	function L(a,b){var c=new Kb(b);c.b=a.b;a.a?a.b.a=c:a.a=a.b=c;a.b=c;a.l++}function Mb(a){return(a=a.a)?a.node:null}function Nb(a){return(a=Mb(a))?I(a):""}function N(a,b){return new Ob(a,!!b)}function Ob(a,b){this.f=a;this.b=(this.c=b)?a.b:a.a;this.a=null}function O(a){var b=a.b;if(b){var c=a.a=b;a.b=a.c?b.b:b.a;return c.node}return null};function P(a){this.i=a;this.b=this.g=!1;this.f=null}function B(a){return"\n  "+a.toString().split("\n").join("\n  ")}function Pb(a,b){a.g=b}function Qb(a,b){a.b=b}function R(a,b){var c=a.a(b);return c instanceof K?+Nb(c):+c}function S(a,b){var c=a.a(b);return c instanceof K?Nb(c):""+c}function Rb(a,b){var c=a.a(b);return c instanceof K?!!c.l:!!c};function Sb(a,b,c){P.call(this,a.i);this.c=a;this.h=b;this.o=c;this.g=b.g||c.g;this.b=b.b||c.b;this.c==Tb&&(c.b||c.g||4==c.i||0==c.i||!b.f?b.b||b.g||4==b.i||0==b.i||!c.f||(this.f={name:c.f.name,s:b}):this.f={name:b.f.name,s:c})}q(Sb,P);
	function Ub(a,b,c,d,e){b=b.a(d);c=c.a(d);var f;if(b instanceof K&&c instanceof K){b=N(b);for(d=O(b);d;d=O(b))for(e=N(c),f=O(e);f;f=O(e))if(a(I(d),I(f)))return!0;return!1}if(b instanceof K||c instanceof K){b instanceof K?(e=b,d=c):(e=c,d=b);f=N(e);for(var g=typeof d,h=O(f);h;h=O(f)){switch(g){case "number":h=+I(h);break;case "boolean":h=!!I(h);break;case "string":h=I(h);break;default:throw Error("Illegal primitive type for comparison.");}if(e==b&&a(h,d)||e==c&&a(d,h))return!0}return!1}return e?"boolean"==
	typeof b||"boolean"==typeof c?a(!!b,!!c):"number"==typeof b||"number"==typeof c?a(+b,+c):a(b,c):a(+b,+c)}Sb.prototype.a=function(a){return this.c.m(this.h,this.o,a)};Sb.prototype.toString=function(){var a="Binary Expression: "+this.c,a=a+B(this.h);return a+=B(this.o)};function Vb(a,b,c,d){this.a=a;this.A=b;this.i=c;this.m=d}Vb.prototype.toString=function(){return this.a};var Wb={};
	function T(a,b,c,d){if(Wb.hasOwnProperty(a))throw Error("Binary operator already created: "+a);a=new Vb(a,b,c,d);return Wb[a.toString()]=a}T("div",6,1,function(a,b,c){return R(a,c)/R(b,c)});T("mod",6,1,function(a,b,c){return R(a,c)%R(b,c)});T("*",6,1,function(a,b,c){return R(a,c)*R(b,c)});T("+",5,1,function(a,b,c){return R(a,c)+R(b,c)});T("-",5,1,function(a,b,c){return R(a,c)-R(b,c)});T("<",4,2,function(a,b,c){return Ub(function(a,b){return a<b},a,b,c)});
	T(">",4,2,function(a,b,c){return Ub(function(a,b){return a>b},a,b,c)});T("<=",4,2,function(a,b,c){return Ub(function(a,b){return a<=b},a,b,c)});T(">=",4,2,function(a,b,c){return Ub(function(a,b){return a>=b},a,b,c)});var Tb=T("=",3,2,function(a,b,c){return Ub(function(a,b){return a==b},a,b,c,!0)});T("!=",3,2,function(a,b,c){return Ub(function(a,b){return a!=b},a,b,c,!0)});T("and",2,2,function(a,b,c){return Rb(a,c)&&Rb(b,c)});T("or",1,2,function(a,b,c){return Rb(a,c)||Rb(b,c)});function Xb(a,b){if(b.a.length&&4!=a.i)throw Error("Primary expression must evaluate to nodeset if filter has predicate(s).");P.call(this,a.i);this.c=a;this.h=b;this.g=a.g;this.b=a.b}q(Xb,P);Xb.prototype.a=function(a){a=this.c.a(a);return Yb(this.h,a)};Xb.prototype.toString=function(){var a;a="Filter:"+B(this.c);return a+=B(this.h)};function Zb(a,b){if(b.length<a.B)throw Error("Function "+a.j+" expects at least"+a.B+" arguments, "+b.length+" given");if(null!==a.v&&b.length>a.v)throw Error("Function "+a.j+" expects at most "+a.v+" arguments, "+b.length+" given");a.C&&C(b,function(b,d){if(4!=b.i)throw Error("Argument "+d+" to function "+a.j+" is not of type Nodeset: "+b);});P.call(this,a.i);this.h=a;this.c=b;Pb(this,a.g||Ha(b,function(a){return a.g}));Qb(this,a.F&&!b.length||a.D&&!!b.length||Ha(b,function(a){return a.b}))}
	q(Zb,P);Zb.prototype.a=function(a){return this.h.m.apply(null,Ka(a,this.c))};Zb.prototype.toString=function(){var a="Function: "+this.h;if(this.c.length)var b=Ga(this.c,function(a,b){return a+B(b)},"Arguments:"),a=a+B(b);return a};function $b(a,b,c,d,e,f,g,h,p){this.j=a;this.i=b;this.g=c;this.F=d;this.D=e;this.m=f;this.B=g;this.v=l(h)?h:g;this.C=!!p}$b.prototype.toString=function(){return this.j};var ac={};
	function U(a,b,c,d,e,f,g,h){if(ac.hasOwnProperty(a))throw Error("Function already created: "+a+".");ac[a]=new $b(a,b,c,d,!1,e,f,g,h)}U("boolean",2,!1,!1,function(a,b){return Rb(b,a)},1);U("ceiling",1,!1,!1,function(a,b){return Math.ceil(R(b,a))},1);U("concat",3,!1,!1,function(a,b){return Ga(La(arguments,1),function(b,d){return b+S(d,a)},"")},2,null);U("contains",2,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);return-1!=b.indexOf(a)},2);U("count",1,!1,!1,function(a,b){return b.a(a).l},1,1,!0);
	U("false",2,!1,!1,function(){return!1},0);U("floor",1,!1,!1,function(a,b){return Math.floor(R(b,a))},1);U("id",4,!1,!1,function(a,b){function c(a){if(F){var b=e.all[a];if(b){if(b.nodeType&&a==b.id)return b;if(b.length)return Ja(b,function(b){return a==b.id})}return null}return e.getElementById(a)}var d=a.a,e=9==d.nodeType?d:d.ownerDocument,d=S(b,a).split(/\s+/),f=[];C(d,function(a){a=c(a);!a||0<=Ea(f,a)||f.push(a)});f.sort(nb);var g=new K;C(f,function(a){L(g,a)});return g},1);
	U("lang",2,!1,!1,function(){return!1},1);U("last",1,!0,!1,function(a){if(1!=arguments.length)throw Error("Function last expects ()");return a.f},0);U("local-name",3,!1,!0,function(a,b){var c=b?Mb(b.a(a)):a.a;return c?c.localName||c.nodeName.toLowerCase():""},0,1,!0);U("name",3,!1,!0,function(a,b){var c=b?Mb(b.a(a)):a.a;return c?c.nodeName.toLowerCase():""},0,1,!0);U("namespace-uri",3,!0,!1,function(){return""},0,1,!0);
	U("normalize-space",3,!1,!0,function(a,b){return(b?S(b,a):I(a.a)).replace(/[\s\xa0]+/g," ").replace(/^\s+|\s+$/g,"")},0,1);U("not",2,!1,!1,function(a,b){return!Rb(b,a)},1);U("number",1,!1,!0,function(a,b){return b?R(b,a):+I(a.a)},0,1);U("position",1,!0,!1,function(a){return a.b},0);U("round",1,!1,!1,function(a,b){return Math.round(R(b,a))},1);U("starts-with",2,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);return!b.lastIndexOf(a,0)},2);U("string",3,!1,!0,function(a,b){return b?S(b,a):I(a.a)},0,1);
	U("string-length",1,!1,!0,function(a,b){return(b?S(b,a):I(a.a)).length},0,1);U("substring",3,!1,!1,function(a,b,c,d){c=R(c,a);if(isNaN(c)||Infinity==c||-Infinity==c)return"";d=d?R(d,a):Infinity;if(isNaN(d)||-Infinity===d)return"";c=Math.round(c)-1;var e=Math.max(c,0);a=S(b,a);return Infinity==d?a.substring(e):a.substring(e,c+Math.round(d))},2,3);U("substring-after",3,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);c=b.indexOf(a);return-1==c?"":b.substring(c+a.length)},2);
	U("substring-before",3,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);a=b.indexOf(a);return-1==a?"":b.substring(0,a)},2);U("sum",1,!1,!1,function(a,b){for(var c=N(b.a(a)),d=0,e=O(c);e;e=O(c))d+=+I(e);return d},1,1,!0);U("translate",3,!1,!1,function(a,b,c,d){b=S(b,a);c=S(c,a);var e=S(d,a);a={};for(d=0;d<c.length;d++){var f=c.charAt(d);f in a||(a[f]=e.charAt(d))}c="";for(d=0;d<b.length;d++)f=b.charAt(d),c+=f in a?a[f]:f;return c},3);U("true",2,!1,!1,function(){return!0},0);function bc(a){P.call(this,3);this.c=a.substring(1,a.length-1)}q(bc,P);bc.prototype.a=function(){return this.c};bc.prototype.toString=function(){return"Literal: "+this.c};function cc(a){P.call(this,1);this.c=a}q(cc,P);cc.prototype.a=function(){return this.c};cc.prototype.toString=function(){return"Number: "+this.c};function dc(a,b){P.call(this,a.i);this.h=a;this.c=b;this.g=a.g;this.b=a.b;if(1==this.c.length){var c=this.c[0];c.u||c.c!=ec||(c=c.o,"*"!=c.f()&&(this.f={name:c.f(),s:null}))}}q(dc,P);function fc(){P.call(this,4)}q(fc,P);fc.prototype.a=function(a){var b=new K;a=a.a;9==a.nodeType?L(b,a):L(b,a.ownerDocument);return b};fc.prototype.toString=function(){return"Root Helper Expression"};function gc(){P.call(this,4)}q(gc,P);gc.prototype.a=function(a){var b=new K;L(b,a.a);return b};gc.prototype.toString=function(){return"Context Helper Expression"};
	function hc(a){return"/"==a||"//"==a}dc.prototype.a=function(a){var b=this.h.a(a);if(!(b instanceof K))throw Error("Filter expression must evaluate to nodeset.");a=this.c;for(var c=0,d=a.length;c<d&&b.l;c++){var e=a[c],f=N(b,e.c.a),g;if(e.g||e.c!=ic)if(e.g||e.c!=jc)for(g=O(f),b=e.a(new ra(g));g=O(f);)g=e.a(new ra(g)),b=Lb(b,g);else g=O(f),b=e.a(new ra(g));else{for(g=O(f);(b=O(f))&&(!g.contains||g.contains(b))&&b.compareDocumentPosition(g)&8;g=b);b=e.a(new ra(g))}}return b};
	dc.prototype.toString=function(){var a;a="Path Expression:"+B(this.h);if(this.c.length){var b=Ga(this.c,function(a,b){return a+B(b)},"Steps:");a+=B(b)}return a};function kc(a,b){this.a=a;this.b=!!b}
	function Yb(a,b,c){for(c=c||0;c<a.a.length;c++)for(var d=a.a[c],e=N(b),f=b.l,g,h=0;g=O(e);h++){var p=a.b?f-h:h+1;g=d.a(new ra(g,p,f));if("number"==typeof g)p=p==g;else if("string"==typeof g||"boolean"==typeof g)p=!!g;else if(g instanceof K)p=0<g.l;else throw Error("Predicate.evaluate returned an unexpected type.");if(!p){p=e;g=p.f;var w=p.a;if(!w)throw Error("Next must be called at least once before remove.");var m=w.b,w=w.a;m?m.a=w:g.a=w;w?w.b=m:g.b=m;g.l--;p.a=null}}return b}
	kc.prototype.toString=function(){return Ga(this.a,function(a,b){return a+B(b)},"Predicates:")};function lc(a){P.call(this,1);this.c=a;this.g=a.g;this.b=a.b}q(lc,P);lc.prototype.a=function(a){return-R(this.c,a)};lc.prototype.toString=function(){return"Unary Expression: -"+B(this.c)};function mc(a){P.call(this,4);this.c=a;Pb(this,Ha(this.c,function(a){return a.g}));Qb(this,Ha(this.c,function(a){return a.b}))}q(mc,P);mc.prototype.a=function(a){var b=new K;C(this.c,function(c){c=c.a(a);if(!(c instanceof K))throw Error("Path expression must evaluate to NodeSet.");b=Lb(b,c)});return b};mc.prototype.toString=function(){return Ga(this.c,function(a,b){return a+B(b)},"Union Expression:")};function nc(a,b,c,d){P.call(this,4);this.c=a;this.o=b;this.h=c||new kc([]);this.u=!!d;b=this.h;b=0<b.a.length?b.a[0].f:null;a.b&&b&&(a=b.name,a=F?a.toLowerCase():a,this.f={name:a,s:b.s});a:{a=this.h;for(b=0;b<a.a.length;b++)if(c=a.a[b],c.g||1==c.i||0==c.i){a=!0;break a}a=!1}this.g=a}q(nc,P);
	nc.prototype.a=function(a){var b=a.a,c=this.f,d=null,e=null,f=0;c&&(d=c.name,e=c.s?S(c.s,a):null,f=1);if(this.u)if(this.g||this.c!=oc)if(b=N((new nc(pc,new A("node"))).a(a)),c=O(b))for(a=this.m(c,d,e,f);c=O(b);)a=Lb(a,this.m(c,d,e,f));else a=new K;else a=Db(this.o,b,d,e),a=Yb(this.h,a,f);else a=this.m(a.a,d,e,f);return a};nc.prototype.m=function(a,b,c,d){a=this.c.f(this.o,a,b,c);return a=Yb(this.h,a,d)};
	nc.prototype.toString=function(){var a;a="Step:"+B("Operator: "+(this.u?"//":"/"));this.c.j&&(a+=B("Axis: "+this.c));a+=B(this.o);if(this.h.a.length){var b=Ga(this.h.a,function(a,b){return a+B(b)},"Predicates:");a+=B(b)}return a};function qc(a,b,c,d){this.j=a;this.f=b;this.a=c;this.b=d}qc.prototype.toString=function(){return this.j};var rc={};function V(a,b,c,d){if(rc.hasOwnProperty(a))throw Error("Axis already created: "+a);b=new qc(a,b,c,!!d);return rc[a]=b}
	V("ancestor",function(a,b){for(var c=new K,d=b;d=d.parentNode;)a.a(d)&&c.unshift(d);return c},!0);V("ancestor-or-self",function(a,b){var c=new K,d=b;do a.a(d)&&c.unshift(d);while(d=d.parentNode);return c},!0);
	var ec=V("attribute",function(a,b){var c=new K,d=a.f();if("style"==d&&F&&b.style)return L(c,new ub(b.style,b,"style",b.style.cssText)),c;var e=b.attributes;if(e)if(a instanceof A&&null===a.b||"*"==d)for(var d=0,f;f=e[d];d++)F?f.nodeValue&&L(c,vb(b,f)):L(c,f);else(f=e.getNamedItem(d))&&(F?f.nodeValue&&L(c,vb(b,f)):L(c,f));return c},!1),oc=V("child",function(a,b,c,d,e){return(F?Ib:Jb).call(null,a,b,n(c)?c:null,n(d)?d:null,e||new K)},!1,!0);V("descendant",Db,!1,!0);
	var pc=V("descendant-or-self",function(a,b,c,d){var e=new K;J(b,c,d)&&a.a(b)&&L(e,b);return Db(a,b,c,d,e)},!1,!0),ic=V("following",function(a,b,c,d){var e=new K;do for(var f=b;f=f.nextSibling;)J(f,c,d)&&a.a(f)&&L(e,f),e=Db(a,f,c,d,e);while(b=b.parentNode);return e},!1,!0);V("following-sibling",function(a,b){for(var c=new K,d=b;d=d.nextSibling;)a.a(d)&&L(c,d);return c},!1);V("namespace",function(){return new K},!1);
	var sc=V("parent",function(a,b){var c=new K;if(9==b.nodeType)return c;if(2==b.nodeType)return L(c,b.ownerElement),c;var d=b.parentNode;a.a(d)&&L(c,d);return c},!1),jc=V("preceding",function(a,b,c,d){var e=new K,f=[];do f.unshift(b);while(b=b.parentNode);for(var g=1,h=f.length;g<h;g++){var p=[];for(b=f[g];b=b.previousSibling;)p.unshift(b);for(var w=0,m=p.length;w<m;w++)b=p[w],J(b,c,d)&&a.a(b)&&L(e,b),e=Db(a,b,c,d,e)}return e},!0,!0);
	V("preceding-sibling",function(a,b){for(var c=new K,d=b;d=d.previousSibling;)a.a(d)&&c.unshift(d);return c},!0);var tc=V("self",function(a,b){var c=new K;a.a(b)&&L(c,b);return c},!1);function uc(a,b){this.a=a;this.b=b}function vc(a){for(var b,c=[];;){W(a,"Missing right hand side of binary expression.");b=wc(a);var d=v(a.a);if(!d)break;var e=(d=Wb[d]||null)&&d.A;if(!e){a.a.a--;break}for(;c.length&&e<=c[c.length-1].A;)b=new Sb(c.pop(),c.pop(),b);c.push(b,d)}for(;c.length;)b=new Sb(c.pop(),c.pop(),b);return b}function W(a,b){if(wa(a.a))throw Error(b);}function xc(a,b){var c=v(a.a);if(c!=b)throw Error("Bad token, expected: "+b+" got: "+c);}
	function yc(a){a=v(a.a);if(")"!=a)throw Error("Bad token: "+a);}function zc(a){a=v(a.a);if(2>a.length)throw Error("Unclosed literal string");return new bc(a)}
	function Ac(a){var b,c=[],d;if(hc(t(a.a))){b=v(a.a);d=t(a.a);if("/"==b&&(wa(a.a)||"."!=d&&".."!=d&&"@"!=d&&"*"!=d&&!/(?![0-9])[\w]/.test(d)))return new fc;d=new fc;W(a,"Missing next location step.");b=Bc(a,b);c.push(b)}else{a:{b=t(a.a);d=b.charAt(0);switch(d){case "$":throw Error("Variable reference not allowed in HTML XPath");case "(":v(a.a);b=vc(a);W(a,'unclosed "("');xc(a,")");break;case '"':case "'":b=zc(a);break;default:if(isNaN(+b))if(!za(b)&&/(?![0-9])[\w]/.test(d)&&"("==t(a.a,1)){b=v(a.a);
	b=ac[b]||null;v(a.a);for(d=[];")"!=t(a.a);){W(a,"Missing function argument list.");d.push(vc(a));if(","!=t(a.a))break;v(a.a)}W(a,"Unclosed function argument list.");yc(a);b=new Zb(b,d)}else{b=null;break a}else b=new cc(+v(a.a))}"["==t(a.a)&&(d=new kc(Cc(a)),b=new Xb(b,d))}if(b)if(hc(t(a.a)))d=b;else return b;else b=Bc(a,"/"),d=new gc,c.push(b)}for(;hc(t(a.a));)b=v(a.a),W(a,"Missing next location step."),b=Bc(a,b),c.push(b);return new dc(d,c)}
	function Bc(a,b){var c,d,e;if("/"!=b&&"//"!=b)throw Error('Step op should be "/" or "//"');if("."==t(a.a))return d=new nc(tc,new A("node")),v(a.a),d;if(".."==t(a.a))return d=new nc(sc,new A("node")),v(a.a),d;var f;if("@"==t(a.a))f=ec,v(a.a),W(a,"Missing attribute name");else if("::"==t(a.a,1)){if(!/(?![0-9])[\w]/.test(t(a.a).charAt(0)))throw Error("Bad token: "+v(a.a));c=v(a.a);f=rc[c]||null;if(!f)throw Error("No axis with name: "+c);v(a.a);W(a,"Missing node name")}else f=oc;c=t(a.a);if(/(?![0-9])[\w\*]/.test(c.charAt(0)))if("("==
	t(a.a,1)){if(!za(c))throw Error("Invalid node type: "+c);c=v(a.a);if(!za(c))throw Error("Invalid type name: "+c);xc(a,"(");W(a,"Bad nodetype");e=t(a.a).charAt(0);var g=null;if('"'==e||"'"==e)g=zc(a);W(a,"Bad nodetype");yc(a);c=new A(c,g)}else if(c=v(a.a),e=c.indexOf(":"),-1==e)c=new Aa(c);else{var g=c.substring(0,e),h;if("*"==g)h="*";else if(h=a.b(g),!h)throw Error("Namespace prefix not declared: "+g);c=c.substr(e+1);c=new Aa(c,h)}else throw Error("Bad token: "+v(a.a));e=new kc(Cc(a),f.a);return d||
	new nc(f,c,e,"//"==b)}function Cc(a){for(var b=[];"["==t(a.a);){v(a.a);W(a,"Missing predicate expression.");var c=vc(a);b.push(c);W(a,"Unclosed predicate expression.");xc(a,"]")}return b}function wc(a){if("-"==t(a.a))return v(a.a),new lc(wc(a));var b=Ac(a);if("|"!=t(a.a))a=b;else{for(b=[b];"|"==v(a.a);)W(a,"Missing next union location path."),b.push(Ac(a));a.a.a--;a=new mc(b)}return a};function Dc(a,b){if(!a.length)throw Error("Empty XPath expression.");var c=ta(a);if(wa(c))throw Error("Invalid XPath expression.");b?"function"==ea(b)||(b=ha(b.lookupNamespaceURI,b)):b=function(){return null};var d=vc(new uc(c,b));if(!wa(c))throw Error("Bad token: "+v(c));this.evaluate=function(a,b){var c=d.a(new ra(a));return new X(c,b)}}
	function X(a,b){if(!b)if(a instanceof K)b=4;else if("string"==typeof a)b=2;else if("number"==typeof a)b=1;else if("boolean"==typeof a)b=3;else throw Error("Unexpected evaluation result.");if(2!=b&&1!=b&&3!=b&&!(a instanceof K))throw Error("value could not be converted to the specified type");this.resultType=b;var c;switch(b){case 2:this.stringValue=a instanceof K?Nb(a):""+a;break;case 1:this.numberValue=a instanceof K?+Nb(a):+a;break;case 3:this.booleanValue=a instanceof K?0<a.l:!!a;break;case 4:case 5:case 6:case 7:var d=
	N(a);c=[];for(var e=O(d);e;e=O(d))c.push(e instanceof ub?e.a:e);this.snapshotLength=a.l;this.invalidIteratorState=!1;break;case 8:case 9:d=Mb(a);this.singleNodeValue=d instanceof ub?d.a:d;break;default:throw Error("Unknown XPathResult type.");}var f=0;this.iterateNext=function(){if(4!=b&&5!=b)throw Error("iterateNext called with wrong result type");return f>=c.length?null:c[f++]};this.snapshotItem=function(a){if(6!=b&&7!=b)throw Error("snapshotItem called with wrong result type");return a>=c.length||
	0>a?null:c[a]}}X.ANY_TYPE=0;X.NUMBER_TYPE=1;X.STRING_TYPE=2;X.BOOLEAN_TYPE=3;X.UNORDERED_NODE_ITERATOR_TYPE=4;X.ORDERED_NODE_ITERATOR_TYPE=5;X.UNORDERED_NODE_SNAPSHOT_TYPE=6;X.ORDERED_NODE_SNAPSHOT_TYPE=7;X.ANY_UNORDERED_NODE_TYPE=8;X.FIRST_ORDERED_NODE_TYPE=9;function Ec(a){this.lookupNamespaceURI=Ba(a)}
	function Fc(a,b){var c=a||k,d=c.Document&&c.Document.prototype||c.document;if(!d.evaluate||b)c.XPathResult=X,d.evaluate=function(a,b,c,d){return(new Dc(a,c)).evaluate(b,d)},d.createExpression=function(a,b){return new Dc(a,b)},d.createNSResolver=function(a){return new Ec(a)}}da("wgxpath.install",Fc);var Gc=function(){var a={I:"http://www.w3.org/2000/svg"};return function(b){return a[b]||null}}();
	function Hc(a,b){var c=G(a);if(!c.documentElement)return null;(E||ib)&&Fc(c?c.parentWindow||c.defaultView:window);try{var d=c.createNSResolver?c.createNSResolver(c.documentElement):Gc;if(E&&!bb(7))return c.evaluate.call(c,b,a,d,9,null);if(!E||9<=Number(db)){for(var e={},f=c.getElementsByTagName("*"),g=0;g<f.length;++g){var h=f[g],p=h.namespaceURI;if(p&&!e[p]){var w=h.lookupPrefix(p);if(!w)var m=p.match(".*/(\\w+)/?$"),w=m?m[1]:"xhtml";e[p]=w}}var u={},y;for(y in e)u[e[y]]=y;d=function(a){return u[a]||
	null}}try{return c.evaluate(b,a,d,9,null)}catch(Q){if("TypeError"===Q.name)return d=c.createNSResolver?c.createNSResolver(c.documentElement):Gc,c.evaluate(b,a,d,9,null);throw Q;}}catch(Q){if(!Wa||"NS_ERROR_ILLEGAL_VALUE"!=Q.name)throw new ja(32,"Unable to locate an element with the xpath expression "+b+" because of the following error:\n"+Q);}}
	function Ic(a,b){var c=function(){var c=Hc(b,a);return c?c.singleNodeValue||null:b.selectSingleNode?(c=G(b),c.setProperty&&c.setProperty("SelectionLanguage","XPath"),b.selectSingleNode(a)):null}();if(null!==c&&(!c||1!=c.nodeType))throw new ja(32,'The result of the xpath expression "'+a+'" is: '+c+". It should be an element.");return c};var Jc="function"===typeof ShadowRoot;function Kc(a){for(a=a.parentNode;a&&1!=a.nodeType&&9!=a.nodeType&&11!=a.nodeType;)a=a.parentNode;return M(a)?a:null}
	function Y(a,b){var c=qa(b);if("float"==c||"cssFloat"==c||"styleFloat"==c)c=Cb?"styleFloat":"cssFloat";var d;a:{d=c;var e=G(a);if(e.defaultView&&e.defaultView.getComputedStyle&&(e=e.defaultView.getComputedStyle(a,null))){d=e[d]||e.getPropertyValue(d)||"";break a}d=""}d=d||Lc(a,c);if(null===d)d=null;else if(0<=Ea(Na,c)){b:{var f=d.match(Qa);if(f){var c=Number(f[1]),e=Number(f[2]),g=Number(f[3]),f=Number(f[4]);if(0<=c&&255>=c&&0<=e&&255>=e&&0<=g&&255>=g&&0<=f&&1>=f){c=[c,e,g,f];break b}}c=null}if(!c)b:{if(g=
	d.match(Ra))if(c=Number(g[1]),e=Number(g[2]),g=Number(g[3]),0<=c&&255>=c&&0<=e&&255>=e&&0<=g&&255>=g){c=[c,e,g,1];break b}c=null}if(!c)b:{c=d.toLowerCase();e=la[c.toLowerCase()];if(!e&&(e="#"==c.charAt(0)?c:"#"+c,4==e.length&&(e=e.replace(Oa,"#$1$1$2$2$3$3")),!Pa.test(e))){c=null;break b}c=[parseInt(e.substr(1,2),16),parseInt(e.substr(3,2),16),parseInt(e.substr(5,2),16),1]}d=c?"rgba("+c.join(", ")+")":d}return d}
	function Lc(a,b){var c=a.currentStyle||a.style,d=c[b];!l(d)&&"function"==ea(c.getPropertyValue)&&(d=c.getPropertyValue(b));return"inherit"!=d?l(d)?d:null:(c=Kc(a))?Lc(c,b):null}
	function Mc(a,b,c){function d(a){var b=Nc(a);return 0<b.height&&0<b.width?!0:M(a,"PATH")&&(0<b.height||0<b.width)?(a=Y(a,"stroke-width"),!!a&&0<parseInt(a,10)):"hidden"!=Y(a,"overflow")&&Ha(a.childNodes,function(a){return 3==a.nodeType||M(a)&&d(a)})}function e(a){return Oc(a)==Z&&Ia(a.childNodes,function(a){return!M(a)||e(a)||!d(a)})}if(!M(a))throw Error("Argument to isShown must be of type Element");if(M(a,"BODY"))return!0;if(M(a,"OPTION")||M(a,"OPTGROUP"))return a=qb(a,function(a){return M(a,"SELECT")}),
	!!a&&Mc(a,!0,c);var f=Pc(a);if(f)return!!f.w&&0<f.rect.width&&0<f.rect.height&&Mc(f.w,b,c);if(M(a,"INPUT")&&"hidden"==a.type.toLowerCase()||M(a,"NOSCRIPT"))return!1;f=Y(a,"visibility");return"collapse"!=f&&"hidden"!=f&&c(a)&&(b||Qc(a))&&d(a)?!e(a):!1}var Z="hidden";
	function Oc(a){function b(a){function b(a){return a==g?!0:!Y(a,"display").lastIndexOf("inline",0)||"absolute"==c&&"static"==Y(a,"position")?!1:!0}var c=Y(a,"position");if("fixed"==c)return w=!0,a==g?null:g;for(a=Kc(a);a&&!b(a);)a=Kc(a);return a}function c(a){var b=a;if("visible"==p)if(a==g&&h)b=h;else if(a==h)return{x:"visible",y:"visible"};b={x:Y(b,"overflow-x"),y:Y(b,"overflow-y")};a==g&&(b.x="visible"==b.x?"auto":b.x,b.y="visible"==b.y?"auto":b.y);return b}function d(a){if(a==g){var b=(new rb(f)).a;
	a=b.scrollingElement?b.scrollingElement:Xa||"CSS1Compat"!=b.compatMode?b.body||b.documentElement:b.documentElement;b=b.parentWindow||b.defaultView;a=E&&bb("10")&&b.pageYOffset!=a.scrollTop?new D(a.scrollLeft,a.scrollTop):new D(b.pageXOffset||a.scrollLeft,b.pageYOffset||a.scrollTop)}else a=new D(a.scrollLeft,a.scrollTop);return a}var e=Rc(a),f=G(a),g=f.documentElement,h=f.body,p=Y(g,"overflow"),w;for(a=b(a);a;a=b(a)){var m=c(a);if("visible"!=m.x||"visible"!=m.y){var u=Nc(a);if(!u.width||!u.height)return Z;
	var y=e.right<u.left,Q=e.bottom<u.top;if(y&&"hidden"==m.x||Q&&"hidden"==m.y)return Z;if(y&&"visible"!=m.x||Q&&"visible"!=m.y){y=d(a);Q=e.bottom<u.top-y.y;if(e.right<u.left-y.x&&"visible"!=m.x||Q&&"visible"!=m.x)return Z;e=Oc(a);return e==Z?Z:"scroll"}y=e.left>=u.left+u.width;u=e.top>=u.top+u.height;if(y&&"hidden"==m.x||u&&"hidden"==m.y)return Z;if(y&&"visible"!=m.x||u&&"visible"!=m.y){if(w&&(m=d(a),e.left>=g.scrollWidth-m.x||e.right>=g.scrollHeight-m.y))return Z;e=Oc(a);return e==Z?Z:"scroll"}}}return"none"}
	function Nc(a){var b=Pc(a);if(b)return b.rect;if(M(a,"HTML"))return a=G(a),a=((a?a.parentWindow||a.defaultView:window)||window).document,a="CSS1Compat"==a.compatMode?a.documentElement:a.body,a=new ma(a.clientWidth,a.clientHeight),new H(0,0,a.width,a.height);var c;try{c=a.getBoundingClientRect()}catch(d){return new H(0,0,0,0)}b=new H(c.left,c.top,c.right-c.left,c.bottom-c.top);E&&a.ownerDocument.body&&(a=G(a),b.left-=a.documentElement.clientLeft+a.body.clientLeft,b.top-=a.documentElement.clientTop+
	a.body.clientTop);return b}function Pc(a){var b=M(a,"MAP");if(!b&&!M(a,"AREA"))return null;var c=b?a:M(a.parentNode,"MAP")?a.parentNode:null,d=null,e=null;c&&c.name&&(d=Ic('/descendant::*[@usemap = "#'+c.name+'"]',G(c)))&&(e=Nc(d),b||"default"==a.shape.toLowerCase()||(a=Sc(a),b=Math.min(Math.max(a.left,0),e.width),c=Math.min(Math.max(a.top,0),e.height),e=new H(b+e.left,c+e.top,Math.min(a.width,e.width-b),Math.min(a.height,e.height-c))));return{w:d,rect:e||new H(0,0,0,0)}}
	function Sc(a){var b=a.shape.toLowerCase();a=a.coords.split(",");if("rect"==b&&4==a.length){var b=a[0],c=a[1];return new H(b,c,a[2]-b,a[3]-c)}if("circle"==b&&3==a.length)return b=a[2],new H(a[0]-b,a[1]-b,2*b,2*b);if("poly"==b&&2<a.length){for(var b=a[0],c=a[1],d=b,e=c,f=2;f+1<a.length;f+=2)b=Math.min(b,a[f]),d=Math.max(d,a[f]),c=Math.min(c,a[f+1]),e=Math.max(e,a[f+1]);return new H(b,c,d-b,e-c)}return new H(0,0,0,0)}function Rc(a){a=Nc(a);return new eb(a.top,a.left+a.width,a.top+a.height,a.left)}
	function Qc(a){if(Cb){if("relative"==Y(a,"position"))return 1;a=Y(a,"filter");return(a=a.match(/^alpha\(opacity=(\d*)\)/)||a.match(/^progid:DXImageTransform.Microsoft.Alpha\(Opacity=(\d*)\)/))?Number(a[1])/100:1}return Tc(a)}function Tc(a){var b=1,c=Y(a,"opacity");c&&(b=Number(c));(a=Kc(a))&&(b*=Tc(a));return b};da("_",function(a,b){var c;c=Jc?function(b){if("none"==Y(b,"display"))return!1;var e;do{e=b.parentNode;if(b.getDestinationInsertionPoints){var f=b.getDestinationInsertionPoints();0<f.length&&(e=f[f.length-1])}if(e instanceof ShadowRoot){if(e.host.shadowRoot!=e)return!1;e=e.host}else if(9==e.nodeType||11==e.nodeType)e=null}while(a&&1!=a.nodeType);return!e||c(e)}:function(a){if("none"==Y(a,"display"))return!1;a=Kc(a);return!a||c(a)};return Mc(a,!!b,c)});; return this._.apply(null,arguments);}.apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview The main user facing module. Exports WebDriver's primary
	 * public API and provides convenience assessors to certain sub-modules.
	 */

	'use strict';

	const chrome = __webpack_require__(108);
	const edge = __webpack_require__(121);
	const firefox = __webpack_require__(122);
	const _http = __webpack_require__(112);
	const ie = __webpack_require__(282);
	const actions = __webpack_require__(102);
	const by = __webpack_require__(104);
	const capabilities = __webpack_require__(99);
	const command = __webpack_require__(97);
	const error = __webpack_require__(38);
	const events = __webpack_require__(39);
	const input = __webpack_require__(103);
	const logging = __webpack_require__(40);
	const promise = __webpack_require__(36);
	const session = __webpack_require__(98);
	const until = __webpack_require__(283);
	const webdriver = __webpack_require__(101);
	const opera = __webpack_require__(284);
	const phantomjs = __webpack_require__(285);
	const remote = __webpack_require__(115);
	const safari = __webpack_require__(286);

	const Browser = capabilities.Browser;
	const Capabilities = capabilities.Capabilities;
	const Capability = capabilities.Capability;
	const Session = session.Session;
	const WebDriver = webdriver.WebDriver;



	var seleniumServer;

	/**
	 * Starts an instance of the Selenium server if not yet running.
	 * @param {string} jar Path to the server jar to use.
	 * @return {!Promise<string>} A promise for the server's
	 *     address once started.
	 */
	function startSeleniumServer(jar) {
	  if (!seleniumServer) {
	    seleniumServer = new remote.SeleniumServer(jar);
	  }
	  return seleniumServer.start();
	}


	/**
	 * {@linkplain webdriver.WebDriver#setFileDetector WebDriver's setFileDetector}
	 * method uses a non-standard command to transfer files from the local client
	 * to the remote end hosting the browser. Many of the WebDriver sub-types, like
	 * the {@link chrome.Driver} and {@link firefox.Driver}, do not support this
	 * command. Thus, these classes override the `setFileDetector` to no-op.
	 *
	 * This function uses a mixin to re-enable `setFileDetector` by calling the
	 * original method on the WebDriver prototype directly. This is used only when
	 * the builder creates a Chrome or Firefox instance that communicates with a
	 * remote end (and thus, support for remote file detectors is unknown).
	 *
	 * @param {function(new: webdriver.WebDriver, ...?)} ctor
	 * @return {function(new: webdriver.WebDriver, ...?)}
	 */
	function ensureFileDetectorsAreEnabled(ctor) {
	  const mixin = class extends ctor {
	    /** @param {input.FileDetector} detector */
	    setFileDetector(detector) {
	      webdriver.WebDriver.prototype.setFileDetector.call(this, detector);
	    }
	  };
	  return mixin;
	}


	/**
	 * A thenable wrapper around a {@linkplain webdriver.IWebDriver IWebDriver}
	 * instance that allows commands to be issued directly instead of having to
	 * repeatedly call `then`:
	 *
	 *     let driver = new Builder().build();
	 *     driver.then(d => d.get(url));  // You can do this...
	 *     driver.get(url);               // ...or this
	 *
	 * If the driver instance fails to resolve (e.g. the session cannot be created),
	 * every issued command will fail.
	 *
	 * @extends {webdriver.IWebDriver}
	 * @extends {promise.CancellableThenable<!webdriver.IWebDriver>}
	 * @interface
	 */
	class ThenableWebDriver {
	  /** @param {...?} args */
	  static createSession(...args) {}
	}


	/**
	 * @const {!Map<function(new: WebDriver, !IThenable<!Session>, ...?),
	 *              function(new: ThenableWebDriver, !IThenable<!Session>, ...?)>}
	 */
	const THENABLE_DRIVERS = new Map;


	/**
	 * @param {function(new: WebDriver, !IThenable<!Session>, ...?)} ctor
	 * @param {...?} args
	 * @return {!ThenableWebDriver}
	 */
	function createDriver(ctor, ...args) {
	  let thenableWebDriverProxy = THENABLE_DRIVERS.get(ctor);
	  if (!thenableWebDriverProxy) {
	    /** @implements {ThenableWebDriver} */
	    thenableWebDriverProxy = class extends ctor {
	      /**
	       * @param {!IThenable<!Session>} session
	       * @param {...?} rest
	       */
	      constructor(session, ...rest) {
	        super(session, ...rest);

	        const pd = this.getSession().then(session => {
	          return new ctor(session, ...rest);
	        });

	        /**
	         * @param {(string|Error)=} opt_reason
	         * @override
	         */
	        this.cancel = function(opt_reason) {
	          if (promise.CancellableThenable.isImplementation(pd)) {
	            /** @type {!promise.CancellableThenable} */(pd).cancel(opt_reason);
	          }
	        };

	        /** @override */
	        this.then = pd.then.bind(pd);

	        /** @override */
	        this.catch = pd.then.bind(pd);
	      }
	    };
	    promise.CancellableThenable.addImplementation(thenableWebDriverProxy);
	    THENABLE_DRIVERS.set(ctor, thenableWebDriverProxy);
	  }
	  return thenableWebDriverProxy.createSession(...args);
	}


	/**
	 * Creates new {@link webdriver.WebDriver WebDriver} instances. The environment
	 * variables listed below may be used to override a builder's configuration,
	 * allowing quick runtime changes.
	 *
	 * - {@code SELENIUM_BROWSER}: defines the target browser in the form
	 *   {@code browser[:version][:platform]}.
	 *
	 * - {@code SELENIUM_REMOTE_URL}: defines the remote URL for all builder
	 *   instances. This environment variable should be set to a fully qualified
	 *   URL for a WebDriver server (e.g. http://localhost:4444/wd/hub). This
	 *   option always takes precedence over {@code SELENIUM_SERVER_JAR}.
	 *
	 * - {@code SELENIUM_SERVER_JAR}: defines the path to the
	 *   <a href="http://selenium-release.storage.googleapis.com/index.html">
	 *   standalone Selenium server</a> jar to use. The server will be started the
	 *   first time a WebDriver instance and be killed when the process exits.
	 *
	 * Suppose you had mytest.js that created WebDriver with
	 *
	 *     var driver = new webdriver.Builder()
	 *         .forBrowser('chrome')
	 *         .build();
	 *
	 * This test could be made to use Firefox on the local machine by running with
	 * `SELENIUM_BROWSER=firefox node mytest.js`. Rather than change the code to
	 * target Google Chrome on a remote machine, you can simply set the
	 * `SELENIUM_BROWSER` and `SELENIUM_REMOTE_URL` environment variables:
	 *
	 *     SELENIUM_BROWSER=chrome:36:LINUX \
	 *     SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \
	 *     node mytest.js
	 *
	 * You could also use a local copy of the standalone Selenium server:
	 *
	 *     SELENIUM_BROWSER=chrome:36:LINUX \
	 *     SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \
	 *     node mytest.js
	 */
	class Builder {
	  constructor() {
	    /** @private @const */
	    this.log_ = logging.getLogger('webdriver.Builder');

	    /** @private {promise.ControlFlow} */
	    this.flow_ = null;

	    /** @private {string} */
	    this.url_ = '';

	    /** @private {?string} */
	    this.proxy_ = null;

	    /** @private {!Capabilities} */
	    this.capabilities_ = new Capabilities();

	    /** @private {chrome.Options} */
	    this.chromeOptions_ = null;

	    /** @private {firefox.Options} */
	    this.firefoxOptions_ = null;

	    /** @private {opera.Options} */
	    this.operaOptions_ = null;

	    /** @private {ie.Options} */
	    this.ieOptions_ = null;

	    /** @private {safari.Options} */
	    this.safariOptions_ = null;

	    /** @private {edge.Options} */
	    this.edgeOptions_ = null;

	    /** @private {boolean} */
	    this.ignoreEnv_ = false;

	    /** @private {http.Agent} */
	    this.agent_ = null;
	  }

	  /**
	   * Configures this builder to ignore any environment variable overrides and to
	   * only use the configuration specified through this instance's API.
	   *
	   * @return {!Builder} A self reference.
	   */
	  disableEnvironmentOverrides() {
	    this.ignoreEnv_ = true;
	    return this;
	  }

	  /**
	   * Sets the URL of a remote WebDriver server to use. Once a remote URL has
	   * been specified, the builder direct all new clients to that server. If this
	   * method is never called, the Builder will attempt to create all clients
	   * locally.
	   *
	   * As an alternative to this method, you may also set the
	   * `SELENIUM_REMOTE_URL` environment variable.
	   *
	   * @param {string} url The URL of a remote server to use.
	   * @return {!Builder} A self reference.
	   */
	  usingServer(url) {
	    this.url_ = url;
	    return this;
	  }

	  /**
	   * @return {string} The URL of the WebDriver server this instance is
	   *     configured to use.
	   */
	  getServerUrl() {
	    return this.url_;
	  }

	  /**
	   * Sets the URL of the proxy to use for the WebDriver's HTTP connections.
	   * If this method is never called, the Builder will create a connection
	   * without a proxy.
	   *
	   * @param {string} proxy The URL of a proxy to use.
	   * @return {!Builder} A self reference.
	   */
	  usingWebDriverProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * @return {?string} The URL of the proxy server to use for the WebDriver's
	   *    HTTP connections, or `null` if not set.
	   */
	  getWebDriverProxy() {
	    return this.proxy_;
	  }

	  /**
	   * Sets the http agent to use for each request.
	   * If this method is not called, the Builder will use http.globalAgent by default.
	   *
	   * @param {http.Agent} agent The agent to use for each request.
	   * @return {!Builder} A self reference.
	   */
	  usingHttpAgent(agent) {
	    this.agent_ = agent;
	    return this;
	  }

	  /**
	   * @return {http.Agent} The http agent used for each request
	   */
	  getHttpAgent() {
	    return this.agent_;
	  }

	  /**
	   * Sets the desired capabilities when requesting a new session. This will
	   * overwrite any previously set capabilities.
	   * @param {!(Object|Capabilities)} capabilities The desired capabilities for
	   *     a new session.
	   * @return {!Builder} A self reference.
	   */
	  withCapabilities(capabilities) {
	    this.capabilities_ = new Capabilities(capabilities);
	    return this;
	  }

	  /**
	   * Returns the base set of capabilities this instance is currently configured
	   * to use.
	   * @return {!Capabilities} The current capabilities for this builder.
	   */
	  getCapabilities() {
	    return this.capabilities_;
	  }

	  /**
	   * Configures the target browser for clients created by this instance.
	   * Any calls to {@link #withCapabilities} after this function will
	   * overwrite these settings.
	   *
	   * You may also define the target browser using the {@code SELENIUM_BROWSER}
	   * environment variable. If set, this environment variable should be of the
	   * form `browser[:[version][:platform]]`.
	   *
	   * @param {(string|Browser)} name The name of the target browser;
	   *     common defaults are available on the {@link webdriver.Browser} enum.
	   * @param {string=} opt_version A desired version; may be omitted if any
	   *     version should be used.
	   * @param {string=} opt_platform The desired platform; may be omitted if any
	   *     version may be used.
	   * @return {!Builder} A self reference.
	   */
	  forBrowser(name, opt_version, opt_platform) {
	    this.capabilities_.set(Capability.BROWSER_NAME, name);
	    this.capabilities_.set(Capability.VERSION, opt_version || null);
	    this.capabilities_.set(Capability.PLATFORM, opt_platform || null);
	    return this;
	  }

	  /**
	   * Sets the proxy configuration for the target browser.
	   * Any calls to {@link #withCapabilities} after this function will
	   * overwrite these settings.
	   *
	   * @param {!capabilities.ProxyConfig} config The configuration to use.
	   * @return {!Builder} A self reference.
	   */
	  setProxy(config) {
	    this.capabilities_.setProxy(config);
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the created session. Preferences may be
	   * changed by repeated calls, or by calling {@link #withCapabilities}.
	   * @param {!(./lib/logging.Preferences|Object<string, string>)} prefs The
	   *     desired logging preferences.
	   * @return {!Builder} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.capabilities_.setLoggingPrefs(prefs);
	    return this;
	  }

	  /**
	   * Sets whether native events should be used.
	   * @param {boolean} enabled Whether to enable native events.
	   * @return {!Builder} A self reference.
	   */
	  setEnableNativeEvents(enabled) {
	    this.capabilities_.setEnableNativeEvents(enabled);
	    return this;
	  }

	  /**
	   * Sets how elements should be scrolled into view for interaction.
	   * @param {number} behavior The desired scroll behavior: either 0 to align
	   *     with the top of the viewport or 1 to align with the bottom.
	   * @return {!Builder} A self reference.
	   */
	  setScrollBehavior(behavior) {
	    this.capabilities_.setScrollBehavior(behavior);
	    return this;
	  }

	  /**
	   * Sets the default action to take with an unexpected alert before returning
	   * an error.
	   * @param {string} behavior The desired behavior; should be "accept",
	   *     "dismiss", or "ignore". Defaults to "dismiss".
	   * @return {!Builder} A self reference.
	   */
	  setAlertBehavior(behavior) {
	    this.capabilities_.setAlertBehavior(behavior);
	    return this;
	  }

	  /**
	   * Sets Chrome specific {@linkplain chrome.Options options} for drivers
	   * created by this builder. Any logging or proxy settings defined on the given
	   * options will take precedence over those set through
	   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.
	   *
	   * @param {!chrome.Options} options The ChromeDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setChromeOptions(options) {
	    this.chromeOptions_ = options;
	    return this;
	  }

	  /**
	   * Sets Firefox specific {@linkplain firefox.Options options} for drivers
	   * created by this builder. Any logging or proxy settings defined on the given
	   * options will take precedence over those set through
	   * {@link #setLoggingPrefs} and {@link #setProxy}, respectively.
	   *
	   * @param {!firefox.Options} options The FirefoxDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setFirefoxOptions(options) {
	    this.firefoxOptions_ = options;
	    return this;
	  }

	  /**
	   * @return {firefox.Options} the Firefox specific options currently configured
	   *     for this instance.
	   */
	  getFirefoxOptions() {
	    return this.firefoxOptions_;
	  }

	  /**
	   * Sets Opera specific {@linkplain opera.Options options} for drivers created
	   * by this builder. Any logging or proxy settings defined on the given options
	   * will take precedence over those set through {@link #setLoggingPrefs} and
	   * {@link #setProxy}, respectively.
	   *
	   * @param {!opera.Options} options The OperaDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setOperaOptions(options) {
	    this.operaOptions_ = options;
	    return this;
	  }

	  /**
	   * Set Internet Explorer specific {@linkplain ie.Options options} for drivers
	   * created by this builder. Any proxy settings defined on the given options
	   * will take precedence over those set through {@link #setProxy}.
	   *
	   * @param {!ie.Options} options The IEDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setIeOptions(options) {
	    this.ieOptions_ = options;
	    return this;
	  }

	  /**
	   * Set {@linkplain edge.Options options} specific to Microsoft's Edge browser
	   * for drivers created by this builder. Any proxy settings defined on the
	   * given options will take precedence over those set through
	   * {@link #setProxy}.
	   *
	   * @param {!edge.Options} options The MicrosoftEdgeDriver options to use.
	   * @return {!Builder} A self reference.
	   */
	  setEdgeOptions(options) {
	    this.edgeOptions_ = options;
	    return this;
	  }

	  /**
	   * Sets Safari specific {@linkplain safari.Options options} for drivers
	   * created by this builder. Any logging settings defined on the given options
	   * will take precedence over those set through {@link #setLoggingPrefs}.
	   *
	   * @param {!safari.Options} options The Safari options to use.
	   * @return {!Builder} A self reference.
	   */
	  setSafariOptions(options) {
	    this.safariOptions_ = options;
	    return this;
	  }

	  /**
	   * @return {safari.Options} the Safari specific options currently configured
	   *     for this instance.
	   */
	  getSafariOptions() {
	    return this.safariOptions_;
	  }

	  /**
	   * Sets the control flow that created drivers should execute actions in. If
	   * the flow is never set, or is set to {@code null}, it will use the active
	   * flow at the time {@link #build()} is called.
	   * @param {promise.ControlFlow} flow The control flow to use, or
	   *     {@code null} to
	   * @return {!Builder} A self reference.
	   */
	  setControlFlow(flow) {
	    this.flow_ = flow;
	    return this;
	  }

	  /**
	   * Creates a new WebDriver client based on this builder's current
	   * configuration.
	   *
	   * This method will return a {@linkplain ThenableWebDriver} instance, allowing
	   * users to issue commands directly without calling `then()`. The returned
	   * thenable wraps a promise that will resolve to a concrete
	   * {@linkplain webdriver.WebDriver WebDriver} instance. The promise will be
	   * rejected if the remote end fails to create a new session.
	   *
	   * @return {!ThenableWebDriver} A new WebDriver instance.
	   * @throws {Error} If the current configuration is invalid.
	   */
	  build() {
	    // Create a copy for any changes we may need to make based on the current
	    // environment.
	    var capabilities = new Capabilities(this.capabilities_);

	    var browser;
	    if (!this.ignoreEnv_ && process.env.SELENIUM_BROWSER) {
	      this.log_.fine(`SELENIUM_BROWSER=${process.env.SELENIUM_BROWSER}`);
	      browser = process.env.SELENIUM_BROWSER.split(/:/, 3);
	      capabilities.set(Capability.BROWSER_NAME, browser[0]);
	      capabilities.set(Capability.VERSION, browser[1] || null);
	      capabilities.set(Capability.PLATFORM, browser[2] || null);
	    }

	    browser = capabilities.get(Capability.BROWSER_NAME);

	    if (typeof browser !== 'string') {
	      throw TypeError(
	          `Target browser must be a string, but is <${typeof browser}>;` +
	          ' did you forget to call forBrowser()?');
	    }

	    if (browser === 'ie') {
	      browser = Browser.INTERNET_EXPLORER;
	    }

	    // Apply browser specific overrides.
	    if (browser === Browser.CHROME && this.chromeOptions_) {
	      capabilities.merge(this.chromeOptions_.toCapabilities());

	    } else if (browser === Browser.FIREFOX && this.firefoxOptions_) {
	      capabilities.merge(this.firefoxOptions_.toCapabilities());

	    } else if (browser === Browser.INTERNET_EXPLORER && this.ieOptions_) {
	      capabilities.merge(this.ieOptions_.toCapabilities());

	    } else if (browser === Browser.OPERA && this.operaOptions_) {
	      capabilities.merge(this.operaOptions_.toCapabilities());

	    } else if (browser === Browser.SAFARI && this.safariOptions_) {
	      capabilities.merge(this.safariOptions_.toCapabilities());

	    } else if (browser === Browser.EDGE && this.edgeOptions_) {
	      capabilities.merge(this.edgeOptions_.toCapabilities());
	    }

	    // Check for a remote browser.
	    let url = this.url_;
	    if (!this.ignoreEnv_) {
	      if (process.env.SELENIUM_REMOTE_URL) {
	        this.log_.fine(
	            `SELENIUM_REMOTE_URL=${process.env.SELENIUM_REMOTE_URL}`);
	        url = process.env.SELENIUM_REMOTE_URL;
	      } else if (process.env.SELENIUM_SERVER_JAR) {
	        this.log_.fine(
	            `SELENIUM_SERVER_JAR=${process.env.SELENIUM_SERVER_JAR}`);
	        url = startSeleniumServer(process.env.SELENIUM_SERVER_JAR);
	      }
	    }

	    if (url) {
	      this.log_.fine('Creating session on remote server');
	      let client = Promise.resolve(url)
	          .then(url => new _http.HttpClient(url, this.agent_, this.proxy_));
	      let executor = new _http.Executor(client);

	      if (browser === Browser.CHROME) {
	        const driver = ensureFileDetectorsAreEnabled(chrome.Driver);
	        return createDriver(
	            driver, capabilities, executor, this.flow_);
	      }

	      if (browser === Browser.FIREFOX) {
	        const driver = ensureFileDetectorsAreEnabled(firefox.Driver);
	        return createDriver(
	            driver, capabilities, executor, this.flow_);
	      }
	      return createDriver(
	          WebDriver, executor, capabilities, this.flow_);
	    }

	    // Check for a native browser.
	    switch (browser) {
	      case Browser.CHROME:
	        return createDriver(chrome.Driver, capabilities, null, this.flow_);

	      case Browser.FIREFOX:
	        return createDriver(firefox.Driver, capabilities, null, this.flow_);

	      case Browser.INTERNET_EXPLORER:
	        return createDriver(ie.Driver, capabilities, this.flow_);

	      case Browser.EDGE:
	        return createDriver(edge.Driver, capabilities, null, this.flow_);

	      case Browser.OPERA:
	        return createDriver(opera.Driver, capabilities, null, this.flow_);

	      case Browser.PHANTOM_JS:
	        return createDriver(phantomjs.Driver, capabilities, this.flow_);

	      case Browser.SAFARI:
	        return createDriver(safari.Driver, capabilities, this.flow_);

	      default:
	        throw new Error('Do not know how to build driver: ' + browser
	            + '; did you forget to call usingServer(url)?');
	    }
	  }
	}


	// PUBLIC API


	exports.ActionSequence = actions.ActionSequence;
	exports.Browser = capabilities.Browser;
	exports.Builder = Builder;
	exports.Button = input.Button;
	exports.By = by.By;
	exports.Capabilities = capabilities.Capabilities;
	exports.Capability = capabilities.Capability;
	exports.Condition = webdriver.Condition;
	exports.EventEmitter = events.EventEmitter;
	exports.FileDetector = input.FileDetector;
	exports.Key = input.Key;
	exports.Session = session.Session;
	exports.ThenableWebDriver = ThenableWebDriver;
	exports.TouchSequence = actions.TouchSequence;
	exports.WebDriver = webdriver.WebDriver;
	exports.WebElement = webdriver.WebElement;
	exports.WebElementCondition = webdriver.WebElementCondition;
	exports.WebElementPromise = webdriver.WebElementPromise;
	exports.error = error;
	exports.logging = logging;
	exports.promise = promise;
	exports.until = until;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for the Chrome
	 * web browser. Before using this module, you must download the latest
	 * [ChromeDriver release] and ensure it can be found on your system [PATH].
	 *
	 * There are three primary classes exported by this module:
	 *
	 * 1. {@linkplain ServiceBuilder}: configures the
	 *     {@link selenium-webdriver/remote.DriverService remote.DriverService}
	 *     that manages the [ChromeDriver] child process.
	 *
	 * 2. {@linkplain Options}: defines configuration options for each new Chrome
	 *     session, such as which {@linkplain Options#setProxy proxy} to use,
	 *     what {@linkplain Options#addExtensions extensions} to install, or
	 *     what {@linkplain Options#addArguments command-line switches} to use when
	 *     starting the browser.
	 *
	 * 3. {@linkplain Driver}: the WebDriver client; each new instance will control
	 *     a unique browser session with a clean user profile (unless otherwise
	 *     configured through the {@link Options} class).
	 *
	 * __Customizing the ChromeDriver Server__ <a id="custom-server"></a>
	 *
	 * By default, every Chrome session will use a single driver service, which is
	 * started the first time a {@link Driver} instance is created and terminated
	 * when this process exits. The default service will inherit its environment
	 * from the current process and direct all output to /dev/null. You may obtain
	 * a handle to this default service using
	 * {@link #getDefaultService getDefaultService()} and change its configuration
	 * with {@link #setDefaultService setDefaultService()}.
	 *
	 * You may also create a {@link Driver} with its own driver service. This is
	 * useful if you need to capture the server's log output for a specific session:
	 *
	 *     let chrome = require('selenium-webdriver/chrome');
	 *
	 *     let service = new chrome.ServiceBuilder()
	 *         .loggingTo('/my/log/file.txt')
	 *         .enableVerboseLogging()
	 *         .build();
	 *
	 *     let options = new chrome.Options();
	 *     // configure browser options ...
	 *
	 *     let driver = chrome.Driver.createSession(options, service);
	 *
	 * Users should only instantiate the {@link Driver} class directly when they
	 * need a custom driver service configuration (as shown above). For normal
	 * operation, users should start Chrome using the
	 * {@link selenium-webdriver.Builder}.
	 *
	 * __Working with Android__ <a id="android"></a>
	 *
	 * The [ChromeDriver][android] supports running tests on the Chrome browser as
	 * well as [WebView apps][webview] starting in Android 4.4 (KitKat). In order to
	 * work with Android, you must first start the adb
	 *
	 *     adb start-server
	 *
	 * By default, adb will start on port 5037. You may change this port, but this
	 * will require configuring a [custom server](#custom-server) that will connect
	 * to adb on the {@linkplain ServiceBuilder#setAdbPort correct port}:
	 *
	 *     let service = new chrome.ServiceBuilder()
	 *         .setAdbPort(1234)
	 *         build();
	 *     // etc.
	 *
	 * The ChromeDriver may be configured to launch Chrome on Android using
	 * {@link Options#androidChrome()}:
	 *
	 *     let driver = new Builder()
	 *         .forBrowser('chrome')
	 *         .setChromeOptions(new chrome.Options().androidChrome())
	 *         .build();
	 *
	 * Alternatively, you can configure the ChromeDriver to launch an app with a
	 * Chrome-WebView by setting the {@linkplain Options#androidActivity
	 * androidActivity} option:
	 *
	 *     let driver = new Builder()
	 *         .forBrowser('chrome')
	 *         .setChromeOptions(new chrome.Options()
	 *             .androidPackage('com.example')
	 *             .androidActivity('com.example.Activity'))
	 *         .build();
	 *
	 * [Refer to the ChromeDriver site] for more information on using the
	 * [ChromeDriver with Android][android].
	 *
	 * [ChromeDriver]: https://sites.google.com/a/chromium.org/chromedriver/
	 * [ChromeDriver release]: http://chromedriver.storage.googleapis.com/index.html
	 * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29
	 * [android]: https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android
	 * [webview]: https://developer.chrome.com/multidevice/webview/overview
	 */

	'use strict';

	const fs = __webpack_require__(109),
	    util = __webpack_require__(71);

	const http = __webpack_require__(112),
	    io = __webpack_require__(113),
	    {Capabilities, Capability} = __webpack_require__(99),
	    command = __webpack_require__(97),
	    logging = __webpack_require__(40),
	    promise = __webpack_require__(36),
	    Symbols = __webpack_require__(100),
	    webdriver = __webpack_require__(101),
	    portprober = __webpack_require__(114),
	    remote = __webpack_require__(115);


	/**
	 * Name of the ChromeDriver executable.
	 * @type {string}
	 * @const
	 */
	const CHROMEDRIVER_EXE =
	    process.platform === 'win32' ? 'chromedriver.exe' : 'chromedriver';


	/**
	 * Custom command names supported by ChromeDriver.
	 * @enum {string}
	 */
	const Command = {
	  LAUNCH_APP: 'launchApp',
	  GET_NETWORK_CONDITIONS: 'getNetworkConditions',
	  SET_NETWORK_CONDITIONS: 'setNetworkConditions'
	};


	/**
	 * Creates a command executor with support for ChromeDriver's custom commands.
	 * @param {!Promise<string>} url The server's URL.
	 * @return {!command.Executor} The new command executor.
	 */
	function createExecutor(url) {
	  let client = url.then(url => new http.HttpClient(url));
	  let executor = new http.Executor(client);
	  configureExecutor(executor);
	  return executor;
	}


	/**
	 * Configures the given executor with Chrome-specific commands.
	 * @param {!http.Executor} executor the executor to configure.
	 */
	function configureExecutor(executor) {
	  executor.defineCommand(
	      Command.LAUNCH_APP,
	      'POST',
	      '/session/:sessionId/chromium/launch_app');
	  executor.defineCommand(
	      Command.GET_NETWORK_CONDITIONS,
	      'GET',
	      '/session/:sessionId/chromium/network_conditions');
	  executor.defineCommand(
	      Command.SET_NETWORK_CONDITIONS,
	      'POST',
	      '/session/:sessionId/chromium/network_conditions');
	}


	/**
	 * Creates {@link selenium-webdriver/remote.DriverService} instances that manage
	 * a [ChromeDriver](https://sites.google.com/a/chromium.org/chromedriver/)
	 * server in a child process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the chromedriver on the current
	   *     PATH.
	   * @throws {Error} If provided executable does not exist, or the chromedriver
	   *     cannot be found on the PATH.
	   */
	  constructor(opt_exe) {
	    let exe = opt_exe || io.findInPath(CHROMEDRIVER_EXE, true);
	    if (!exe) {
	      throw Error(
	          'The ChromeDriver could not be found on the current PATH. Please ' +
	          'download the latest version of the ChromeDriver from ' +
	          'http://chromedriver.storage.googleapis.com/index.html and ensure ' +
	          'it can be found on your PATH.');
	    }

	    super(exe);
	    this.setLoopback(true);  // Required
	  }

	  /**
	   * Sets which port adb is listening to. _The ChromeDriver will connect to adb
	   * if an {@linkplain Options#androidPackage Android session} is requested, but
	   * adb **must** be started beforehand._
	   *
	   * @param {number} port Which port adb is running on.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  setAdbPort(port) {
	    return this.addArguments('--adb-port=' + port);
	  }

	  /**
	   * Sets the path of the log file the driver should log to. If a log file is
	   * not specified, the driver will log to stderr.
	   * @param {string} path Path of the log file to use.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  loggingTo(path) {
	    return this.addArguments('--log-path=' + path);
	  }

	  /**
	   * Enables verbose logging.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  enableVerboseLogging() {
	    return this.addArguments('--verbose');
	  }

	  /**
	   * Sets the number of threads the driver should use to manage HTTP requests.
	   * By default, the driver will use 4 threads.
	   * @param {number} n The number of threads to use.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  setNumHttpThreads(n) {
	    return this.addArguments('--http-threads=' + n);
	  }

	  /**
	   * @override
	   */
	  setPath(path) {
	    super.setPath(path);
	    return this.addArguments('--url-base=' + path);
	  }
	}



	/** @type {remote.DriverService} */
	let defaultService = null;


	/**
	 * Sets the default service to use for new ChromeDriver instances.
	 * @param {!remote.DriverService} service The service to use.
	 * @throws {Error} If the default service is currently running.
	 */
	function setDefaultService(service) {
	  if (defaultService && defaultService.isRunning()) {
	    throw Error(
	        'The previously configured ChromeDriver service is still running. ' +
	        'You must shut it down before you may adjust its configuration.');
	  }
	  defaultService = service;
	}


	/**
	 * Returns the default ChromeDriver service. If such a service has not been
	 * configured, one will be constructed using the default configuration for
	 * a ChromeDriver executable found on the system PATH.
	 * @return {!remote.DriverService} The default ChromeDriver service.
	 */
	function getDefaultService() {
	  if (!defaultService) {
	    defaultService = new ServiceBuilder().build();
	  }
	  return defaultService;
	}


	/**
	 * @type {string}
	 * @const
	 */
	let OPTIONS_CAPABILITY_KEY = 'chromeOptions';


	/**
	 * Class for managing ChromeDriver specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Object} */
	    this.options_ = {};

	    /** @private {!Array<(string|!Buffer)>} */
	    this.extensions_ = [];

	    /** @private {?logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?./lib/capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the ChromeDriver specific options from the given capabilities
	   * object.
	   * @param {!Capabilities} caps The capabilities object.
	   * @return {!Options} The ChromeDriver options.
	   */
	  static fromCapabilities(caps) {
	    let options = new Options();

	    let o = caps.get(OPTIONS_CAPABILITY_KEY);
	    if (o instanceof Options) {
	      options = o;
	    } else if (o) {
	      options.
	          addArguments(o.args || []).
	          addExtensions(o.extensions || []).
	          detachDriver(o.detach).
	          excludeSwitches(o.excludeSwitches || []).
	          setChromeBinaryPath(o.binary).
	          setChromeLogFile(o.logPath).
	          setChromeMinidumpPath(o.minidumpPath).
	          setLocalState(o.localState).
	          setMobileEmulation(o.mobileEmulation).
	          setUserPreferences(o.prefs).
	          setPerfLoggingPrefs(o.perfLoggingPrefs);
	    }

	    if (caps.has(Capability.PROXY)) {
	      options.setProxy(caps.get(Capability.PROXY));
	    }

	    if (caps.has(Capability.LOGGING_PREFS)) {
	      options.setLoggingPrefs(
	          caps.get(Capability.LOGGING_PREFS));
	    }

	    return options;
	  }

	  /**
	   * Add additional command line arguments to use when launching the Chrome
	   * browser.  Each argument may be specified with or without the "--" prefix
	   * (e.g. "--foo" and "foo"). Arguments with an associated value should be
	   * delimited by an "=": "foo=bar".
	   * @param {...(string|!Array<string>)} var_args The arguments to add.
	   * @return {!Options} A self reference.
	   */
	  addArguments(var_args) {
	    let args = this.options_.args || [];
	    args = args.concat.apply(args, arguments);
	    if (args.length) {
	      this.options_.args = args;
	    }
	    return this;
	  }

	  /**
	   * List of Chrome command line switches to exclude that ChromeDriver by default
	   * passes when starting Chrome.  Do not prefix switches with "--".
	   *
	   * @param {...(string|!Array<string>)} var_args The switches to exclude.
	   * @return {!Options} A self reference.
	   */
	  excludeSwitches(var_args) {
	    let switches = this.options_.excludeSwitches || [];
	    switches = switches.concat.apply(switches, arguments);
	    if (switches.length) {
	      this.options_.excludeSwitches = switches;
	    }
	    return this;
	  }

	  /**
	   * Add additional extensions to install when launching Chrome. Each extension
	   * should be specified as the path to the packed CRX file, or a Buffer for an
	   * extension.
	   * @param {...(string|!Buffer|!Array<(string|!Buffer)>)} var_args The
	   *     extensions to add.
	   * @return {!Options} A self reference.
	   */
	  addExtensions(var_args) {
	    this.extensions_ =
	        this.extensions_.concat.apply(this.extensions_, arguments);
	    return this;
	  }

	  /**
	   * Sets the path to the Chrome binary to use. On Mac OS X, this path should
	   * reference the actual Chrome executable, not just the application binary
	   * (e.g. "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome").
	   *
	   * The binary path be absolute or relative to the chromedriver server
	   * executable, but it must exist on the machine that will launch Chrome.
	   *
	   * @param {string} path The path to the Chrome binary to use.
	   * @return {!Options} A self reference.
	   */
	  setChromeBinaryPath(path) {
	    this.options_.binary = path;
	    return this;
	  }

	  /**
	   * Sets whether to leave the started Chrome browser running if the controlling
	   * ChromeDriver service is killed before {@link webdriver.WebDriver#quit()} is
	   * called.
	   * @param {boolean} detach Whether to leave the browser running if the
	   *     chromedriver service is killed before the session.
	   * @return {!Options} A self reference.
	   */
	  detachDriver(detach) {
	    this.options_.detach = detach;
	    return this;
	  }

	  /**
	   * Sets the user preferences for Chrome's user profile. See the "Preferences"
	   * file in Chrome's user data directory for examples.
	   * @param {!Object} prefs Dictionary of user preferences to use.
	   * @return {!Options} A self reference.
	   */
	  setUserPreferences(prefs) {
	    this.options_.prefs = prefs;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {!logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the performance logging preferences. Options include:
	   *
	   * - `enableNetwork`: Whether or not to collect events from Network domain.
	   * - `enablePage`: Whether or not to collect events from Page domain.
	   * - `enableTimeline`: Whether or not to collect events from Timeline domain.
	   *     Note: when tracing is enabled, Timeline domain is implicitly disabled,
	   *     unless `enableTimeline` is explicitly set to true.
	   * - `tracingCategories`: A comma-separated string of Chrome tracing
	   *     categories for which trace events should be collected. An unspecified
	   *     or empty string disables tracing.
	   * - `bufferUsageReportingInterval`: The requested number of milliseconds
	   *     between DevTools trace buffer usage events. For example, if 1000, then
	   *     once per second, DevTools will report how full the trace buffer is. If
	   *     a report indicates the buffer usage is 100%, a warning will be issued.
	   *
	   * @param {{enableNetwork: boolean,
	   *          enablePage: boolean,
	   *          enableTimeline: boolean,
	   *          tracingCategories: string,
	   *          bufferUsageReportingInterval: number}} prefs The performance
	   *     logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setPerfLoggingPrefs(prefs) {
	    this.options_.perfLoggingPrefs = prefs;
	    return this;
	  }

	  /**
	   * Sets preferences for the "Local State" file in Chrome's user data
	   * directory.
	   * @param {!Object} state Dictionary of local state preferences.
	   * @return {!Options} A self reference.
	   */
	  setLocalState(state) {
	    this.options_.localState = state;
	    return this;
	  }

	  /**
	   * Sets the name of the activity hosting a Chrome-based Android WebView. This
	   * option must be set to connect to an [Android WebView](
	   * https://sites.google.com/a/chromium.org/chromedriver/getting-started/getting-started---android)
	   *
	   * @param {string} name The activity name.
	   * @return {!Options} A self reference.
	   */
	  androidActivity(name) {
	    this.options_.androidActivity = name;
	    return this;
	  }

	  /**
	   * Sets the device serial number to connect to via ADB. If not specified, the
	   * ChromeDriver will select an unused device at random. An error will be
	   * returned if all devices already have active sessions.
	   *
	   * @param {string} serial The device serial number to connect to.
	   * @return {!Options} A self reference.
	   */
	  androidDeviceSerial(serial) {
	    this.options_.androidDeviceSerial = serial;
	    return this;
	  }

	  /**
	   * Configures the ChromeDriver to launch Chrome on Android via adb. This
	   * function is shorthand for
	   * {@link #androidPackage options.androidPackage('com.android.chrome')}.
	   * @return {!Options} A self reference.
	   */
	  androidChrome() {
	    return this.androidPackage('com.android.chrome');
	  }

	  /**
	   * Sets the package name of the Chrome or WebView app.
	   *
	   * @param {?string} pkg The package to connect to, or `null` to disable Android
	   *     and switch back to using desktop Chrome.
	   * @return {!Options} A self reference.
	   */
	  androidPackage(pkg) {
	    this.options_.androidPackage = pkg;
	    return this;
	  }

	  /**
	   * Sets the process name of the Activity hosting the WebView (as given by
	   * `ps`). If not specified, the process name is assumed to be the same as
	   * {@link #androidPackage}.
	   *
	   * @param {string} processName The main activity name.
	   * @return {!Options} A self reference.
	   */
	  androidProcess(processName) {
	    this.options_.androidProcess = processName;
	    return this;
	  }

	  /**
	   * Sets whether to connect to an already-running instead of the specified
	   * {@linkplain #androidProcess app} instead of launching the app with a clean
	   * data directory.
	   *
	   * @param {boolean} useRunning Whether to connect to a running instance.
	   * @return {!Options} A self reference.
	   */
	  androidUseRunningApp(useRunning) {
	    this.options_.androidUseRunningApp = useRunning;
	    return this;
	  }

	  /**
	   * Sets the path to Chrome's log file. This path should exist on the machine
	   * that will launch Chrome.
	   * @param {string} path Path to the log file to use.
	   * @return {!Options} A self reference.
	   */
	  setChromeLogFile(path) {
	    this.options_.logPath = path;
	    return this;
	  }

	  /**
	   * Sets the directory to store Chrome minidumps in. This option is only
	   * supported when ChromeDriver is running on Linux.
	   * @param {string} path The directory path.
	   * @return {!Options} A self reference.
	   */
	  setChromeMinidumpPath(path) {
	    this.options_.minidumpPath = path;
	    return this;
	  }

	  /**
	   * Configures Chrome to emulate a mobile device. For more information, refer
	   * to the ChromeDriver project page on [mobile emulation][em]. Configuration
	   * options include:
	   *
	   * - `deviceName`: The name of a pre-configured [emulated device][devem]
	   * - `width`: screen width, in pixels
	   * - `height`: screen height, in pixels
	   * - `pixelRatio`: screen pixel ratio
	   *
	   * __Example 1: Using a Pre-configured Device__
	   *
	   *     let options = new chrome.Options().setMobileEmulation(
	   *         {deviceName: 'Google Nexus 5'});
	   *
	   *     let driver = chrome.Driver.createSession(options);
	   *
	   * __Example 2: Using Custom Screen Configuration__
	   *
	   *     let options = new chrome.Options().setMobileEmulation({
	   *         width: 360,
	   *         height: 640,
	   *         pixelRatio: 3.0
	   *     });
	   *
	   *     let driver = chrome.Driver.createSession(options);
	   *
	   *
	   * [em]: https://sites.google.com/a/chromium.org/chromedriver/mobile-emulation
	   * [devem]: https://developer.chrome.com/devtools/docs/device-mode
	   *
	   * @param {?({deviceName: string}|
	   *           {width: number, height: number, pixelRatio: number})} config The
	   *     mobile emulation configuration, or `null` to disable emulation.
	   * @return {!Options} A self reference.
	   */
	  setMobileEmulation(config) {
	    this.options_.mobileEmulation = config;
	    return this;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to
	   *    use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link Capabilities} object.
	   * @param {Capabilities=} opt_capabilities The capabilities to merge
	   *     these options into, if any.
	   * @return {!Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    let caps = opt_capabilities || Capabilities.chrome();
	    caps.
	        set(Capability.PROXY, this.proxy_).
	        set(Capability.LOGGING_PREFS, this.logPrefs_).
	        set(OPTIONS_CAPABILITY_KEY, this);
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation not intended for general use.
	   * @return {!Object} The JSON wire protocol representation of this instance.
	   */
	  [Symbols.serialize]() {
	    let json = {};
	    for (let key in this.options_) {
	      if (this.options_[key] != null) {
	        json[key] = this.options_[key];
	      }
	    }
	    if (this.extensions_.length) {
	      json.extensions = this.extensions_.map(function(extension) {
	        if (Buffer.isBuffer(extension)) {
	          return extension.toString('base64');
	        }
	        return io.read(/** @type {string} */(extension))
	            .then(buffer => buffer.toString('base64'));
	      });
	    }
	    return json;
	  }
	}


	/**
	 * Creates a new WebDriver client for Chrome.
	 */
	class Driver extends webdriver.WebDriver {

	  /**
	   * Creates a new session with the ChromeDriver.
	   *
	   * @param {(Capabilities|Options)=} opt_config The configuration options.
	   * @param {(remote.DriverService|http.Executor)=} opt_serviceExecutor Either
	   *     a  DriverService to use for the remote end, or a preconfigured executor
	   *     for an externally managed endpoint. If neither is provided, the
	   *     {@linkplain ##getDefaultService default service} will be used by
	   *     default.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use, or `null`
	   *     to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_serviceExecutor, opt_flow) {
	    let executor;
	    if (opt_serviceExecutor instanceof http.Executor) {
	      executor = opt_serviceExecutor;
	      configureExecutor(executor);
	    } else {
	      let service = opt_serviceExecutor || getDefaultService();
	      executor = createExecutor(service.start());
	    }

	    let caps =
	        opt_config instanceof Options ? opt_config.toCapabilities() :
	        (opt_config || Capabilities.chrome());

	    return /** @type {!Driver} */(
	        webdriver.WebDriver.createSession(executor, caps, opt_flow, this));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}

	  /**
	   * Schedules a command to launch Chrome App with given ID.
	   * @param {string} id ID of the App to launch.
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when app is launched.
	   */
	  launchApp(id) {
	    return this.schedule(
	        new command.Command(Command.LAUNCH_APP).setParameter('id', id),
	        'Driver.launchApp()');
	  }
	  
	  /**
	   * Schedules a command to get Chrome network emulation settings.
	   * @return {!promise.Thenable<T>} A promise that will be resolved
	   *     when network emulation settings are retrievied.
	   */
	  getNetworkConditions() {
	    return this.schedule(
	        new command.Command(Command.GET_NETWORK_CONDITIONS),
	        'Driver.getNetworkConditions()');
	  }

	  /**
	   * Schedules a command to set Chrome network emulation settings.
	   * 
	   * __Sample Usage:__
	   * 
	   *  driver.setNetworkConditions({
	   *    offline: false,
	   *    latency: 5, // Additional latency (ms).
	   *    download_throughput: 500 * 1024, // Maximal aggregated download throughput.
	   *    upload_throughput: 500 * 1024 // Maximal aggregated upload throughput.
	   * });
	   * 
	   * @param {Object} spec Defines the network conditions to set
	   * @return {!promise.Thenable<void>} A promise that will be resolved
	   *     when network emulation settings are set.
	   */
	  setNetworkConditions(spec) {
	    if (!spec || typeof spec !== 'object') {
	      throw TypeError('setNetworkConditions called with non-network-conditions parameter');
	    }

	    return this.schedule(
	        new command.Command(Command.SET_NETWORK_CONDITIONS).setParameter('network_conditions', spec),
	        'Driver.setNetworkConditions(' + JSON.stringify(spec) + ')');
	  }
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;
	exports.getDefaultService = getDefaultService;
	exports.setDefaultService = setDefaultService;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37), __webpack_require__(51).Buffer))

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	
	exports.existsSync = function (file) {
	  // if this file exists selenium-webdriver considers devmode=true
	  if (file.endsWith('build.desc')) {
	    return false;
	  }
	  throw new Error(`Alias not found fo fs.existsSync, file = ${file}`);
	};

	exports.readFile = function (file, mode, callback) {
	  if (file.startsWith('/atoms/getAttribute.js')) {
	    const content = __webpack_require__(110);
	    callback(null, content);
	    return;
	  }
	  if (file.startsWith('/atoms/isDisplayed.js')) {
	    const content = __webpack_require__(111);
	    callback(null, content);
	    return;
	  }
	  throw new Error(`Alias not found fo fs.readFile, file = ${file}`);
	};



/***/ }),
/* 110 */
/***/ (function(module, exports) {

	module.exports = "// GENERATED CODE - DO NOT EDIT\nmodule.exports = function(){return function(){var aa=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,c,b){if(b.get||b.set)throw new TypeError(\"ES3 does not support getters and setters.\");a!=Array.prototype&&a!=Object.prototype&&(a[c]=b.value)},ba=\"undefined\"!=typeof window&&window===this?this:\"undefined\"!=typeof global?global:this;\nfunction e(a,c){if(c){for(var b=ba,d=a.split(\".\"),f=0;f<d.length-1;f++){var h=d[f];h in b||(b[h]={});b=b[h]}d=d[d.length-1];f=b[d];h=c(f);h!=f&&null!=h&&aa(b,d,{configurable:!0,writable:!0,value:h})}}\ne(\"String.prototype.repeat\",function(a){return a?a:function(a){var b;if(null==this)throw new TypeError(\"The 'this' value for String.prototype.repeat must not be null or undefined\");b=this+\"\";if(0>a||1342177279<a)throw new RangeError(\"Invalid count value\");a|=0;for(var d=\"\";a;)if(a&1&&(d+=b),a>>>=1)b+=b;return d}});e(\"Math.sign\",function(a){return a?a:function(a){a=Number(a);return!a||isNaN(a)?a:0<a?1:-1}});var g=this;function l(a){return\"string\"==typeof a};function m(a,c){this.a=n[a]||p;this.message=c||\"\";var b=this.a.replace(/((?:^|\\s+)[a-z])/g,function(a){return a.toUpperCase().replace(/^[\\s\\xa0]+/g,\"\")}),d=b.length-5;if(0>d||b.indexOf(\"Error\",d)!=d)b+=\"Error\";this.name=b;b=Error(this.message);b.name=this.name;this.stack=b.stack||\"\"}\n(function(){var a=Error;function c(){}c.prototype=a.prototype;m.b=a.prototype;m.prototype=new c;m.prototype.constructor=m;m.a=function(b,c,f){for(var h=Array(arguments.length-2),k=2;k<arguments.length;k++)h[k-2]=arguments[k];return a.prototype[c].apply(b,h)}})();var p=\"unknown error\",n={15:\"element not selectable\",11:\"element not visible\"};n[31]=p;n[30]=p;n[24]=\"invalid cookie domain\";n[29]=\"invalid element coordinates\";n[12]=\"invalid element state\";n[32]=\"invalid selector\";n[51]=\"invalid selector\";\nn[52]=\"invalid selector\";n[17]=\"javascript error\";n[405]=\"unsupported operation\";n[34]=\"move target out of bounds\";n[27]=\"no such alert\";n[7]=\"no such element\";n[8]=\"no such frame\";n[23]=\"no such window\";n[28]=\"script timeout\";n[33]=\"session not created\";n[10]=\"stale element reference\";n[21]=\"timeout\";n[25]=\"unable to set cookie\";n[26]=\"unexpected alert open\";n[13]=p;n[9]=\"unknown command\";m.prototype.toString=function(){return this.name+\": \"+this.message};var q=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};\nfunction r(a,c){for(var b=0,d=q(String(a)).split(\".\"),f=q(String(c)).split(\".\"),h=Math.max(d.length,f.length),k=0;!b&&k<h;k++){var S=d[k]||\"\",ja=f[k]||\"\",ka=RegExp(\"(\\\\d*)(\\\\D*)\",\"g\"),la=RegExp(\"(\\\\d*)(\\\\D*)\",\"g\");do{var t=ka.exec(S)||[\"\",\"\",\"\"],u=la.exec(ja)||[\"\",\"\",\"\"];if(0==t[0].length&&0==u[0].length)break;b=v(0==t[1].length?0:parseInt(t[1],10),0==u[1].length?0:parseInt(u[1],10))||v(0==t[2].length,0==u[2].length)||v(t[2],u[2])}while(!b)}return b}function v(a,c){return a<c?-1:a>c?1:0};var w;a:{var x=g.navigator;if(x){var y=x.userAgent;if(y){w=y;break a}}w=\"\"}function z(a){return-1!=w.indexOf(a)};function ca(a,c){for(var b=a.length,d=l(a)?a.split(\"\"):a,f=0;f<b;f++)f in d&&c.call(void 0,d[f],f,a)};function A(){return z(\"iPhone\")&&!z(\"iPod\")&&!z(\"iPad\")};function B(){return z(\"Opera\")||z(\"OPR\")}function C(){return(z(\"Chrome\")||z(\"CriOS\"))&&!B()&&!z(\"Edge\")};var D=B(),E=z(\"Trident\")||z(\"MSIE\"),F=z(\"Edge\"),G=z(\"Gecko\")&&!(-1!=w.toLowerCase().indexOf(\"webkit\")&&!z(\"Edge\"))&&!(z(\"Trident\")||z(\"MSIE\"))&&!z(\"Edge\"),da=-1!=w.toLowerCase().indexOf(\"webkit\")&&!z(\"Edge\");function ea(){var a=w;if(G)return/rv\\:([^\\);]+)(\\)|;)/.exec(a);if(F)return/Edge\\/([\\d\\.]+)/.exec(a);if(E)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(da)return/WebKit\\/(\\S+)/.exec(a)}function H(){var a=g.document;return a?a.documentMode:void 0}\nvar I=function(){if(D&&g.opera){var a;var c=g.opera.version;try{a=c()}catch(b){a=c}return a}a=\"\";(c=ea())&&(a=c?c[1]:\"\");return E&&(c=H(),null!=c&&c>parseFloat(a))?String(c):a}(),J={},K=g.document,L=K&&E?H()||(\"CSS1Compat\"==K.compatMode?parseInt(I,10):5):void 0;!G&&!E||E&&9<=Number(L)||G&&(J[\"1.9.1\"]||(J[\"1.9.1\"]=0<=r(I,\"1.9.1\")));E&&(J[\"9\"]||(J[\"9\"]=0<=r(I,\"9\")));var fa=z(\"Firefox\"),ga=A()||z(\"iPod\"),ha=z(\"iPad\"),M=z(\"Android\")&&!(C()||z(\"Firefox\")||B()||z(\"Silk\")),ia=C(),N=z(\"Safari\")&&!(C()||z(\"Coast\")||B()||z(\"Edge\")||z(\"Silk\")||z(\"Android\"))&&!(A()||z(\"iPad\")||z(\"iPod\"));var ma={SCRIPT:1,STYLE:1,HEAD:1,IFRAME:1,OBJECT:1},na={IMG:\" \",BR:\"\\n\"};function oa(a,c,b){if(!(a.nodeName in ma))if(3==a.nodeType)b?c.push(String(a.nodeValue).replace(/(\\r\\n|\\r|\\n)/g,\"\")):c.push(a.nodeValue);else if(a.nodeName in na)c.push(na[a.nodeName]);else for(a=a.firstChild;a;)oa(a,c,b),a=a.nextSibling};function O(a){return(a=a.exec(w))?a[1]:\"\"}var pa=function(){if(fa)return O(/Firefox\\/([0-9.]+)/);if(E||F||D)return I;if(ia)return O(/Chrome\\/([0-9.]+)/);if(N&&!(A()||z(\"iPad\")||z(\"iPod\")))return O(/Version\\/([0-9.]+)/);if(ga||ha){var a=/Version\\/(\\S+).*Mobile\\/(\\S+)/.exec(w);if(a)return a[1]+\".\"+a[2]}else if(M)return(a=O(/Android\\s+([0-9.]+)/))?a:O(/Version\\/([0-9.]+)/);return\"\"}();var qa;function P(a){ra?qa(a):M?r(sa,a):r(pa,a)}var ra=function(){if(!G)return!1;var a=g.Components;if(!a)return!1;try{if(!a.classes)return!1}catch(f){return!1}var c=a.classes,a=a.interfaces,b=c[\"@mozilla.org/xpcom/version-comparator;1\"].getService(a.nsIVersionComparator),d=c[\"@mozilla.org/xre/app-info;1\"].getService(a.nsIXULAppInfo).version;qa=function(a){b.compare(d,\"\"+a)};return!0}(),Q;if(M){var ta=/Android\\s+([0-9\\.]+)/.exec(w);Q=ta?ta[1]:\"0\"}else Q=\"0\";\nvar sa=Q,ua=E&&!(8<=Number(L)),va=E&&!(9<=Number(L));M&&P(2.3);M&&P(4);N&&P(6);function R(a,c){c=c.toLowerCase();if(\"style\"==c)return wa(a.style.cssText);if(ua&&\"value\"==c&&T(a,\"INPUT\"))return a.value;if(va&&!0===a[c])return String(a.getAttribute(c));var b=a.getAttributeNode(c);return b&&b.specified?b.value:null}var xa=/[;]+(?=(?:(?:[^\"]*\"){2})*[^\"]*$)(?=(?:(?:[^']*'){2})*[^']*$)(?=(?:[^()]*\\([^()]*\\))*[^()]*$)/;\nfunction wa(a){var c=[];ca(a.split(xa),function(a){var d=a.indexOf(\":\");0<d&&(a=[a.slice(0,d),a.slice(d+1)],2==a.length&&c.push(a[0].toLowerCase(),\":\",a[1],\";\"))});c=c.join(\"\");return c=\";\"==c.charAt(c.length-1)?c:c+\";\"}function U(a,c){var b;ua&&\"value\"==c&&T(a,\"OPTION\")&&null===R(a,\"value\")?(b=[],oa(a,b,!1),b=b.join(\"\")):b=a[c];return b}function T(a,c){return!!a&&1==a.nodeType&&(!c||a.tagName.toUpperCase()==c)}\nfunction ya(a){return T(a,\"OPTION\")?!0:T(a,\"INPUT\")?(a=a.type.toLowerCase(),\"checkbox\"==a||\"radio\"==a):!1};var za={\"class\":\"className\",readonly:\"readOnly\"},V=\"async autofocus autoplay checked compact complete controls declare defaultchecked defaultselected defer disabled draggable ended formnovalidate hidden indeterminate iscontenteditable ismap itemscope loop multiple muted nohref noresize noshade novalidate nowrap open paused pubdate readonly required reversed scoped seamless seeking selected spellcheck truespeed willvalidate\".split(\" \");function Aa(a,c){var b=null,d=c.toLowerCase();if(\"style\"==d)return(b=a.style)&&!l(b)&&(b=b.cssText),b;if((\"selected\"==d||\"checked\"==d)&&ya(a)){if(!ya(a))throw new m(15,\"Element is not selectable\");var b=\"selected\",f=a.type&&a.type.toLowerCase();if(\"checkbox\"==f||\"radio\"==f)b=\"checked\";return U(a,b)?\"true\":null}var h=T(a,\"A\");if(T(a,\"IMG\")&&\"src\"==d||h&&\"href\"==d)return(b=R(a,d))&&(b=U(a,d)),b;if(\"spellcheck\"==d){b=R(a,d);if(null!==b){if(\"false\"==b.toLowerCase())return\"false\";if(\"true\"==b.toLowerCase())return\"true\"}return U(a,\nd)+\"\"}h=za[c]||c;a:if(l(V))d=l(d)&&1==d.length?V.indexOf(d,0):-1;else{for(var k=0;k<V.length;k++)if(k in V&&V[k]===d){d=k;break a}d=-1}if(0<=d)return(b=null!==R(a,c)||U(a,h))?\"true\":null;try{f=U(a,h)}catch(S){}(d=null==f)||(d=typeof f,d=\"object\"==d&&null!=f||\"function\"==d);d?b=R(a,c):b=f;return null!=b?b.toString():null}var W=[\"_\"],X=g;W[0]in X||!X.execScript||X.execScript(\"var \"+W[0]);for(var Y;W.length&&(Y=W.shift());){var Z;if(Z=!W.length)Z=void 0!==Aa;Z?X[Y]=Aa:X[Y]?X=X[Y]:X=X[Y]={}};; return this._.apply(null,arguments);}.apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};\n"

/***/ }),
/* 111 */
/***/ (function(module, exports) {

	module.exports = "// GENERATED CODE - DO NOT EDIT\nmodule.exports = function(){return function(){var aa=\"function\"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(c.get||c.set)throw new TypeError(\"ES3 does not support getters and setters.\");a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)},ba=\"undefined\"!=typeof window&&window===this?this:\"undefined\"!=typeof global?global:this;\nfunction ca(a,b){if(b){for(var c=ba,d=a.split(\".\"),e=0;e<d.length-1;e++){var f=d[e];f in c||(c[f]={});c=c[f]}d=d[d.length-1];e=c[d];f=b(e);f!=e&&null!=f&&aa(c,d,{configurable:!0,writable:!0,value:f})}}\nca(\"String.prototype.repeat\",function(a){return a?a:function(a){var c;if(null==this)throw new TypeError(\"The 'this' value for String.prototype.repeat must not be null or undefined\");c=this+\"\";if(0>a||1342177279<a)throw new RangeError(\"Invalid count value\");a|=0;for(var d=\"\";a;)if(a&1&&(d+=c),a>>>=1)c+=c;return d}});ca(\"Math.sign\",function(a){return a?a:function(a){a=Number(a);return!a||isNaN(a)?a:0<a?1:-1}});var k=this;function l(a){return void 0!==a}\nfunction da(a,b){var c=a.split(\".\"),d=k;c[0]in d||!d.execScript||d.execScript(\"var \"+c[0]);for(var e;c.length&&(e=c.shift());)!c.length&&l(b)?d[e]=b:d[e]?d=d[e]:d=d[e]={}}\nfunction ea(a){var b=typeof a;if(\"object\"==b)if(a){if(a instanceof Array)return\"array\";if(a instanceof Object)return b;var c=Object.prototype.toString.call(a);if(\"[object Window]\"==c)return\"object\";if(\"[object Array]\"==c||\"number\"==typeof a.length&&\"undefined\"!=typeof a.splice&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"splice\"))return\"array\";if(\"[object Function]\"==c||\"undefined\"!=typeof a.call&&\"undefined\"!=typeof a.propertyIsEnumerable&&!a.propertyIsEnumerable(\"call\"))return\"function\"}else return\"null\";\nelse if(\"function\"==b&&\"undefined\"==typeof a.call)return\"object\";return b}function n(a){return\"string\"==typeof a}function fa(a,b,c){return a.call.apply(a.bind,arguments)}function ga(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}\nfunction ha(a,b,c){ha=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?fa:ga;return ha.apply(null,arguments)}function ia(a,b){var c=Array.prototype.slice.call(arguments,1);return function(){var b=c.slice();b.push.apply(b,arguments);return a.apply(this,b)}}\nfunction q(a,b){function c(){}c.prototype=b.prototype;a.H=b.prototype;a.prototype=new c;a.prototype.constructor=a;a.G=function(a,c,f){for(var g=Array(arguments.length-2),h=2;h<arguments.length;h++)g[h-2]=arguments[h];return b.prototype[c].apply(a,g)}};function ja(a,b){this.a=r[a]||ka;this.message=b||\"\";var c=this.a.replace(/((?:^|\\s+)[a-z])/g,function(a){return a.toUpperCase().replace(/^[\\s\\xa0]+/g,\"\")}),d=c.length-5;if(0>d||c.indexOf(\"Error\",d)!=d)c+=\"Error\";this.name=c;c=Error(this.message);c.name=this.name;this.stack=c.stack||\"\"}q(ja,Error);var ka=\"unknown error\",r={15:\"element not selectable\",11:\"element not visible\"};r[31]=ka;r[30]=ka;r[24]=\"invalid cookie domain\";r[29]=\"invalid element coordinates\";r[12]=\"invalid element state\";r[32]=\"invalid selector\";\nr[51]=\"invalid selector\";r[52]=\"invalid selector\";r[17]=\"javascript error\";r[405]=\"unsupported operation\";r[34]=\"move target out of bounds\";r[27]=\"no such alert\";r[7]=\"no such element\";r[8]=\"no such frame\";r[23]=\"no such window\";r[28]=\"script timeout\";r[33]=\"session not created\";r[10]=\"stale element reference\";r[21]=\"timeout\";r[25]=\"unable to set cookie\";r[26]=\"unexpected alert open\";r[13]=ka;r[9]=\"unknown command\";ja.prototype.toString=function(){return this.name+\": \"+this.message};var la={aliceblue:\"#f0f8ff\",antiquewhite:\"#faebd7\",aqua:\"#00ffff\",aquamarine:\"#7fffd4\",azure:\"#f0ffff\",beige:\"#f5f5dc\",bisque:\"#ffe4c4\",black:\"#000000\",blanchedalmond:\"#ffebcd\",blue:\"#0000ff\",blueviolet:\"#8a2be2\",brown:\"#a52a2a\",burlywood:\"#deb887\",cadetblue:\"#5f9ea0\",chartreuse:\"#7fff00\",chocolate:\"#d2691e\",coral:\"#ff7f50\",cornflowerblue:\"#6495ed\",cornsilk:\"#fff8dc\",crimson:\"#dc143c\",cyan:\"#00ffff\",darkblue:\"#00008b\",darkcyan:\"#008b8b\",darkgoldenrod:\"#b8860b\",darkgray:\"#a9a9a9\",darkgreen:\"#006400\",\ndarkgrey:\"#a9a9a9\",darkkhaki:\"#bdb76b\",darkmagenta:\"#8b008b\",darkolivegreen:\"#556b2f\",darkorange:\"#ff8c00\",darkorchid:\"#9932cc\",darkred:\"#8b0000\",darksalmon:\"#e9967a\",darkseagreen:\"#8fbc8f\",darkslateblue:\"#483d8b\",darkslategray:\"#2f4f4f\",darkslategrey:\"#2f4f4f\",darkturquoise:\"#00ced1\",darkviolet:\"#9400d3\",deeppink:\"#ff1493\",deepskyblue:\"#00bfff\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1e90ff\",firebrick:\"#b22222\",floralwhite:\"#fffaf0\",forestgreen:\"#228b22\",fuchsia:\"#ff00ff\",gainsboro:\"#dcdcdc\",\nghostwhite:\"#f8f8ff\",gold:\"#ffd700\",goldenrod:\"#daa520\",gray:\"#808080\",green:\"#008000\",greenyellow:\"#adff2f\",grey:\"#808080\",honeydew:\"#f0fff0\",hotpink:\"#ff69b4\",indianred:\"#cd5c5c\",indigo:\"#4b0082\",ivory:\"#fffff0\",khaki:\"#f0e68c\",lavender:\"#e6e6fa\",lavenderblush:\"#fff0f5\",lawngreen:\"#7cfc00\",lemonchiffon:\"#fffacd\",lightblue:\"#add8e6\",lightcoral:\"#f08080\",lightcyan:\"#e0ffff\",lightgoldenrodyellow:\"#fafad2\",lightgray:\"#d3d3d3\",lightgreen:\"#90ee90\",lightgrey:\"#d3d3d3\",lightpink:\"#ffb6c1\",lightsalmon:\"#ffa07a\",\nlightseagreen:\"#20b2aa\",lightskyblue:\"#87cefa\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#b0c4de\",lightyellow:\"#ffffe0\",lime:\"#00ff00\",limegreen:\"#32cd32\",linen:\"#faf0e6\",magenta:\"#ff00ff\",maroon:\"#800000\",mediumaquamarine:\"#66cdaa\",mediumblue:\"#0000cd\",mediumorchid:\"#ba55d3\",mediumpurple:\"#9370db\",mediumseagreen:\"#3cb371\",mediumslateblue:\"#7b68ee\",mediumspringgreen:\"#00fa9a\",mediumturquoise:\"#48d1cc\",mediumvioletred:\"#c71585\",midnightblue:\"#191970\",mintcream:\"#f5fffa\",mistyrose:\"#ffe4e1\",\nmoccasin:\"#ffe4b5\",navajowhite:\"#ffdead\",navy:\"#000080\",oldlace:\"#fdf5e6\",olive:\"#808000\",olivedrab:\"#6b8e23\",orange:\"#ffa500\",orangered:\"#ff4500\",orchid:\"#da70d6\",palegoldenrod:\"#eee8aa\",palegreen:\"#98fb98\",paleturquoise:\"#afeeee\",palevioletred:\"#db7093\",papayawhip:\"#ffefd5\",peachpuff:\"#ffdab9\",peru:\"#cd853f\",pink:\"#ffc0cb\",plum:\"#dda0dd\",powderblue:\"#b0e0e6\",purple:\"#800080\",red:\"#ff0000\",rosybrown:\"#bc8f8f\",royalblue:\"#4169e1\",saddlebrown:\"#8b4513\",salmon:\"#fa8072\",sandybrown:\"#f4a460\",seagreen:\"#2e8b57\",\nseashell:\"#fff5ee\",sienna:\"#a0522d\",silver:\"#c0c0c0\",skyblue:\"#87ceeb\",slateblue:\"#6a5acd\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#fffafa\",springgreen:\"#00ff7f\",steelblue:\"#4682b4\",tan:\"#d2b48c\",teal:\"#008080\",thistle:\"#d8bfd8\",tomato:\"#ff6347\",turquoise:\"#40e0d0\",violet:\"#ee82ee\",wheat:\"#f5deb3\",white:\"#ffffff\",whitesmoke:\"#f5f5f5\",yellow:\"#ffff00\",yellowgreen:\"#9acd32\"};function ma(a,b){this.width=a;this.height=b}ma.prototype.clone=function(){return new ma(this.width,this.height)};ma.prototype.toString=function(){return\"(\"+this.width+\" x \"+this.height+\")\"};ma.prototype.ceil=function(){this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};ma.prototype.floor=function(){this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};\nma.prototype.round=function(){this.width=Math.round(this.width);this.height=Math.round(this.height);return this};var na=String.prototype.trim?function(a){return a.trim()}:function(a){return a.replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g,\"\")};\nfunction oa(a,b){for(var c=0,d=na(String(a)).split(\".\"),e=na(String(b)).split(\".\"),f=Math.max(d.length,e.length),g=0;!c&&g<f;g++){var h=d[g]||\"\",p=e[g]||\"\",w=RegExp(\"(\\\\d*)(\\\\D*)\",\"g\"),m=RegExp(\"(\\\\d*)(\\\\D*)\",\"g\");do{var u=w.exec(h)||[\"\",\"\",\"\"],y=m.exec(p)||[\"\",\"\",\"\"];if(0==u[0].length&&0==y[0].length)break;c=pa(0==u[1].length?0:parseInt(u[1],10),0==y[1].length?0:parseInt(y[1],10))||pa(0==u[2].length,0==y[2].length)||pa(u[2],y[2])}while(!c)}return c}function pa(a,b){return a<b?-1:a>b?1:0}\nfunction qa(a){return String(a).replace(/\\-([a-z])/g,function(a,c){return c.toUpperCase()})};/*\n\n The MIT License\n\n Copyright (c) 2007 Cybozu Labs, Inc.\n Copyright (c) 2012 Google Inc.\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to\n deal in the Software without restriction, including without limitation the\n rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n sell copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n IN THE SOFTWARE.\n*/\nfunction ra(a,b,c){this.a=a;this.b=b||1;this.f=c||1};function sa(a){this.b=a;this.a=0}function ta(a){a=a.match(ua);for(var b=0;b<a.length;b++)va.test(a[b])&&a.splice(b,1);return new sa(a)}var ua=RegExp(\"\\\\$?(?:(?![0-9-\\\\.])(?:\\\\*|[\\\\w-\\\\.]+):)?(?![0-9-\\\\.])(?:\\\\*|[\\\\w-\\\\.]+)|\\\\/\\\\/|\\\\.\\\\.|::|\\\\d+(?:\\\\.\\\\d*)?|\\\\.\\\\d+|\\\"[^\\\"]*\\\"|'[^']*'|[!<>]=|\\\\s+|.\",\"g\"),va=/^\\s/;function t(a,b){return a.b[a.a+(b||0)]}function v(a){return a.b[a.a++]}function wa(a){return a.b.length<=a.a};var x;a:{var xa=k.navigator;if(xa){var ya=xa.userAgent;if(ya){x=ya;break a}}x=\"\"}function z(a){return-1!=x.indexOf(a)};function A(a,b){this.h=a;this.c=l(b)?b:null;this.b=null;switch(a){case \"comment\":this.b=8;break;case \"text\":this.b=3;break;case \"processing-instruction\":this.b=7;break;case \"node\":break;default:throw Error(\"Unexpected argument\");}}function za(a){return\"comment\"==a||\"text\"==a||\"processing-instruction\"==a||\"node\"==a}A.prototype.a=function(a){return null===this.b||this.b==a.nodeType};A.prototype.f=function(){return this.h};\nA.prototype.toString=function(){var a=\"Kind Test: \"+this.h;!this.c||(a+=B(this.c));return a};function Aa(a,b){this.j=a.toLowerCase();var c;c=\"*\"==this.j?\"*\":\"http://www.w3.org/1999/xhtml\";this.c=b?b.toLowerCase():c}Aa.prototype.a=function(a){var b=a.nodeType;if(1!=b&&2!=b)return!1;b=l(a.localName)?a.localName:a.nodeName;return\"*\"!=this.j&&this.j!=b.toLowerCase()?!1:\"*\"==this.c?!0:this.c==(a.namespaceURI?a.namespaceURI.toLowerCase():\"http://www.w3.org/1999/xhtml\")};Aa.prototype.f=function(){return this.j};\nAa.prototype.toString=function(){return\"Name Test: \"+(\"http://www.w3.org/1999/xhtml\"==this.c?\"\":this.c+\":\")+this.j};function Ba(a){switch(a.nodeType){case 1:return ia(Ca,a);case 9:return Ba(a.documentElement);case 11:case 10:case 6:case 12:return Da;default:return a.parentNode?Ba(a.parentNode):Da}}function Da(){return null}function Ca(a,b){if(a.prefix==b)return a.namespaceURI||\"http://www.w3.org/1999/xhtml\";var c=a.getAttributeNode(\"xmlns:\"+b);return c&&c.specified?c.value||null:a.parentNode&&9!=a.parentNode.nodeType?Ca(a.parentNode,b):null};function Ea(a,b){if(n(a))return n(b)&&1==b.length?a.indexOf(b,0):-1;for(var c=0;c<a.length;c++)if(c in a&&a[c]===b)return c;return-1}function C(a,b){for(var c=a.length,d=n(a)?a.split(\"\"):a,e=0;e<c;e++)e in d&&b.call(void 0,d[e],e,a)}function Fa(a,b){for(var c=a.length,d=[],e=0,f=n(a)?a.split(\"\"):a,g=0;g<c;g++)if(g in f){var h=f[g];b.call(void 0,h,g,a)&&(d[e++]=h)}return d}function Ga(a,b,c){var d=c;C(a,function(c,f){d=b.call(void 0,d,c,f,a)});return d}\nfunction Ha(a,b){for(var c=a.length,d=n(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a))return!0;return!1}function Ia(a,b){for(var c=a.length,d=n(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&!b.call(void 0,d[e],e,a))return!1;return!0}function Ja(a,b){var c;a:{c=a.length;for(var d=n(a)?a.split(\"\"):a,e=0;e<c;e++)if(e in d&&b.call(void 0,d[e],e,a)){c=e;break a}c=-1}return 0>c?null:n(a)?a.charAt(c):a[c]}function Ka(a){return Array.prototype.concat.apply(Array.prototype,arguments)}\nfunction La(a,b,c){return 2>=arguments.length?Array.prototype.slice.call(a,b):Array.prototype.slice.call(a,b,c)};function Ma(){return z(\"iPhone\")&&!z(\"iPod\")&&!z(\"iPad\")};var Na=\"backgroundColor borderTopColor borderRightColor borderBottomColor borderLeftColor color outlineColor\".split(\" \"),Oa=/#([0-9a-fA-F])([0-9a-fA-F])([0-9a-fA-F])/,Pa=/^#(?:[0-9a-f]{3}){1,2}$/i,Qa=/^(?:rgba)?\\((\\d{1,3}),\\s?(\\d{1,3}),\\s?(\\d{1,3}),\\s?(0|1|0\\.\\d*)\\)$/i,Ra=/^(?:rgb)?\\((0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2}),\\s?(0|[1-9]\\d{0,2})\\)$/i;function Sa(){return z(\"Opera\")||z(\"OPR\")}function Ta(){return(z(\"Chrome\")||z(\"CriOS\"))&&!Sa()&&!z(\"Edge\")};function D(a,b){this.x=l(a)?a:0;this.y=l(b)?b:0}D.prototype.clone=function(){return new D(this.x,this.y)};D.prototype.toString=function(){return\"(\"+this.x+\", \"+this.y+\")\"};D.prototype.ceil=function(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this};D.prototype.floor=function(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this};D.prototype.round=function(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this};var Ua=Sa(),E=z(\"Trident\")||z(\"MSIE\"),Va=z(\"Edge\"),Wa=z(\"Gecko\")&&!(-1!=x.toLowerCase().indexOf(\"webkit\")&&!z(\"Edge\"))&&!(z(\"Trident\")||z(\"MSIE\"))&&!z(\"Edge\"),Xa=-1!=x.toLowerCase().indexOf(\"webkit\")&&!z(\"Edge\");function Ya(){var a=x;if(Wa)return/rv\\:([^\\);]+)(\\)|;)/.exec(a);if(Va)return/Edge\\/([\\d\\.]+)/.exec(a);if(E)return/\\b(?:MSIE|rv)[: ]([^\\);]+)(\\)|;)/.exec(a);if(Xa)return/WebKit\\/(\\S+)/.exec(a)}function Za(){var a=k.document;return a?a.documentMode:void 0}\nvar $a=function(){if(Ua&&k.opera){var a;var b=k.opera.version;try{a=b()}catch(c){a=b}return a}a=\"\";(b=Ya())&&(a=b?b[1]:\"\");return E&&(b=Za(),null!=b&&b>parseFloat(a))?String(b):a}(),ab={};function bb(a){return ab[a]||(ab[a]=0<=oa($a,a))}var cb=k.document,db=cb&&E?Za()||(\"CSS1Compat\"==cb.compatMode?parseInt($a,10):5):void 0;!Wa&&!E||E&&9<=Number(db)||Wa&&bb(\"1.9.1\");E&&bb(\"9\");function eb(a,b,c,d){this.top=a;this.right=b;this.bottom=c;this.left=d}eb.prototype.clone=function(){return new eb(this.top,this.right,this.bottom,this.left)};eb.prototype.toString=function(){return\"(\"+this.top+\"t, \"+this.right+\"r, \"+this.bottom+\"b, \"+this.left+\"l)\"};eb.prototype.ceil=function(){this.top=Math.ceil(this.top);this.right=Math.ceil(this.right);this.bottom=Math.ceil(this.bottom);this.left=Math.ceil(this.left);return this};\neb.prototype.floor=function(){this.top=Math.floor(this.top);this.right=Math.floor(this.right);this.bottom=Math.floor(this.bottom);this.left=Math.floor(this.left);return this};eb.prototype.round=function(){this.top=Math.round(this.top);this.right=Math.round(this.right);this.bottom=Math.round(this.bottom);this.left=Math.round(this.left);return this};var fb=z(\"Firefox\"),gb=Ma()||z(\"iPod\"),hb=z(\"iPad\"),ib=z(\"Android\")&&!(Ta()||z(\"Firefox\")||Sa()||z(\"Silk\")),jb=Ta(),kb=z(\"Safari\")&&!(Ta()||z(\"Coast\")||Sa()||z(\"Edge\")||z(\"Silk\")||z(\"Android\"))&&!(Ma()||z(\"iPad\")||z(\"iPod\"));var F=E&&!(9<=Number(db)),lb=E&&!(8<=Number(db));function mb(a,b){if(!a||!b)return!1;if(a.contains&&1==b.nodeType)return a==b||a.contains(b);if(\"undefined\"!=typeof a.compareDocumentPosition)return a==b||!!(a.compareDocumentPosition(b)&16);for(;b&&a!=b;)b=b.parentNode;return b==a}\nfunction nb(a,b){if(a==b)return 0;if(a.compareDocumentPosition)return a.compareDocumentPosition(b)&2?1:-1;if(E&&!(9<=Number(db))){if(9==a.nodeType)return-1;if(9==b.nodeType)return 1}if(\"sourceIndex\"in a||a.parentNode&&\"sourceIndex\"in a.parentNode){var c=1==a.nodeType,d=1==b.nodeType;if(c&&d)return a.sourceIndex-b.sourceIndex;var e=a.parentNode,f=b.parentNode;return e==f?ob(a,b):!c&&mb(e,b)?-1*pb(a,b):!d&&mb(f,a)?pb(b,a):(c?a.sourceIndex:e.sourceIndex)-(d?b.sourceIndex:f.sourceIndex)}d=G(a);c=d.createRange();\nc.selectNode(a);c.collapse(!0);d=d.createRange();d.selectNode(b);d.collapse(!0);return c.compareBoundaryPoints(k.Range.START_TO_END,d)}function pb(a,b){var c=a.parentNode;if(c==b)return-1;for(var d=b;d.parentNode!=c;)d=d.parentNode;return ob(d,a)}function ob(a,b){for(var c=b;c=c.previousSibling;)if(c==a)return-1;return 1}function G(a){return 9==a.nodeType?a:a.ownerDocument||a.document}function qb(a,b){a=a.parentNode;for(var c=0;a;){if(b(a))return a;a=a.parentNode;c++}return null}\nfunction rb(a){this.a=a||k.document||document};function H(a,b,c,d){this.left=a;this.top=b;this.width=c;this.height=d}H.prototype.clone=function(){return new H(this.left,this.top,this.width,this.height)};H.prototype.toString=function(){return\"(\"+this.left+\", \"+this.top+\" - \"+this.width+\"w x \"+this.height+\"h)\"};H.prototype.ceil=function(){this.left=Math.ceil(this.left);this.top=Math.ceil(this.top);this.width=Math.ceil(this.width);this.height=Math.ceil(this.height);return this};\nH.prototype.floor=function(){this.left=Math.floor(this.left);this.top=Math.floor(this.top);this.width=Math.floor(this.width);this.height=Math.floor(this.height);return this};H.prototype.round=function(){this.left=Math.round(this.left);this.top=Math.round(this.top);this.width=Math.round(this.width);this.height=Math.round(this.height);return this};function sb(a){return(a=a.exec(x))?a[1]:\"\"}var tb=function(){if(fb)return sb(/Firefox\\/([0-9.]+)/);if(E||Va||Ua)return $a;if(jb)return sb(/Chrome\\/([0-9.]+)/);if(kb&&!(Ma()||z(\"iPad\")||z(\"iPod\")))return sb(/Version\\/([0-9.]+)/);if(gb||hb){var a=/Version\\/(\\S+).*Mobile\\/(\\S+)/.exec(x);if(a)return a[1]+\".\"+a[2]}else if(ib)return(a=sb(/Android\\s+([0-9.]+)/))?a:sb(/Version\\/([0-9.]+)/);return\"\"}();function ub(a,b,c,d){this.a=a;this.nodeName=c;this.nodeValue=d;this.nodeType=2;this.parentNode=this.ownerElement=b}function vb(a,b){var c=lb&&\"href\"==b.nodeName?a.getAttribute(b.nodeName,2):b.nodeValue;return new ub(b,a,b.nodeName,c)};var wb;function xb(a){yb?wb(a):ib?oa(zb,a):oa(tb,a)}var yb=function(){if(!Wa)return!1;var a=k.Components;if(!a)return!1;try{if(!a.classes)return!1}catch(e){return!1}var b=a.classes,a=a.interfaces,c=b[\"@mozilla.org/xpcom/version-comparator;1\"].getService(a.nsIVersionComparator),d=b[\"@mozilla.org/xre/app-info;1\"].getService(a.nsIXULAppInfo).version;wb=function(a){c.compare(d,\"\"+a)};return!0}(),Ab;if(ib){var Bb=/Android\\s+([0-9\\.]+)/.exec(x);Ab=Bb?Bb[1]:\"0\"}else Ab=\"0\";var zb=Ab,Cb=E&&!(9<=Number(db));\nib&&xb(2.3);ib&&xb(4);kb&&xb(6);function I(a){var b=null,c=a.nodeType;1==c&&(b=a.textContent,b=void 0==b||null==b?a.innerText:b,b=void 0==b||null==b?\"\":b);if(\"string\"!=typeof b)if(F&&\"title\"==a.nodeName.toLowerCase()&&1==c)b=a.text;else if(9==c||1==c){a=9==c?a.documentElement:a.firstChild;for(var c=0,d=[],b=\"\";a;){do 1!=a.nodeType&&(b+=a.nodeValue),F&&\"title\"==a.nodeName.toLowerCase()&&(b+=a.text),d[c++]=a;while(a=a.firstChild);for(;c&&!(a=d[--c].nextSibling););}}else b=a.nodeValue;return\"\"+b}\nfunction J(a,b,c){if(null===b)return!0;try{if(!a.getAttribute)return!1}catch(d){return!1}lb&&\"class\"==b&&(b=\"className\");return null==c?!!a.getAttribute(b):a.getAttribute(b,2)==c}function Db(a,b,c,d,e){return(F?Eb:Fb).call(null,a,b,n(c)?c:null,n(d)?d:null,e||new K)}\nfunction Eb(a,b,c,d,e){if(a instanceof Aa||8==a.b||c&&null===a.b){var f=b.all;if(!f)return e;a=Gb(a);if(\"*\"!=a&&(f=b.getElementsByTagName(a),!f))return e;if(c){for(var g=[],h=0;b=f[h++];)J(b,c,d)&&g.push(b);f=g}for(h=0;b=f[h++];)\"*\"==a&&\"!\"==b.tagName||L(e,b);return e}Hb(a,b,c,d,e);return e}\nfunction Fb(a,b,c,d,e){b.getElementsByName&&d&&\"name\"==c&&!E?(b=b.getElementsByName(d),C(b,function(b){a.a(b)&&L(e,b)})):b.getElementsByClassName&&d&&\"class\"==c?(b=b.getElementsByClassName(d),C(b,function(b){b.className==d&&a.a(b)&&L(e,b)})):a instanceof A?Hb(a,b,c,d,e):b.getElementsByTagName&&(b=b.getElementsByTagName(a.f()),C(b,function(a){J(a,c,d)&&L(e,a)}));return e}\nfunction Ib(a,b,c,d,e){var f;if((a instanceof Aa||8==a.b||c&&null===a.b)&&(f=b.childNodes)){var g=Gb(a);if(\"*\"!=g&&(f=Fa(f,function(a){return a.tagName&&a.tagName.toLowerCase()==g}),!f))return e;c&&(f=Fa(f,function(a){return J(a,c,d)}));C(f,function(a){\"*\"==g&&(\"!\"==a.tagName||\"*\"==g&&1!=a.nodeType)||L(e,a)});return e}return Jb(a,b,c,d,e)}function Jb(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)J(b,c,d)&&a.a(b)&&L(e,b);return e}\nfunction Hb(a,b,c,d,e){for(b=b.firstChild;b;b=b.nextSibling)J(b,c,d)&&a.a(b)&&L(e,b),Hb(a,b,c,d,e)}function Gb(a){if(a instanceof A){if(8==a.b)return\"!\";if(null===a.b)return\"*\"}return a.f()};function M(a,b){return!!a&&1==a.nodeType&&(!b||a.tagName.toUpperCase()==b)};function K(){this.b=this.a=null;this.l=0}function Kb(a){this.node=a;this.a=this.b=null}function Lb(a,b){if(!a.a)return b;if(!b.a)return a;for(var c=a.a,d=b.a,e=null,f,g=0;c&&d;){f=c.node;var h=d.node;f==h||f instanceof ub&&h instanceof ub&&f.a==h.a?(f=c,c=c.a,d=d.a):0<nb(c.node,d.node)?(f=d,d=d.a):(f=c,c=c.a);(f.b=e)?e.a=f:a.a=f;e=f;g++}for(f=c||d;f;)f.b=e,e=e.a=f,g++,f=f.a;a.b=e;a.l=g;return a}K.prototype.unshift=function(a){a=new Kb(a);a.a=this.a;this.b?this.a.b=a:this.a=this.b=a;this.a=a;this.l++};\nfunction L(a,b){var c=new Kb(b);c.b=a.b;a.a?a.b.a=c:a.a=a.b=c;a.b=c;a.l++}function Mb(a){return(a=a.a)?a.node:null}function Nb(a){return(a=Mb(a))?I(a):\"\"}function N(a,b){return new Ob(a,!!b)}function Ob(a,b){this.f=a;this.b=(this.c=b)?a.b:a.a;this.a=null}function O(a){var b=a.b;if(b){var c=a.a=b;a.b=a.c?b.b:b.a;return c.node}return null};function P(a){this.i=a;this.b=this.g=!1;this.f=null}function B(a){return\"\\n  \"+a.toString().split(\"\\n\").join(\"\\n  \")}function Pb(a,b){a.g=b}function Qb(a,b){a.b=b}function R(a,b){var c=a.a(b);return c instanceof K?+Nb(c):+c}function S(a,b){var c=a.a(b);return c instanceof K?Nb(c):\"\"+c}function Rb(a,b){var c=a.a(b);return c instanceof K?!!c.l:!!c};function Sb(a,b,c){P.call(this,a.i);this.c=a;this.h=b;this.o=c;this.g=b.g||c.g;this.b=b.b||c.b;this.c==Tb&&(c.b||c.g||4==c.i||0==c.i||!b.f?b.b||b.g||4==b.i||0==b.i||!c.f||(this.f={name:c.f.name,s:b}):this.f={name:b.f.name,s:c})}q(Sb,P);\nfunction Ub(a,b,c,d,e){b=b.a(d);c=c.a(d);var f;if(b instanceof K&&c instanceof K){b=N(b);for(d=O(b);d;d=O(b))for(e=N(c),f=O(e);f;f=O(e))if(a(I(d),I(f)))return!0;return!1}if(b instanceof K||c instanceof K){b instanceof K?(e=b,d=c):(e=c,d=b);f=N(e);for(var g=typeof d,h=O(f);h;h=O(f)){switch(g){case \"number\":h=+I(h);break;case \"boolean\":h=!!I(h);break;case \"string\":h=I(h);break;default:throw Error(\"Illegal primitive type for comparison.\");}if(e==b&&a(h,d)||e==c&&a(d,h))return!0}return!1}return e?\"boolean\"==\ntypeof b||\"boolean\"==typeof c?a(!!b,!!c):\"number\"==typeof b||\"number\"==typeof c?a(+b,+c):a(b,c):a(+b,+c)}Sb.prototype.a=function(a){return this.c.m(this.h,this.o,a)};Sb.prototype.toString=function(){var a=\"Binary Expression: \"+this.c,a=a+B(this.h);return a+=B(this.o)};function Vb(a,b,c,d){this.a=a;this.A=b;this.i=c;this.m=d}Vb.prototype.toString=function(){return this.a};var Wb={};\nfunction T(a,b,c,d){if(Wb.hasOwnProperty(a))throw Error(\"Binary operator already created: \"+a);a=new Vb(a,b,c,d);return Wb[a.toString()]=a}T(\"div\",6,1,function(a,b,c){return R(a,c)/R(b,c)});T(\"mod\",6,1,function(a,b,c){return R(a,c)%R(b,c)});T(\"*\",6,1,function(a,b,c){return R(a,c)*R(b,c)});T(\"+\",5,1,function(a,b,c){return R(a,c)+R(b,c)});T(\"-\",5,1,function(a,b,c){return R(a,c)-R(b,c)});T(\"<\",4,2,function(a,b,c){return Ub(function(a,b){return a<b},a,b,c)});\nT(\">\",4,2,function(a,b,c){return Ub(function(a,b){return a>b},a,b,c)});T(\"<=\",4,2,function(a,b,c){return Ub(function(a,b){return a<=b},a,b,c)});T(\">=\",4,2,function(a,b,c){return Ub(function(a,b){return a>=b},a,b,c)});var Tb=T(\"=\",3,2,function(a,b,c){return Ub(function(a,b){return a==b},a,b,c,!0)});T(\"!=\",3,2,function(a,b,c){return Ub(function(a,b){return a!=b},a,b,c,!0)});T(\"and\",2,2,function(a,b,c){return Rb(a,c)&&Rb(b,c)});T(\"or\",1,2,function(a,b,c){return Rb(a,c)||Rb(b,c)});function Xb(a,b){if(b.a.length&&4!=a.i)throw Error(\"Primary expression must evaluate to nodeset if filter has predicate(s).\");P.call(this,a.i);this.c=a;this.h=b;this.g=a.g;this.b=a.b}q(Xb,P);Xb.prototype.a=function(a){a=this.c.a(a);return Yb(this.h,a)};Xb.prototype.toString=function(){var a;a=\"Filter:\"+B(this.c);return a+=B(this.h)};function Zb(a,b){if(b.length<a.B)throw Error(\"Function \"+a.j+\" expects at least\"+a.B+\" arguments, \"+b.length+\" given\");if(null!==a.v&&b.length>a.v)throw Error(\"Function \"+a.j+\" expects at most \"+a.v+\" arguments, \"+b.length+\" given\");a.C&&C(b,function(b,d){if(4!=b.i)throw Error(\"Argument \"+d+\" to function \"+a.j+\" is not of type Nodeset: \"+b);});P.call(this,a.i);this.h=a;this.c=b;Pb(this,a.g||Ha(b,function(a){return a.g}));Qb(this,a.F&&!b.length||a.D&&!!b.length||Ha(b,function(a){return a.b}))}\nq(Zb,P);Zb.prototype.a=function(a){return this.h.m.apply(null,Ka(a,this.c))};Zb.prototype.toString=function(){var a=\"Function: \"+this.h;if(this.c.length)var b=Ga(this.c,function(a,b){return a+B(b)},\"Arguments:\"),a=a+B(b);return a};function $b(a,b,c,d,e,f,g,h,p){this.j=a;this.i=b;this.g=c;this.F=d;this.D=e;this.m=f;this.B=g;this.v=l(h)?h:g;this.C=!!p}$b.prototype.toString=function(){return this.j};var ac={};\nfunction U(a,b,c,d,e,f,g,h){if(ac.hasOwnProperty(a))throw Error(\"Function already created: \"+a+\".\");ac[a]=new $b(a,b,c,d,!1,e,f,g,h)}U(\"boolean\",2,!1,!1,function(a,b){return Rb(b,a)},1);U(\"ceiling\",1,!1,!1,function(a,b){return Math.ceil(R(b,a))},1);U(\"concat\",3,!1,!1,function(a,b){return Ga(La(arguments,1),function(b,d){return b+S(d,a)},\"\")},2,null);U(\"contains\",2,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);return-1!=b.indexOf(a)},2);U(\"count\",1,!1,!1,function(a,b){return b.a(a).l},1,1,!0);\nU(\"false\",2,!1,!1,function(){return!1},0);U(\"floor\",1,!1,!1,function(a,b){return Math.floor(R(b,a))},1);U(\"id\",4,!1,!1,function(a,b){function c(a){if(F){var b=e.all[a];if(b){if(b.nodeType&&a==b.id)return b;if(b.length)return Ja(b,function(b){return a==b.id})}return null}return e.getElementById(a)}var d=a.a,e=9==d.nodeType?d:d.ownerDocument,d=S(b,a).split(/\\s+/),f=[];C(d,function(a){a=c(a);!a||0<=Ea(f,a)||f.push(a)});f.sort(nb);var g=new K;C(f,function(a){L(g,a)});return g},1);\nU(\"lang\",2,!1,!1,function(){return!1},1);U(\"last\",1,!0,!1,function(a){if(1!=arguments.length)throw Error(\"Function last expects ()\");return a.f},0);U(\"local-name\",3,!1,!0,function(a,b){var c=b?Mb(b.a(a)):a.a;return c?c.localName||c.nodeName.toLowerCase():\"\"},0,1,!0);U(\"name\",3,!1,!0,function(a,b){var c=b?Mb(b.a(a)):a.a;return c?c.nodeName.toLowerCase():\"\"},0,1,!0);U(\"namespace-uri\",3,!0,!1,function(){return\"\"},0,1,!0);\nU(\"normalize-space\",3,!1,!0,function(a,b){return(b?S(b,a):I(a.a)).replace(/[\\s\\xa0]+/g,\" \").replace(/^\\s+|\\s+$/g,\"\")},0,1);U(\"not\",2,!1,!1,function(a,b){return!Rb(b,a)},1);U(\"number\",1,!1,!0,function(a,b){return b?R(b,a):+I(a.a)},0,1);U(\"position\",1,!0,!1,function(a){return a.b},0);U(\"round\",1,!1,!1,function(a,b){return Math.round(R(b,a))},1);U(\"starts-with\",2,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);return!b.lastIndexOf(a,0)},2);U(\"string\",3,!1,!0,function(a,b){return b?S(b,a):I(a.a)},0,1);\nU(\"string-length\",1,!1,!0,function(a,b){return(b?S(b,a):I(a.a)).length},0,1);U(\"substring\",3,!1,!1,function(a,b,c,d){c=R(c,a);if(isNaN(c)||Infinity==c||-Infinity==c)return\"\";d=d?R(d,a):Infinity;if(isNaN(d)||-Infinity===d)return\"\";c=Math.round(c)-1;var e=Math.max(c,0);a=S(b,a);return Infinity==d?a.substring(e):a.substring(e,c+Math.round(d))},2,3);U(\"substring-after\",3,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);c=b.indexOf(a);return-1==c?\"\":b.substring(c+a.length)},2);\nU(\"substring-before\",3,!1,!1,function(a,b,c){b=S(b,a);a=S(c,a);a=b.indexOf(a);return-1==a?\"\":b.substring(0,a)},2);U(\"sum\",1,!1,!1,function(a,b){for(var c=N(b.a(a)),d=0,e=O(c);e;e=O(c))d+=+I(e);return d},1,1,!0);U(\"translate\",3,!1,!1,function(a,b,c,d){b=S(b,a);c=S(c,a);var e=S(d,a);a={};for(d=0;d<c.length;d++){var f=c.charAt(d);f in a||(a[f]=e.charAt(d))}c=\"\";for(d=0;d<b.length;d++)f=b.charAt(d),c+=f in a?a[f]:f;return c},3);U(\"true\",2,!1,!1,function(){return!0},0);function bc(a){P.call(this,3);this.c=a.substring(1,a.length-1)}q(bc,P);bc.prototype.a=function(){return this.c};bc.prototype.toString=function(){return\"Literal: \"+this.c};function cc(a){P.call(this,1);this.c=a}q(cc,P);cc.prototype.a=function(){return this.c};cc.prototype.toString=function(){return\"Number: \"+this.c};function dc(a,b){P.call(this,a.i);this.h=a;this.c=b;this.g=a.g;this.b=a.b;if(1==this.c.length){var c=this.c[0];c.u||c.c!=ec||(c=c.o,\"*\"!=c.f()&&(this.f={name:c.f(),s:null}))}}q(dc,P);function fc(){P.call(this,4)}q(fc,P);fc.prototype.a=function(a){var b=new K;a=a.a;9==a.nodeType?L(b,a):L(b,a.ownerDocument);return b};fc.prototype.toString=function(){return\"Root Helper Expression\"};function gc(){P.call(this,4)}q(gc,P);gc.prototype.a=function(a){var b=new K;L(b,a.a);return b};gc.prototype.toString=function(){return\"Context Helper Expression\"};\nfunction hc(a){return\"/\"==a||\"//\"==a}dc.prototype.a=function(a){var b=this.h.a(a);if(!(b instanceof K))throw Error(\"Filter expression must evaluate to nodeset.\");a=this.c;for(var c=0,d=a.length;c<d&&b.l;c++){var e=a[c],f=N(b,e.c.a),g;if(e.g||e.c!=ic)if(e.g||e.c!=jc)for(g=O(f),b=e.a(new ra(g));g=O(f);)g=e.a(new ra(g)),b=Lb(b,g);else g=O(f),b=e.a(new ra(g));else{for(g=O(f);(b=O(f))&&(!g.contains||g.contains(b))&&b.compareDocumentPosition(g)&8;g=b);b=e.a(new ra(g))}}return b};\ndc.prototype.toString=function(){var a;a=\"Path Expression:\"+B(this.h);if(this.c.length){var b=Ga(this.c,function(a,b){return a+B(b)},\"Steps:\");a+=B(b)}return a};function kc(a,b){this.a=a;this.b=!!b}\nfunction Yb(a,b,c){for(c=c||0;c<a.a.length;c++)for(var d=a.a[c],e=N(b),f=b.l,g,h=0;g=O(e);h++){var p=a.b?f-h:h+1;g=d.a(new ra(g,p,f));if(\"number\"==typeof g)p=p==g;else if(\"string\"==typeof g||\"boolean\"==typeof g)p=!!g;else if(g instanceof K)p=0<g.l;else throw Error(\"Predicate.evaluate returned an unexpected type.\");if(!p){p=e;g=p.f;var w=p.a;if(!w)throw Error(\"Next must be called at least once before remove.\");var m=w.b,w=w.a;m?m.a=w:g.a=w;w?w.b=m:g.b=m;g.l--;p.a=null}}return b}\nkc.prototype.toString=function(){return Ga(this.a,function(a,b){return a+B(b)},\"Predicates:\")};function lc(a){P.call(this,1);this.c=a;this.g=a.g;this.b=a.b}q(lc,P);lc.prototype.a=function(a){return-R(this.c,a)};lc.prototype.toString=function(){return\"Unary Expression: -\"+B(this.c)};function mc(a){P.call(this,4);this.c=a;Pb(this,Ha(this.c,function(a){return a.g}));Qb(this,Ha(this.c,function(a){return a.b}))}q(mc,P);mc.prototype.a=function(a){var b=new K;C(this.c,function(c){c=c.a(a);if(!(c instanceof K))throw Error(\"Path expression must evaluate to NodeSet.\");b=Lb(b,c)});return b};mc.prototype.toString=function(){return Ga(this.c,function(a,b){return a+B(b)},\"Union Expression:\")};function nc(a,b,c,d){P.call(this,4);this.c=a;this.o=b;this.h=c||new kc([]);this.u=!!d;b=this.h;b=0<b.a.length?b.a[0].f:null;a.b&&b&&(a=b.name,a=F?a.toLowerCase():a,this.f={name:a,s:b.s});a:{a=this.h;for(b=0;b<a.a.length;b++)if(c=a.a[b],c.g||1==c.i||0==c.i){a=!0;break a}a=!1}this.g=a}q(nc,P);\nnc.prototype.a=function(a){var b=a.a,c=this.f,d=null,e=null,f=0;c&&(d=c.name,e=c.s?S(c.s,a):null,f=1);if(this.u)if(this.g||this.c!=oc)if(b=N((new nc(pc,new A(\"node\"))).a(a)),c=O(b))for(a=this.m(c,d,e,f);c=O(b);)a=Lb(a,this.m(c,d,e,f));else a=new K;else a=Db(this.o,b,d,e),a=Yb(this.h,a,f);else a=this.m(a.a,d,e,f);return a};nc.prototype.m=function(a,b,c,d){a=this.c.f(this.o,a,b,c);return a=Yb(this.h,a,d)};\nnc.prototype.toString=function(){var a;a=\"Step:\"+B(\"Operator: \"+(this.u?\"//\":\"/\"));this.c.j&&(a+=B(\"Axis: \"+this.c));a+=B(this.o);if(this.h.a.length){var b=Ga(this.h.a,function(a,b){return a+B(b)},\"Predicates:\");a+=B(b)}return a};function qc(a,b,c,d){this.j=a;this.f=b;this.a=c;this.b=d}qc.prototype.toString=function(){return this.j};var rc={};function V(a,b,c,d){if(rc.hasOwnProperty(a))throw Error(\"Axis already created: \"+a);b=new qc(a,b,c,!!d);return rc[a]=b}\nV(\"ancestor\",function(a,b){for(var c=new K,d=b;d=d.parentNode;)a.a(d)&&c.unshift(d);return c},!0);V(\"ancestor-or-self\",function(a,b){var c=new K,d=b;do a.a(d)&&c.unshift(d);while(d=d.parentNode);return c},!0);\nvar ec=V(\"attribute\",function(a,b){var c=new K,d=a.f();if(\"style\"==d&&F&&b.style)return L(c,new ub(b.style,b,\"style\",b.style.cssText)),c;var e=b.attributes;if(e)if(a instanceof A&&null===a.b||\"*\"==d)for(var d=0,f;f=e[d];d++)F?f.nodeValue&&L(c,vb(b,f)):L(c,f);else(f=e.getNamedItem(d))&&(F?f.nodeValue&&L(c,vb(b,f)):L(c,f));return c},!1),oc=V(\"child\",function(a,b,c,d,e){return(F?Ib:Jb).call(null,a,b,n(c)?c:null,n(d)?d:null,e||new K)},!1,!0);V(\"descendant\",Db,!1,!0);\nvar pc=V(\"descendant-or-self\",function(a,b,c,d){var e=new K;J(b,c,d)&&a.a(b)&&L(e,b);return Db(a,b,c,d,e)},!1,!0),ic=V(\"following\",function(a,b,c,d){var e=new K;do for(var f=b;f=f.nextSibling;)J(f,c,d)&&a.a(f)&&L(e,f),e=Db(a,f,c,d,e);while(b=b.parentNode);return e},!1,!0);V(\"following-sibling\",function(a,b){for(var c=new K,d=b;d=d.nextSibling;)a.a(d)&&L(c,d);return c},!1);V(\"namespace\",function(){return new K},!1);\nvar sc=V(\"parent\",function(a,b){var c=new K;if(9==b.nodeType)return c;if(2==b.nodeType)return L(c,b.ownerElement),c;var d=b.parentNode;a.a(d)&&L(c,d);return c},!1),jc=V(\"preceding\",function(a,b,c,d){var e=new K,f=[];do f.unshift(b);while(b=b.parentNode);for(var g=1,h=f.length;g<h;g++){var p=[];for(b=f[g];b=b.previousSibling;)p.unshift(b);for(var w=0,m=p.length;w<m;w++)b=p[w],J(b,c,d)&&a.a(b)&&L(e,b),e=Db(a,b,c,d,e)}return e},!0,!0);\nV(\"preceding-sibling\",function(a,b){for(var c=new K,d=b;d=d.previousSibling;)a.a(d)&&c.unshift(d);return c},!0);var tc=V(\"self\",function(a,b){var c=new K;a.a(b)&&L(c,b);return c},!1);function uc(a,b){this.a=a;this.b=b}function vc(a){for(var b,c=[];;){W(a,\"Missing right hand side of binary expression.\");b=wc(a);var d=v(a.a);if(!d)break;var e=(d=Wb[d]||null)&&d.A;if(!e){a.a.a--;break}for(;c.length&&e<=c[c.length-1].A;)b=new Sb(c.pop(),c.pop(),b);c.push(b,d)}for(;c.length;)b=new Sb(c.pop(),c.pop(),b);return b}function W(a,b){if(wa(a.a))throw Error(b);}function xc(a,b){var c=v(a.a);if(c!=b)throw Error(\"Bad token, expected: \"+b+\" got: \"+c);}\nfunction yc(a){a=v(a.a);if(\")\"!=a)throw Error(\"Bad token: \"+a);}function zc(a){a=v(a.a);if(2>a.length)throw Error(\"Unclosed literal string\");return new bc(a)}\nfunction Ac(a){var b,c=[],d;if(hc(t(a.a))){b=v(a.a);d=t(a.a);if(\"/\"==b&&(wa(a.a)||\".\"!=d&&\"..\"!=d&&\"@\"!=d&&\"*\"!=d&&!/(?![0-9])[\\w]/.test(d)))return new fc;d=new fc;W(a,\"Missing next location step.\");b=Bc(a,b);c.push(b)}else{a:{b=t(a.a);d=b.charAt(0);switch(d){case \"$\":throw Error(\"Variable reference not allowed in HTML XPath\");case \"(\":v(a.a);b=vc(a);W(a,'unclosed \"(\"');xc(a,\")\");break;case '\"':case \"'\":b=zc(a);break;default:if(isNaN(+b))if(!za(b)&&/(?![0-9])[\\w]/.test(d)&&\"(\"==t(a.a,1)){b=v(a.a);\nb=ac[b]||null;v(a.a);for(d=[];\")\"!=t(a.a);){W(a,\"Missing function argument list.\");d.push(vc(a));if(\",\"!=t(a.a))break;v(a.a)}W(a,\"Unclosed function argument list.\");yc(a);b=new Zb(b,d)}else{b=null;break a}else b=new cc(+v(a.a))}\"[\"==t(a.a)&&(d=new kc(Cc(a)),b=new Xb(b,d))}if(b)if(hc(t(a.a)))d=b;else return b;else b=Bc(a,\"/\"),d=new gc,c.push(b)}for(;hc(t(a.a));)b=v(a.a),W(a,\"Missing next location step.\"),b=Bc(a,b),c.push(b);return new dc(d,c)}\nfunction Bc(a,b){var c,d,e;if(\"/\"!=b&&\"//\"!=b)throw Error('Step op should be \"/\" or \"//\"');if(\".\"==t(a.a))return d=new nc(tc,new A(\"node\")),v(a.a),d;if(\"..\"==t(a.a))return d=new nc(sc,new A(\"node\")),v(a.a),d;var f;if(\"@\"==t(a.a))f=ec,v(a.a),W(a,\"Missing attribute name\");else if(\"::\"==t(a.a,1)){if(!/(?![0-9])[\\w]/.test(t(a.a).charAt(0)))throw Error(\"Bad token: \"+v(a.a));c=v(a.a);f=rc[c]||null;if(!f)throw Error(\"No axis with name: \"+c);v(a.a);W(a,\"Missing node name\")}else f=oc;c=t(a.a);if(/(?![0-9])[\\w\\*]/.test(c.charAt(0)))if(\"(\"==\nt(a.a,1)){if(!za(c))throw Error(\"Invalid node type: \"+c);c=v(a.a);if(!za(c))throw Error(\"Invalid type name: \"+c);xc(a,\"(\");W(a,\"Bad nodetype\");e=t(a.a).charAt(0);var g=null;if('\"'==e||\"'\"==e)g=zc(a);W(a,\"Bad nodetype\");yc(a);c=new A(c,g)}else if(c=v(a.a),e=c.indexOf(\":\"),-1==e)c=new Aa(c);else{var g=c.substring(0,e),h;if(\"*\"==g)h=\"*\";else if(h=a.b(g),!h)throw Error(\"Namespace prefix not declared: \"+g);c=c.substr(e+1);c=new Aa(c,h)}else throw Error(\"Bad token: \"+v(a.a));e=new kc(Cc(a),f.a);return d||\nnew nc(f,c,e,\"//\"==b)}function Cc(a){for(var b=[];\"[\"==t(a.a);){v(a.a);W(a,\"Missing predicate expression.\");var c=vc(a);b.push(c);W(a,\"Unclosed predicate expression.\");xc(a,\"]\")}return b}function wc(a){if(\"-\"==t(a.a))return v(a.a),new lc(wc(a));var b=Ac(a);if(\"|\"!=t(a.a))a=b;else{for(b=[b];\"|\"==v(a.a);)W(a,\"Missing next union location path.\"),b.push(Ac(a));a.a.a--;a=new mc(b)}return a};function Dc(a,b){if(!a.length)throw Error(\"Empty XPath expression.\");var c=ta(a);if(wa(c))throw Error(\"Invalid XPath expression.\");b?\"function\"==ea(b)||(b=ha(b.lookupNamespaceURI,b)):b=function(){return null};var d=vc(new uc(c,b));if(!wa(c))throw Error(\"Bad token: \"+v(c));this.evaluate=function(a,b){var c=d.a(new ra(a));return new X(c,b)}}\nfunction X(a,b){if(!b)if(a instanceof K)b=4;else if(\"string\"==typeof a)b=2;else if(\"number\"==typeof a)b=1;else if(\"boolean\"==typeof a)b=3;else throw Error(\"Unexpected evaluation result.\");if(2!=b&&1!=b&&3!=b&&!(a instanceof K))throw Error(\"value could not be converted to the specified type\");this.resultType=b;var c;switch(b){case 2:this.stringValue=a instanceof K?Nb(a):\"\"+a;break;case 1:this.numberValue=a instanceof K?+Nb(a):+a;break;case 3:this.booleanValue=a instanceof K?0<a.l:!!a;break;case 4:case 5:case 6:case 7:var d=\nN(a);c=[];for(var e=O(d);e;e=O(d))c.push(e instanceof ub?e.a:e);this.snapshotLength=a.l;this.invalidIteratorState=!1;break;case 8:case 9:d=Mb(a);this.singleNodeValue=d instanceof ub?d.a:d;break;default:throw Error(\"Unknown XPathResult type.\");}var f=0;this.iterateNext=function(){if(4!=b&&5!=b)throw Error(\"iterateNext called with wrong result type\");return f>=c.length?null:c[f++]};this.snapshotItem=function(a){if(6!=b&&7!=b)throw Error(\"snapshotItem called with wrong result type\");return a>=c.length||\n0>a?null:c[a]}}X.ANY_TYPE=0;X.NUMBER_TYPE=1;X.STRING_TYPE=2;X.BOOLEAN_TYPE=3;X.UNORDERED_NODE_ITERATOR_TYPE=4;X.ORDERED_NODE_ITERATOR_TYPE=5;X.UNORDERED_NODE_SNAPSHOT_TYPE=6;X.ORDERED_NODE_SNAPSHOT_TYPE=7;X.ANY_UNORDERED_NODE_TYPE=8;X.FIRST_ORDERED_NODE_TYPE=9;function Ec(a){this.lookupNamespaceURI=Ba(a)}\nfunction Fc(a,b){var c=a||k,d=c.Document&&c.Document.prototype||c.document;if(!d.evaluate||b)c.XPathResult=X,d.evaluate=function(a,b,c,d){return(new Dc(a,c)).evaluate(b,d)},d.createExpression=function(a,b){return new Dc(a,b)},d.createNSResolver=function(a){return new Ec(a)}}da(\"wgxpath.install\",Fc);var Gc=function(){var a={I:\"http://www.w3.org/2000/svg\"};return function(b){return a[b]||null}}();\nfunction Hc(a,b){var c=G(a);if(!c.documentElement)return null;(E||ib)&&Fc(c?c.parentWindow||c.defaultView:window);try{var d=c.createNSResolver?c.createNSResolver(c.documentElement):Gc;if(E&&!bb(7))return c.evaluate.call(c,b,a,d,9,null);if(!E||9<=Number(db)){for(var e={},f=c.getElementsByTagName(\"*\"),g=0;g<f.length;++g){var h=f[g],p=h.namespaceURI;if(p&&!e[p]){var w=h.lookupPrefix(p);if(!w)var m=p.match(\".*/(\\\\w+)/?$\"),w=m?m[1]:\"xhtml\";e[p]=w}}var u={},y;for(y in e)u[e[y]]=y;d=function(a){return u[a]||\nnull}}try{return c.evaluate(b,a,d,9,null)}catch(Q){if(\"TypeError\"===Q.name)return d=c.createNSResolver?c.createNSResolver(c.documentElement):Gc,c.evaluate(b,a,d,9,null);throw Q;}}catch(Q){if(!Wa||\"NS_ERROR_ILLEGAL_VALUE\"!=Q.name)throw new ja(32,\"Unable to locate an element with the xpath expression \"+b+\" because of the following error:\\n\"+Q);}}\nfunction Ic(a,b){var c=function(){var c=Hc(b,a);return c?c.singleNodeValue||null:b.selectSingleNode?(c=G(b),c.setProperty&&c.setProperty(\"SelectionLanguage\",\"XPath\"),b.selectSingleNode(a)):null}();if(null!==c&&(!c||1!=c.nodeType))throw new ja(32,'The result of the xpath expression \"'+a+'\" is: '+c+\". It should be an element.\");return c};var Jc=\"function\"===typeof ShadowRoot;function Kc(a){for(a=a.parentNode;a&&1!=a.nodeType&&9!=a.nodeType&&11!=a.nodeType;)a=a.parentNode;return M(a)?a:null}\nfunction Y(a,b){var c=qa(b);if(\"float\"==c||\"cssFloat\"==c||\"styleFloat\"==c)c=Cb?\"styleFloat\":\"cssFloat\";var d;a:{d=c;var e=G(a);if(e.defaultView&&e.defaultView.getComputedStyle&&(e=e.defaultView.getComputedStyle(a,null))){d=e[d]||e.getPropertyValue(d)||\"\";break a}d=\"\"}d=d||Lc(a,c);if(null===d)d=null;else if(0<=Ea(Na,c)){b:{var f=d.match(Qa);if(f){var c=Number(f[1]),e=Number(f[2]),g=Number(f[3]),f=Number(f[4]);if(0<=c&&255>=c&&0<=e&&255>=e&&0<=g&&255>=g&&0<=f&&1>=f){c=[c,e,g,f];break b}}c=null}if(!c)b:{if(g=\nd.match(Ra))if(c=Number(g[1]),e=Number(g[2]),g=Number(g[3]),0<=c&&255>=c&&0<=e&&255>=e&&0<=g&&255>=g){c=[c,e,g,1];break b}c=null}if(!c)b:{c=d.toLowerCase();e=la[c.toLowerCase()];if(!e&&(e=\"#\"==c.charAt(0)?c:\"#\"+c,4==e.length&&(e=e.replace(Oa,\"#$1$1$2$2$3$3\")),!Pa.test(e))){c=null;break b}c=[parseInt(e.substr(1,2),16),parseInt(e.substr(3,2),16),parseInt(e.substr(5,2),16),1]}d=c?\"rgba(\"+c.join(\", \")+\")\":d}return d}\nfunction Lc(a,b){var c=a.currentStyle||a.style,d=c[b];!l(d)&&\"function\"==ea(c.getPropertyValue)&&(d=c.getPropertyValue(b));return\"inherit\"!=d?l(d)?d:null:(c=Kc(a))?Lc(c,b):null}\nfunction Mc(a,b,c){function d(a){var b=Nc(a);return 0<b.height&&0<b.width?!0:M(a,\"PATH\")&&(0<b.height||0<b.width)?(a=Y(a,\"stroke-width\"),!!a&&0<parseInt(a,10)):\"hidden\"!=Y(a,\"overflow\")&&Ha(a.childNodes,function(a){return 3==a.nodeType||M(a)&&d(a)})}function e(a){return Oc(a)==Z&&Ia(a.childNodes,function(a){return!M(a)||e(a)||!d(a)})}if(!M(a))throw Error(\"Argument to isShown must be of type Element\");if(M(a,\"BODY\"))return!0;if(M(a,\"OPTION\")||M(a,\"OPTGROUP\"))return a=qb(a,function(a){return M(a,\"SELECT\")}),\n!!a&&Mc(a,!0,c);var f=Pc(a);if(f)return!!f.w&&0<f.rect.width&&0<f.rect.height&&Mc(f.w,b,c);if(M(a,\"INPUT\")&&\"hidden\"==a.type.toLowerCase()||M(a,\"NOSCRIPT\"))return!1;f=Y(a,\"visibility\");return\"collapse\"!=f&&\"hidden\"!=f&&c(a)&&(b||Qc(a))&&d(a)?!e(a):!1}var Z=\"hidden\";\nfunction Oc(a){function b(a){function b(a){return a==g?!0:!Y(a,\"display\").lastIndexOf(\"inline\",0)||\"absolute\"==c&&\"static\"==Y(a,\"position\")?!1:!0}var c=Y(a,\"position\");if(\"fixed\"==c)return w=!0,a==g?null:g;for(a=Kc(a);a&&!b(a);)a=Kc(a);return a}function c(a){var b=a;if(\"visible\"==p)if(a==g&&h)b=h;else if(a==h)return{x:\"visible\",y:\"visible\"};b={x:Y(b,\"overflow-x\"),y:Y(b,\"overflow-y\")};a==g&&(b.x=\"visible\"==b.x?\"auto\":b.x,b.y=\"visible\"==b.y?\"auto\":b.y);return b}function d(a){if(a==g){var b=(new rb(f)).a;\na=b.scrollingElement?b.scrollingElement:Xa||\"CSS1Compat\"!=b.compatMode?b.body||b.documentElement:b.documentElement;b=b.parentWindow||b.defaultView;a=E&&bb(\"10\")&&b.pageYOffset!=a.scrollTop?new D(a.scrollLeft,a.scrollTop):new D(b.pageXOffset||a.scrollLeft,b.pageYOffset||a.scrollTop)}else a=new D(a.scrollLeft,a.scrollTop);return a}var e=Rc(a),f=G(a),g=f.documentElement,h=f.body,p=Y(g,\"overflow\"),w;for(a=b(a);a;a=b(a)){var m=c(a);if(\"visible\"!=m.x||\"visible\"!=m.y){var u=Nc(a);if(!u.width||!u.height)return Z;\nvar y=e.right<u.left,Q=e.bottom<u.top;if(y&&\"hidden\"==m.x||Q&&\"hidden\"==m.y)return Z;if(y&&\"visible\"!=m.x||Q&&\"visible\"!=m.y){y=d(a);Q=e.bottom<u.top-y.y;if(e.right<u.left-y.x&&\"visible\"!=m.x||Q&&\"visible\"!=m.x)return Z;e=Oc(a);return e==Z?Z:\"scroll\"}y=e.left>=u.left+u.width;u=e.top>=u.top+u.height;if(y&&\"hidden\"==m.x||u&&\"hidden\"==m.y)return Z;if(y&&\"visible\"!=m.x||u&&\"visible\"!=m.y){if(w&&(m=d(a),e.left>=g.scrollWidth-m.x||e.right>=g.scrollHeight-m.y))return Z;e=Oc(a);return e==Z?Z:\"scroll\"}}}return\"none\"}\nfunction Nc(a){var b=Pc(a);if(b)return b.rect;if(M(a,\"HTML\"))return a=G(a),a=((a?a.parentWindow||a.defaultView:window)||window).document,a=\"CSS1Compat\"==a.compatMode?a.documentElement:a.body,a=new ma(a.clientWidth,a.clientHeight),new H(0,0,a.width,a.height);var c;try{c=a.getBoundingClientRect()}catch(d){return new H(0,0,0,0)}b=new H(c.left,c.top,c.right-c.left,c.bottom-c.top);E&&a.ownerDocument.body&&(a=G(a),b.left-=a.documentElement.clientLeft+a.body.clientLeft,b.top-=a.documentElement.clientTop+\na.body.clientTop);return b}function Pc(a){var b=M(a,\"MAP\");if(!b&&!M(a,\"AREA\"))return null;var c=b?a:M(a.parentNode,\"MAP\")?a.parentNode:null,d=null,e=null;c&&c.name&&(d=Ic('/descendant::*[@usemap = \"#'+c.name+'\"]',G(c)))&&(e=Nc(d),b||\"default\"==a.shape.toLowerCase()||(a=Sc(a),b=Math.min(Math.max(a.left,0),e.width),c=Math.min(Math.max(a.top,0),e.height),e=new H(b+e.left,c+e.top,Math.min(a.width,e.width-b),Math.min(a.height,e.height-c))));return{w:d,rect:e||new H(0,0,0,0)}}\nfunction Sc(a){var b=a.shape.toLowerCase();a=a.coords.split(\",\");if(\"rect\"==b&&4==a.length){var b=a[0],c=a[1];return new H(b,c,a[2]-b,a[3]-c)}if(\"circle\"==b&&3==a.length)return b=a[2],new H(a[0]-b,a[1]-b,2*b,2*b);if(\"poly\"==b&&2<a.length){for(var b=a[0],c=a[1],d=b,e=c,f=2;f+1<a.length;f+=2)b=Math.min(b,a[f]),d=Math.max(d,a[f]),c=Math.min(c,a[f+1]),e=Math.max(e,a[f+1]);return new H(b,c,d-b,e-c)}return new H(0,0,0,0)}function Rc(a){a=Nc(a);return new eb(a.top,a.left+a.width,a.top+a.height,a.left)}\nfunction Qc(a){if(Cb){if(\"relative\"==Y(a,\"position\"))return 1;a=Y(a,\"filter\");return(a=a.match(/^alpha\\(opacity=(\\d*)\\)/)||a.match(/^progid:DXImageTransform.Microsoft.Alpha\\(Opacity=(\\d*)\\)/))?Number(a[1])/100:1}return Tc(a)}function Tc(a){var b=1,c=Y(a,\"opacity\");c&&(b=Number(c));(a=Kc(a))&&(b*=Tc(a));return b};da(\"_\",function(a,b){var c;c=Jc?function(b){if(\"none\"==Y(b,\"display\"))return!1;var e;do{e=b.parentNode;if(b.getDestinationInsertionPoints){var f=b.getDestinationInsertionPoints();0<f.length&&(e=f[f.length-1])}if(e instanceof ShadowRoot){if(e.host.shadowRoot!=e)return!1;e=e.host}else if(9==e.nodeType||11==e.nodeType)e=null}while(a&&1!=a.nodeType);return!e||c(e)}:function(a){if(\"none\"==Y(a,\"display\"))return!1;a=Kc(a);return!a||c(a)};return Mc(a,!!b,c)});; return this._.apply(null,arguments);}.apply({navigator:typeof window!='undefined'?window.navigator:null,document:typeof window!='undefined'?window.document:null}, arguments);};\n"

/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines an {@linkplain cmd.Executor command executor} that
	 * communicates with a remote end using HTTP + JSON.
	 */

	'use strict';

	const http = __webpack_require__(41);
	const https = __webpack_require__(81);
	const url = __webpack_require__(75);

	const httpLib = __webpack_require__(96);


	/**
	 * @typedef {{protocol: (?string|undefined),
	 *            auth: (?string|undefined),
	 *            hostname: (?string|undefined),
	 *            host: (?string|undefined),
	 *            port: (?string|undefined),
	 *            path: (?string|undefined),
	 *            pathname: (?string|undefined)}}
	 */
	var RequestOptions;


	/**
	 * @param {string} aUrl The request URL to parse.
	 * @return {RequestOptions} The request options.
	 * @throws {Error} if the URL does not include a hostname.
	 */
	function getRequestOptions(aUrl) {
	  let options = url.parse(aUrl);
	  if (!options.hostname) {
	    throw new Error('Invalid URL: ' + aUrl);
	  }
	  // Delete the search and has portions as they are not used.
	  options.search = null;
	  options.hash = null;
	  options.path = options.pathname;
	  return options;
	}


	/**
	 * A basic HTTP client used to send messages to a remote end.
	 *
	 * @implements {httpLib.Client}
	 */
	class HttpClient {
	  /**
	   * @param {string} serverUrl URL for the WebDriver server to send commands to.
	   * @param {http.Agent=} opt_agent The agent to use for each request.
	   *     Defaults to `http.globalAgent`.
	   * @param {?string=} opt_proxy The proxy to use for the connection to the
	   *     server. Default is to use no proxy.
	   */
	  constructor(serverUrl, opt_agent, opt_proxy) {
	    /** @private {http.Agent} */
	    this.agent_ = opt_agent || null;

	    /**
	     * Base options for each request.
	     * @private {RequestOptions}
	     */
	    this.options_ = getRequestOptions(serverUrl);

	    /**
	     * @private {?RequestOptions}
	     */
	    this.proxyOptions_ = opt_proxy ? getRequestOptions(opt_proxy) : null;
	  }

	  /** @override */
	  send(httpRequest) {
	    let data;

	    let headers = {};
	    httpRequest.headers.forEach(function(value, name) {
	      headers[name] = value;
	    });

	    headers['Content-Length'] = 0;
	    if (httpRequest.method == 'POST' || httpRequest.method == 'PUT') {
	      data = JSON.stringify(httpRequest.data);
	      headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
	      headers['Content-Type'] = 'application/json;charset=UTF-8';
	    }

	    let path = this.options_.path;
	    if (path.endsWith('/') && httpRequest.path.startsWith('/')) {
	      path += httpRequest.path.substring(1);
	    } else {
	      path += httpRequest.path;
	    }
	    let parsedPath = url.parse(path);

	    let options = {
	      agent: this.agent_ || null,
	      method: httpRequest.method,

	      auth: this.options_.auth,
	      hostname: this.options_.hostname,
	      port: this.options_.port,
	      protocol: this.options_.protocol,

	      path: parsedPath.path,
	      pathname: parsedPath.pathname,
	      search: parsedPath.search,
	      hash: parsedPath.hash,

	      headers,
	    };

	    return new Promise((fulfill, reject) => {
	      sendRequest(options, fulfill, reject, data, this.proxyOptions_);
	    });
	  }
	}


	/**
	 * Sends a single HTTP request.
	 * @param {!Object} options The request options.
	 * @param {function(!httpLib.Response)} onOk The function to call if the
	 *     request succeeds.
	 * @param {function(!Error)} onError The function to call if the request fails.
	 * @param {?string=} opt_data The data to send with the request.
	 * @param {?RequestOptions=} opt_proxy The proxy server to use for the request.
	 */
	function sendRequest(options, onOk, onError, opt_data, opt_proxy) {
	  var hostname = options.hostname;
	  var port = options.port;

	  if (opt_proxy) {
	    let proxy = /** @type {RequestOptions} */(opt_proxy);

	    // RFC 2616, section 5.1.2:
	    // The absoluteURI form is REQUIRED when the request is being made to a
	    // proxy.
	    let absoluteUri = url.format(options);

	    // RFC 2616, section 14.23:
	    // An HTTP/1.1 proxy MUST ensure that any request message it forwards does
	    // contain an appropriate Host header field that identifies the service
	    // being requested by the proxy.
	    let targetHost = options.hostname
	    if (options.port) {
	      targetHost += ':' + options.port;
	    }

	    // Update the request options with our proxy info.
	    options.headers['Host'] = targetHost;
	    options.path = absoluteUri;
	    options.host = proxy.host;
	    options.hostname = proxy.hostname;
	    options.port = proxy.port;

	    if (proxy.auth) {
	      options.headers['Proxy-Authorization'] =
	          'Basic ' + new Buffer(proxy.auth).toString('base64');
	    }
	  }

	  let requestFn = options.protocol === 'https:' ? https.request : http.request;
	  var request = requestFn(options, function onResponse(response) {
	    if (response.statusCode == 302 || response.statusCode == 303) {
	      try {
	        var location = url.parse(response.headers['location']);
	      } catch (ex) {
	        onError(Error(
	            'Failed to parse "Location" header for server redirect: ' +
	            ex.message + '\nResponse was: \n' +
	            new httpLib.Response(response.statusCode, response.headers, '')));
	        return;
	      }

	      if (!location.hostname) {
	        location.hostname = hostname;
	        location.port = port;
	      }

	      request.abort();
	      sendRequest({
	        method: 'GET',
	        protocol: location.protocol || options.protocol,
	        hostname: location.hostname,
	        port: location.port,
	        path: location.path,
	        pathname: location.pathname,
	        search: location.search,
	        hash: location.hash,
	        headers: {
	          'Accept': 'application/json; charset=utf-8'
	        }
	      }, onOk, onError, undefined, opt_proxy);
	      return;
	    }

	    var body = [];
	    response.on('data', body.push.bind(body));
	    response.on('end', function() {
	      var resp = new httpLib.Response(
	          /** @type {number} */(response.statusCode),
	          /** @type {!Object<string>} */(response.headers),
	          body.join('').replace(/\0/g, ''));
	      onOk(resp);
	    });
	  });

	  request.on('error', function(e) {
	    if (e.code === 'ECONNRESET') {
	      setTimeout(function() {
	        sendRequest(options, onOk, onError, opt_data, opt_proxy);
	      }, 15);
	    } else {
	      var message = e.message;
	      if (e.code) {
	        message = e.code + ' ' + message;
	      }
	      onError(new Error(message));
	    }
	  });

	  if (opt_data) {
	    request.write(opt_data);
	  }

	  request.end();
	}


	// PUBLIC API

	exports.Executor = httpLib.Executor;
	exports.HttpClient = HttpClient;
	exports.Request = httpLib.Request;
	exports.Response = httpLib.Response;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(51).Buffer))

/***/ }),
/* 113 */
/***/ (function(module, exports) {

	
	exports.findInPath = function (path) {
	  // console.info('io.findInPath', path);
	  return path;
	};


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	
	const logger = __webpack_require__(88).create('Alias portprober');

	exports.findFreePort = function () {
	  logger.info('Portprober.findFreePort! Do we really need this?');
	  return 9515;
	};


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	const AdmZip = __webpack_require__(116);
	const fs = __webpack_require__(109);
	const path = __webpack_require__(117);
	const url = __webpack_require__(75);
	const util = __webpack_require__(71);

	const httpUtil = __webpack_require__(118);
	const io = __webpack_require__(113);
	const exec = __webpack_require__(119);
	const cmd = __webpack_require__(97);
	const input = __webpack_require__(103);
	const promise = __webpack_require__(36);
	const webdriver = __webpack_require__(101);
	const net = __webpack_require__(120);
	const portprober = __webpack_require__(114);


	/**
	 * @typedef {(string|!Array<string|number|!stream.Stream|null|undefined>)}
	 */
	var StdIoOptions;


	/**
	 * @typedef {(string|!IThenable<string>)}
	 */
	var CommandLineFlag;


	/**
	 * A record object that defines the configuration options for a DriverService
	 * instance.
	 *
	 * @record
	 */
	function ServiceOptions() {}

	/**
	 * Whether the service should only be accessed on this host's loopback address.
	 *
	 * @type {(boolean|undefined)}
	 */
	ServiceOptions.prototype.loopback;

	/**
	 * The host name to access the server on. If this option is specified, the
	 * {@link #loopback} option will be ignored.
	 *
	 * @type {(string|undefined)}
	 */
	ServiceOptions.prototype.hostname;

	/**
	 * The port to start the server on (must be > 0). If the port is provided as a
	 * promise, the service will wait for the promise to resolve before starting.
	 *
	 * @type {(number|!IThenable<number>)}
	 */
	ServiceOptions.prototype.port;

	/**
	 * The arguments to pass to the service. If a promise is provided, the service
	 * will wait for it to resolve before starting.
	 *
	 * @type {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)}
	 */
	ServiceOptions.prototype.args;

	/**
	 * The base path on the server for the WebDriver wire protocol (e.g. '/wd/hub').
	 * Defaults to '/'.
	 *
	 * @type {(string|undefined|null)}
	 */
	ServiceOptions.prototype.path;

	/**
	 * The environment variables that should be visible to the server process.
	 * Defaults to inheriting the current process's environment.
	 *
	 * @type {(Object<string, string>|undefined)}
	 */
	ServiceOptions.prototype.env;

	/**
	 * IO configuration for the spawned server process. For more information, refer
	 * to the documentation of `child_process.spawn`.
	 *
	 * @type {(StdIoOptions|undefined)}
	 * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio
	 */
	ServiceOptions.prototype.stdio;


	/**
	 * Manages the life and death of a native executable WebDriver server.
	 *
	 * It is expected that the driver server implements the
	 * https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol.
	 * Furthermore, the managed server should support multiple concurrent sessions,
	 * so that this class may be reused for multiple clients.
	 */
	class DriverService {
	  /**
	   * @param {string} executable Path to the executable to run.
	   * @param {!ServiceOptions} options Configuration options for the service.
	   */
	  constructor(executable, options) {
	    /** @private {string} */
	    this.executable_ = executable;

	    /** @private {boolean} */
	    this.loopbackOnly_ = !!options.loopback;

	    /** @private {(string|undefined)} */
	    this.hostname_ = options.hostname;

	    /** @private {(number|!IThenable<number>)} */
	    this.port_ = options.port;

	    /**
	     * @private {!(Array<CommandLineFlag>|
	     *             IThenable<!Array<CommandLineFlag>>)}
	     */
	    this.args_ = options.args;

	    /** @private {string} */
	    this.path_ = options.path || '/';

	    /** @private {!Object<string, string>} */
	    this.env_ = options.env || process.env;

	    /**
	     * @private {(string|!Array<string|number|!stream.Stream|null|undefined>)}
	     */
	    this.stdio_ = options.stdio || 'ignore';

	    /**
	     * A promise for the managed subprocess, or null if the server has not been
	     * started yet. This promise will never be rejected.
	     * @private {Promise<!exec.Command>}
	     */
	    this.command_ = null;

	    /**
	     * Promise that resolves to the server's address or null if the server has
	     * not been started. This promise will be rejected if the server terminates
	     * before it starts accepting WebDriver requests.
	     * @private {Promise<string>}
	     */
	    this.address_ = null;
	  }

	  /**
	   * @return {!Promise<string>} A promise that resolves to the server's address.
	   * @throws {Error} If the server has not been started.
	   */
	  address() {
	    if (this.address_) {
	      return this.address_;
	    }
	    throw Error('Server has not been started.');
	  }

	  /**
	   * Returns whether the underlying process is still running. This does not take
	   * into account whether the process is in the process of shutting down.
	   * @return {boolean} Whether the underlying service process is running.
	   */
	  isRunning() {
	    return !!this.address_;
	  }

	  /**
	   * Starts the server if it is not already running.
	   * @param {number=} opt_timeoutMs How long to wait, in milliseconds, for the
	   *     server to start accepting requests. Defaults to 30 seconds.
	   * @return {!Promise<string>} A promise that will resolve to the server's base
	   *     URL when it has started accepting requests. If the timeout expires
	   *     before the server has started, the promise will be rejected.
	   */
	  start(opt_timeoutMs) {
	    if (this.address_) {
	      return this.address_;
	    }

	    var timeout = opt_timeoutMs || DriverService.DEFAULT_START_TIMEOUT_MS;
	    var self = this;

	    let resolveCommand;
	    this.command_ = new Promise(resolve => resolveCommand = resolve);

	    this.address_ = new Promise((resolveAddress, rejectAddress) => {
	      resolveAddress(Promise.resolve(this.port_).then(port => {
	        if (port <= 0) {
	          throw Error('Port must be > 0: ' + port);
	        }

	        return resolveCommandLineFlags(this.args_).then(args => {
	          var command = exec(self.executable_, {
	            args: args,
	            env: self.env_,
	            stdio: self.stdio_
	          });

	          resolveCommand(command);

	          var earlyTermination = command.result().then(function(result) {
	            var error = result.code == null ?
	                Error('Server was killed with ' + result.signal) :
	                Error('Server terminated early with status ' + result.code);
	            rejectAddress(error);
	            self.address_ = null;
	            self.command_ = null;
	            throw error;
	          });

	          var hostname = self.hostname_;
	          if (!hostname) {
	            hostname = !self.loopbackOnly_ && net.getAddress()
	                || net.getLoopbackAddress();
	          }

	          var serverUrl = url.format({
	            protocol: 'http',
	            hostname: hostname,
	            port: port + '',
	            pathname: self.path_
	          });

	          return new Promise((fulfill, reject) => {
	            let cancelToken =
	                earlyTermination.catch(e => reject(Error(e.message)));

	            httpUtil.waitForServer(serverUrl, timeout, cancelToken)
	                .then(_ => fulfill(serverUrl), err => {
	                  if (err instanceof promise.CancellationError) {
	                    fulfill(serverUrl);
	                  } else {
	                    reject(err);
	                  }
	                });
	          });
	        });
	      }));
	    });

	    return this.address_;
	  }

	  /**
	   * Stops the service if it is not currently running. This function will kill
	   * the server immediately. To synchronize with the active control flow, use
	   * {@link #stop()}.
	   * @return {!Promise} A promise that will be resolved when the server has been
	   *     stopped.
	   */
	  kill() {
	    if (!this.address_ || !this.command_) {
	      return Promise.resolve(); // Not currently running.
	    }
	    return this.command_.then(function(command) {
	      command.kill('SIGTERM');
	    });
	  }

	  /**
	   * Schedules a task in the current control flow to stop the server if it is
	   * currently running.
	   * @return {!promise.Thenable} A promise that will be resolved when
	   *     the server has been stopped.
	   */
	  stop() {
	    return promise.controlFlow().execute(this.kill.bind(this));
	  }
	}


	/**
	 * @param {!(Array<CommandLineFlag>|IThenable<!Array<CommandLineFlag>>)} args
	 * @return {!Promise<!Array<string>>}
	 */
	function resolveCommandLineFlags(args) {
	  // Resolve the outer array, then the individual flags.
	  return Promise.resolve(args)
	      .then(/** !Array<CommandLineFlag> */args => Promise.all(args));
	}


	/**
	 * The default amount of time, in milliseconds, to wait for the server to
	 * start.
	 * @const {number}
	 */
	DriverService.DEFAULT_START_TIMEOUT_MS = 30 * 1000;


	/**
	 * Creates {@link DriverService} objects that manage a WebDriver server in a
	 * child process.
	 */
	DriverService.Builder = class {
	  /**
	   * @param {string} exe Path to the executable to use. This executable must
	   *     accept the `--port` flag for defining the port to start the server on.
	   * @throws {Error} If the provided executable path does not exist.
	   */
	  constructor(exe) {
	    if (!fs.existsSync(exe)) {
	      throw Error(`The specified executable path does not exist: ${exe}`);
	    }

	    /** @private @const {string} */
	    this.exe_ = exe;

	    /** @private {!ServiceOptions} */
	    this.options_ = {
	      args: [],
	      port: 0,
	      env: null,
	      stdio: 'ignore'
	    };
	  }

	  /**
	   * Define additional command line arguments to use when starting the server.
	   *
	   * @param {...CommandLineFlag} var_args The arguments to include.
	   * @return {!THIS} A self reference.
	   * @this {THIS}
	   * @template THIS
	   */
	  addArguments(var_args) {
	    let args = Array.prototype.slice.call(arguments, 0);
	    this.options_.args = this.options_.args.concat(args);
	    return this;
	  }

	  /**
	   * Sets the host name to access the server on. If specified, the
	   * {@linkplain #setLoopback() loopback} setting will be ignored.
	   *
	   * @param {string} hostname
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setHostname(hostname) {
	    this.options_.hostname = hostname;
	    return this;
	  }

	  /**
	   * Sets whether the service should be accessed at this host's loopback
	   * address.
	   *
	   * @param {boolean} loopback
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setLoopback(loopback) {
	    this.options_.loopback = loopback;
	    return this;
	  }

	  /**
	   * Sets the base path for WebDriver REST commands (e.g. "/wd/hub").
	   * By default, the driver will accept commands relative to "/".
	   *
	   * @param {?string} basePath The base path to use, or `null` to use the
	   *     default.
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setPath(basePath) {
	    this.options_.path = basePath;
	    return this;
	  }

	  /**
	   * Sets the port to start the server on.
	   *
	   * @param {number} port The port to use, or 0 for any free port.
	   * @return {!DriverService.Builder} A self reference.
	   * @throws {Error} If an invalid port is specified.
	   */
	  setPort(port) {
	    if (port < 0) {
	      throw Error(`port must be >= 0: ${port}`);
	    }
	    this.options_.port = port;
	    return this;
	  }

	  /**
	   * Defines the environment to start the server under. This setting will be
	   * inherited by every browser session started by the server. By default, the
	   * server will inherit the enviroment of the current process.
	   *
	   * @param {(Map<string, string>|Object<string, string>|null)} env The desired
	   *     environment to use, or `null` if the server should inherit the
	   *     current environment.
	   * @return {!DriverService.Builder} A self reference.
	   */
	  setEnvironment(env) {
	    if (env instanceof Map) {
	      let tmp = {};
	      env.forEach((value, key) => tmp[key] = value);
	      env = tmp;
	    }
	    this.options_.env = env;
	    return this;
	  }

	  /**
	   * IO configuration for the spawned server process. For more information,
	   * refer to the documentation of `child_process.spawn`.
	   *
	   * @param {StdIoOptions} config The desired IO configuration.
	   * @return {!DriverService.Builder} A self reference.
	   * @see https://nodejs.org/dist/latest-v4.x/docs/api/child_process.html#child_process_options_stdio
	   */
	  setStdio(config) {
	    this.options_.stdio = config;
	    return this;
	  }

	  /**
	   * Creates a new DriverService using this instance's current configuration.
	   *
	   * @return {!DriverService} A new driver service.
	   */
	  build() {
	    let port = this.options_.port || portprober.findFreePort();
	    let args = Promise.resolve(port).then(port => {
	      return this.options_.args.concat('--port=' + port);
	    });

	    let options =
	        /** @type {!ServiceOptions} */
	        (Object.assign({}, this.options_, {args, port}));
	    return new DriverService(this.exe_, options);
	  }
	};


	/**
	 * Manages the life and death of the
	 * <a href="http://selenium-release.storage.googleapis.com/index.html">
	 * standalone Selenium server</a>.
	 */
	class SeleniumServer extends DriverService {
	  /**
	   * @param {string} jar Path to the Selenium server jar.
	   * @param {SeleniumServer.Options=} opt_options Configuration options for the
	   *     server.
	   * @throws {Error} If the path to the Selenium jar is not specified or if an
	   *     invalid port is specified.
	   */
	  constructor(jar, opt_options) {
	    if (!jar) {
	      throw Error('Path to the Selenium jar not specified');
	    }

	    var options = opt_options || {};

	    if (options.port < 0) {
	      throw Error('Port must be >= 0: ' + options.port);
	    }

	    let port = options.port || portprober.findFreePort();
	    let args = Promise.all([port, options.jvmArgs || [], options.args || []])
	        .then(resolved => {
	          let port = resolved[0];
	          let jvmArgs = resolved[1];
	          let args = resolved[2];
	          return jvmArgs.concat('-jar', jar, '-port', port).concat(args);
	        });

	    let java = 'java';
	    if (process.env['JAVA_HOME']) {
	      java = path.join(process.env['JAVA_HOME'], 'bin/java');
	    }

	    super(java, {
	      loopback: options.loopback,
	      port: port,
	      args: args,
	      path: '/wd/hub',
	      env: options.env,
	      stdio: options.stdio
	    });
	  }
	}


	/**
	 * Options for the Selenium server:
	 *
	 * - `loopback` - Whether the server should only be accessed on this host's
	 *     loopback address.
	 * - `port` - The port to start the server on (must be > 0). If the port is
	 *     provided as a promise, the service will wait for the promise to resolve
	 *     before starting.
	 * - `args` - The arguments to pass to the service. If a promise is provided,
	 *     the service will wait for it to resolve before starting.
	 * - `jvmArgs` - The arguments to pass to the JVM. If a promise is provided,
	 *     the service will wait for it to resolve before starting.
	 * - `env` - The environment variables that should be visible to the server
	 *     process. Defaults to inheriting the current process's environment.
	 * - `stdio` - IO configuration for the spawned server process. For more
	 *     information, refer to the documentation of `child_process.spawn`.
	 *
	 * @typedef {{
	 *   loopback: (boolean|undefined),
	 *   port: (number|!promise.Promise<number>),
	 *   args: !(Array<string>|promise.Promise<!Array<string>>),
	 *   jvmArgs: (!Array<string>|
	 *             !promise.Promise<!Array<string>>|
	 *             undefined),
	 *   env: (!Object<string, string>|undefined),
	 *   stdio: (string|!Array<string|number|!stream.Stream|null|undefined>|
	 *           undefined)
	 * }}
	 */
	SeleniumServer.Options;



	/**
	 * A {@link webdriver.FileDetector} that may be used when running
	 * against a remote
	 * [Selenium server](http://selenium-release.storage.googleapis.com/index.html).
	 *
	 * When a file path on the local machine running this script is entered with
	 * {@link webdriver.WebElement#sendKeys WebElement#sendKeys}, this file detector
	 * will transfer the specified file to the Selenium server's host; the sendKeys
	 * command will be updated to use the transfered file's path.
	 *
	 * __Note:__ This class depends on a non-standard command supported on the
	 * Java Selenium server. The file detector will fail if used with a server that
	 * only supports standard WebDriver commands (such as the ChromeDriver).
	 *
	 * @final
	 */
	class FileDetector extends input.FileDetector {
	  /**
	   * Prepares a `file` for use with the remote browser. If the provided path
	   * does not reference a normal file (i.e. it does not exist or is a
	   * directory), then the promise returned by this method will be resolved with
	   * the original file path. Otherwise, this method will upload the file to the
	   * remote server, which will return the file's path on the remote system so
	   * it may be referenced in subsequent commands.
	   *
	   * @override
	   */
	  handleFile(driver, file) {
	    return io.stat(file).then(function(stats) {
	      if (stats.isDirectory()) {
	        return file;  // Not a valid file, return original input.
	      }

	      var zip = new AdmZip();
	      zip.addLocalFile(file);
	      // Stored compression, see https://en.wikipedia.org/wiki/Zip_(file_format)
	      zip.getEntries()[0].header.method = 0;

	      var command = new cmd.Command(cmd.Name.UPLOAD_FILE)
	          .setParameter('file', zip.toBuffer().toString('base64'));
	      return driver.schedule(command,
	          'remote.FileDetector.handleFile(' + file + ')');
	    }, function(err) {
	      if (err.code === 'ENOENT') {
	        return file;  // Not a file; return original input.
	      }
	      throw err;
	    });
	  }
	}


	// PUBLIC API

	exports.DriverService = DriverService;
	exports.FileDetector = FileDetector;
	exports.SeleniumServer = SeleniumServer;
	exports.ServiceOptions = ServiceOptions;  // Exported for API docs.

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 116 */
/***/ (function(module, exports) {

	/**
	 * Keep empty until really needed
	 */


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Various HTTP utilities.
	 */

	'use strict';

	const Executor = __webpack_require__(112).Executor,
	    HttpClient = __webpack_require__(112).HttpClient,
	    HttpRequest = __webpack_require__(112).Request,
	    Command = __webpack_require__(97).Command,
	    CommandName = __webpack_require__(97).Name,
	    error = __webpack_require__(38),
	    promise = __webpack_require__(36);



	/**
	 * Queries a WebDriver server for its current status.
	 * @param {string} url Base URL of the server to query.
	 * @return {!Promise<!Object>} A promise that resolves with
	 *     a hash of the server status.
	 */
	function getStatus(url) {
	  var client = new HttpClient(url);
	  var executor = new Executor(client);
	  var command = new Command(CommandName.GET_SERVER_STATUS);
	  return executor.execute(command);
	}


	// PUBLIC API


	/**
	 * Queries a WebDriver server for its current status.
	 * @param {string} url Base URL of the server to query.
	 * @return {!Promise<!Object>} A promise that resolves with
	 *     a hash of the server status.
	 */
	exports.getStatus = getStatus;


	/**
	 * Waits for a WebDriver server to be healthy and accepting requests.
	 * @param {string} url Base URL of the server to query.
	 * @param {number} timeout How long to wait for the server.
	 * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:
	 *     if resolved before the server is ready, the wait will be terminated
	 *     early with a {@link promise.CancellationError}.
	 * @return {!Promise} A promise that will resolve when the server is ready, or
	 *     if the wait is cancelled.
	 */
	exports.waitForServer = function(url, timeout, opt_cancelToken) {
	  return new Promise((onResolve, onReject) => {
	    let start = Date.now();

	    let done = false;
	    let resolve = (status) => {
	      done = true;
	      onResolve(status);
	    };
	    let reject = (err) => {
	      done = true;
	      onReject(err);
	    };

	    if (opt_cancelToken) {
	      opt_cancelToken.then(_ => reject(new promise.CancellationError));
	    }

	    checkServerStatus();
	    function checkServerStatus() {
	      return getStatus(url).then(status => resolve(status), onError);
	    }

	    function onError(e) {
	      // Some servers don't support the status command. If they are able to
	      // response with an error, then can consider the server ready.
	      if (e instanceof error.UnsupportedOperationError) {
	        resolve({});
	        return;
	      }

	      if (Date.now() - start > timeout) {
	        reject(Error('Timed out waiting for the WebDriver server at ' + url));
	      } else {
	        setTimeout(function() {
	          if (!done) {
	            checkServerStatus();
	          }
	        }, 50);
	      }
	    }
	  });
	};


	/**
	 * Polls a URL with GET requests until it returns a 2xx response or the
	 * timeout expires.
	 * @param {string} url The URL to poll.
	 * @param {number} timeout How long to wait, in milliseconds.
	 * @param {Promise=} opt_cancelToken A promise used as a cancellation signal:
	 *     if resolved before the a 2xx response is received, the wait will be
	 *     terminated early with a {@link promise.CancellationError}.
	 * @return {!Promise} A promise that will resolve when a 2xx is received from
	 *     the given URL, or if the wait is cancelled.
	 */
	exports.waitForUrl = function(url, timeout, opt_cancelToken) {
	  return new Promise((onResolve, onReject) => {
	    let client = new HttpClient(url);
	    let request = new HttpRequest('GET', '');
	    let start = Date.now();

	    let done = false;
	    let resolve = () => {
	      done = true;
	      onResolve();
	    };
	    let reject = (err) => {
	      done = true;
	      onReject(err);
	    };

	    if (opt_cancelToken) {
	      opt_cancelToken.then(_ => reject(new promise.CancellationError));
	    }

	    testUrl();

	    function testUrl() {
	      client.send(request).then(onResponse, onError);
	    }

	    function onError() {
	      if (Date.now() - start > timeout) {
	        reject(Error('Timed out waiting for the URL to return 2xx: ' + url));
	      } else {
	        setTimeout(function() {
	          if (!done) {
	            testUrl();
	          }
	        }, 50);
	      }
	    }

	    function onResponse(response) {
	      if (done) {
	        return;
	      }
	      if (response.status > 199 && response.status < 300) {
	        resolve();
	        return;
	      }
	      onError();
	    }
	  });
	};


/***/ }),
/* 119 */
/***/ (function(module, exports) {

	
	module.exports = function exec(/*command, opt_options = {}*/) {
	  // console.info(`exec ${command}`, opt_options.args);
	  // pass through all shell commands
	  return new Command();
	};

	class Command {
	  constructor() {
	    this._result = new Promise(resolve => this._resolve = resolve);
	  }
	  result() {
	    return this._result;
	  }
	  kill(opt_signal) {
	    const exitCode = 0;
	    this._resolve(new Result(exitCode, opt_signal || 'SIGTERM'))
	  }
	}

	class Result {
	  constructor(code, signal) {
	    this.code = code;
	    this.signal = signal;
	  }
	  toString() {
	    return `Result(code=${this.code}, signal=${this.signal})`;
	  }
	}


/***/ }),
/* 120 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	'use strict';

	var os = __webpack_require__(94);


	function getLoInterface() {
	  var name;
	  if (process.platform === 'darwin') {
	    name = 'lo0';
	  } else if (process.platform === 'linux') {
	    name = 'lo';
	  }
	  return name ? os.networkInterfaces()[name] : null;
	}


	/**
	 * Queries the system network interfaces for an IP address.
	 * @param {boolean} loopback Whether to find a loopback address.
	 * @param {string=} opt_family The IP family (IPv4 or IPv6). Defaults to IPv4.
	 * @return {string} The located IP address or undefined.
	 */
	function getAddress(loopback, opt_family) {
	  var family = opt_family || 'IPv4';
	  var addresses = [];

	  var interfaces;
	  if (loopback) {
	    var lo = getLoInterface();
	    interfaces = lo ? [lo] : null;
	  }
	  interfaces = interfaces || os.networkInterfaces();
	  for (var key in interfaces) {
	    if (!interfaces.hasOwnProperty(key)) {
	      continue;
	    }

	    interfaces[key].forEach(function(ipAddress) {
	      if (ipAddress.family === family &&
	          ipAddress.internal === loopback) {
	        addresses.push(ipAddress.address);
	      }
	    });
	  }
	  return addresses[0];
	}


	// PUBLIC API


	/**
	 * Retrieves the external IP address for this host.
	 * @param {string=} opt_family The IP family to retrieve. Defaults to "IPv4".
	 * @return {string} The IP address or undefined if not available.
	 */
	exports.getAddress = function(opt_family) {
	  return getAddress(false, opt_family);
	};


	/**
	 * Retrieves a loopback address for this machine.
	 * @param {string=} opt_family The IP family to retrieve. Defaults to "IPv4".
	 * @return {string} The IP address or undefined if not available.
	 */
	exports.getLoopbackAddress = function(opt_family) {
	  return getAddress(true, opt_family);
	};


	/**
	 * Splits a hostport string, e.g. "www.example.com:80", into its component
	 * parts.
	 *
	 * @param {string} hostport The string to split.
	 * @return {{host: string, port: ?number}} A host and port. If no port is
	 *     present in the argument `hostport`, port is null.
	 */
	exports.splitHostAndPort = function(hostport) {
	  let lastIndex = hostport.lastIndexOf(':');
	  if (lastIndex < 0) {
	    return {host: hostport, port: null};
	  }

	  let firstIndex = hostport.indexOf(':');
	  if (firstIndex != lastIndex && !hostport.includes('[')) {
	    // Multiple colons but no brackets, so assume the string is an IPv6 address
	    // with no port (e.g. "1234:5678:9:0:1234:5678:9:0").
	    return {host: hostport, port: null};
	  }

	  let host = hostport.slice(0, lastIndex);
	  if (host.startsWith('[') && host.endsWith(']')) {
	    host = host.slice(1, -1);
	  }

	  let port = parseInt(hostport.slice(lastIndex + 1), 10);
	  return {host, port};
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 121 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for
	 * Microsoft's Edge web browser. Before using this module,
	 * you must download and install the latest
	 * [MicrosoftEdgeDriver](http://go.microsoft.com/fwlink/?LinkId=619687) server.
	 * Ensure that the MicrosoftEdgeDriver is on your
	 * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).
	 *
	 * There are three primary classes exported by this module:
	 *
	 * 1. {@linkplain ServiceBuilder}: configures the
	 *     {@link ./remote.DriverService remote.DriverService}
	 *     that manages the [MicrosoftEdgeDriver] child process.
	 *
	 * 2. {@linkplain Options}: defines configuration options for each new
	 *     MicrosoftEdgeDriver session, such as which
	 *     {@linkplain Options#setProxy proxy} to use when starting the browser.
	 *
	 * 3. {@linkplain Driver}: the WebDriver client; each new instance will control
	 *     a unique browser session.
	 *
	 * __Customizing the MicrosoftEdgeDriver Server__ <a id="custom-server"></a>
	 *
	 * By default, every MicrosoftEdge session will use a single driver service,
	 * which is started the first time a {@link Driver} instance is created and
	 * terminated when this process exits. The default service will inherit its
	 * environment from the current process.
	 * You may obtain a handle to this default service using
	 * {@link #getDefaultService getDefaultService()} and change its configuration
	 * with {@link #setDefaultService setDefaultService()}.
	 *
	 * You may also create a {@link Driver} with its own driver service. This is
	 * useful if you need to capture the server's log output for a specific session:
	 *
	 *     var edge = require('selenium-webdriver/edge');
	 *
	 *     var service = new edge.ServiceBuilder()
	 *         .setPort(55555)
	 *         .build();
	 *
	 *     var options = new edge.Options();
	 *     // configure browser options ...
	 *
	 *     var driver = edge.Driver.createSession(options, service);
	 *
	 * Users should only instantiate the {@link Driver} class directly when they
	 * need a custom driver service configuration (as shown above). For normal
	 * operation, users should start MicrosoftEdge using the
	 * {@link ./builder.Builder selenium-webdriver.Builder}.
	 *
	 * [MicrosoftEdgeDriver]: https://msdn.microsoft.com/en-us/library/mt188085(v=vs.85).aspx
	 */

	'use strict';

	const fs = __webpack_require__(109),
	    util = __webpack_require__(71);

	const http = __webpack_require__(112),
	    io = __webpack_require__(113),
	    capabilities = __webpack_require__(99),
	    promise = __webpack_require__(36),
	    Symbols = __webpack_require__(100),
	    webdriver = __webpack_require__(101),
	    portprober = __webpack_require__(114),
	    remote = __webpack_require__(115);

	const EDGEDRIVER_EXE = 'MicrosoftWebDriver.exe';


	/**
	 * Option keys.
	 * @enum {string}
	 */
	const CAPABILITY_KEY = {
	  PAGE_LOAD_STRATEGY: 'pageLoadStrategy'
	};


	/**
	 * Class for managing MicrosoftEdgeDriver specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Object} */
	    this.options_ = {};

	    /** @private {?capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the MicrosoftEdgeDriver specific options from the given
	   * capabilities object.
	   * @param {!capabilities.Capabilities} caps The capabilities object.
	   * @return {!Options} The MicrosoftEdgeDriver options.
	   */
	  static fromCapabilities(caps) {
	    var options = new Options();
	    var map = options.options_;

	    Object.keys(CAPABILITY_KEY).forEach(function(key) {
	      key = CAPABILITY_KEY[key];
	      if (caps.has(key)) {
	        map[key] = caps.get(key);
	      }
	    });

	    if (caps.has(capabilities.Capability.PROXY)) {
	      options.setProxy(caps.get(capabilities.Capability.PROXY));
	    }

	    return options;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Sets the page load strategy for Edge.
	   * Supported values are "normal", "eager", and "none";
	   *
	   * @param {string} pageLoadStrategy The page load strategy to use.
	   * @return {!Options} A self reference.
	   */
	  setPageLoadStrategy(pageLoadStrategy) {
	    this.options_[CAPABILITY_KEY.PAGE_LOAD_STRATEGY] =
	      pageLoadStrategy.toLowerCase();
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link capabilities.Capabilities}
	   * object.
	   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!capabilities.Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || capabilities.Capabilities.edge();
	    if (this.proxy_) {
	      caps.set(capabilities.Capability.PROXY, this.proxy_);
	    }
	    Object.keys(this.options_).forEach(function(key) {
	      caps.set(key, this.options_[key]);
	    }, this);
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation not intended for general use.
	   * @return {{pageLoadStrategy: (string|undefined)}}
	   *   The JSON wire protocol representation of this instance.
	   */
	  [Symbols.serialize]() {
	    var json = {};
	    for (var key in this.options_) {
	      if (this.options_[key] != null) {
	        json[key] = this.options_[key];
	      }
	    }
	    return json;
	  }
	}


	/**
	 * Creates {@link remote.DriverService} instances that manage a
	 * MicrosoftEdgeDriver server in a child process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *   the builder will attempt to locate the MicrosoftEdgeDriver on the current
	   *   PATH.
	   * @throws {Error} If provided executable does not exist, or the
	   *   MicrosoftEdgeDriver cannot be found on the PATH.
	   */
	  constructor(opt_exe) {
	    let exe = opt_exe || io.findInPath(EDGEDRIVER_EXE, true);
	    if (!exe) {
	      throw Error(
	        'The ' + EDGEDRIVER_EXE + ' could not be found on the current PATH. ' +
	        'Please download the latest version of the MicrosoftEdgeDriver from ' +
	        'https://www.microsoft.com/en-us/download/details.aspx?id=48212 and ' +
	        'ensure it can be found on your PATH.');
	    }

	    super(exe);

	    // Binding to the loopback address will fail if not running with
	    // administrator privileges. Since we cannot test for that in script
	    // (or can we?), force the DriverService to use "localhost".
	    this.setHostname('localhost');
	  }
	}


	/** @type {remote.DriverService} */
	var defaultService = null;


	/**
	 * Sets the default service to use for new MicrosoftEdgeDriver instances.
	 * @param {!remote.DriverService} service The service to use.
	 * @throws {Error} If the default service is currently running.
	 */
	function setDefaultService(service) {
	  if (defaultService && defaultService.isRunning()) {
	    throw Error(
	      'The previously configured EdgeDriver service is still running. ' +
	      'You must shut it down before you may adjust its configuration.');
	  }
	  defaultService = service;
	}


	/**
	 * Returns the default MicrosoftEdgeDriver service. If such a service has
	 * not been configured, one will be constructed using the default configuration
	 * for an MicrosoftEdgeDriver executable found on the system PATH.
	 * @return {!remote.DriverService} The default MicrosoftEdgeDriver service.
	 */
	function getDefaultService() {
	  if (!defaultService) {
	    defaultService = new ServiceBuilder().build();
	  }
	  return defaultService;
	}


	/**
	 * Creates a new WebDriver client for Microsoft's Edge.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new browser session for Microsoft's Edge browser.
	   *
	   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration
	   *     options.
	   * @param {remote.DriverService=} opt_service The session to use; will use
	   *     the {@linkplain #getDefaultService default service} by default.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use, or
	   *     {@code null} to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_service, opt_flow) {
	    var service = opt_service || getDefaultService();
	    var client = service.start().then(url => new http.HttpClient(url));
	    var executor = new http.Executor(client);

	    var caps =
	        opt_config instanceof Options ? opt_config.toCapabilities() :
	        (opt_config || capabilities.Capabilities.edge());

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;
	exports.getDefaultService = getDefaultService;
	exports.setDefaultService = setDefaultService;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines the {@linkplain Driver WebDriver} client for Firefox.
	 * Before using this module, you must download the latest
	 * [geckodriver release] and ensure it can be found on your system [PATH].
	 *
	 * Each FirefoxDriver instance will be created with an anonymous profile,
	 * ensuring browser historys do not share session data (cookies, history, cache,
	 * offline storage, etc.)
	 *
	 * __Customizing the Firefox Profile__
	 *
	 * The {@linkplain Profile} class may be used to configure the browser profile
	 * used with WebDriver, with functions to install additional
	 * {@linkplain Profile#addExtension extensions}, configure browser
	 * {@linkplain Profile#setPreference preferences}, and more. For example, you
	 * may wish to include Firebug:
	 *
	 *     const {Builder} = require('selenium-webdriver');
	 *     const firefox = require('selenium-webdriver/firefox');
	 *
	 *     let profile = new firefox.Profile();
	 *     profile.addExtension('/path/to/firebug.xpi');
	 *     profile.setPreference('extensions.firebug.showChromeErrors', true);
	 *
	 *     let options = new firefox.Options().setProfile(profile);
	 *     let driver = new Builder()
	 *         .forBrowser('firefox')
	 *         .setFirefoxOptions(options)
	 *         .build();
	 *
	 * The {@linkplain Profile} class may also be used to configure WebDriver based
	 * on a pre-existing browser profile:
	 *
	 *     let profile = new firefox.Profile(
	 *         '/usr/local/home/bob/.mozilla/firefox/3fgog75h.testing');
	 *     let options = new firefox.Options().setProfile(profile);
	 *
	 * The FirefoxDriver will _never_ modify a pre-existing profile; instead it will
	 * create a copy for it to modify. By extension, there are certain browser
	 * preferences that are required for WebDriver to function properly and they
	 * will always be overwritten.
	 *
	 * __Using a Custom Firefox Binary__
	 *
	 * On Windows and MacOS, the FirefoxDriver will search for Firefox in its
	 * default installation location:
	 *
	 * - Windows: C:\Program Files and C:\Program Files (x86).
	 * - MacOS: /Applications/Firefox.app
	 *
	 * For Linux, Firefox will always be located on the PATH: `$(where firefox)`.
	 *
	 * Several methods are provided for starting Firefox with a custom executable.
	 * First, on Windows and MacOS, you may configure WebDriver to check the default
	 * install location for a non-release channel. If the requested channel cannot
	 * be found in its default location, WebDriver will fallback to searching your
	 * PATH. _Note:_ on Linux, Firefox is _always_ located on your path, regardless
	 * of the requested channel.
	 *
	 *     const {Builder} = require('selenium-webdriver');
	 *     const firefox = require('selenium-webdriver/firefox');
	 *
	 *     let options = new firefox.Options().setBinary(firefox.Channel.NIGHTLY);
	 *     let driver = new Builder()
	 *         .forBrowser('firefox')
	 *         .setFirefoxOptions(options)
	 *         .build();
	 *
	 * On all platforms, you may configrue WebDriver to use a Firefox specific
	 * executable:
	 *
	 *     let options = new firefox.Options()
	 *         .setBinary('/my/firefox/install/dir/firefox-bin');
	 *
	 * __Remote Testing__
	 *
	 * You may customize the Firefox binary and profile when running against a
	 * remote Selenium server. Your custom profile will be packaged as a zip and
	 * transfered to the remote host for use. The profile will be transferred
	 * _once for each new session_. The performance impact should be minimal if
	 * you've only configured a few extra browser preferences. If you have a large
	 * profile with several extensions, you should consider installing it on the
	 * remote host and defining its path via the {@link Options} class. Custom
	 * binaries are never copied to remote machines and must be referenced by
	 * installation path.
	 *
	 *     const {Builder} = require('selenium-webdriver');
	 *     const firefox = require('selenium-webdriver/firefox');
	 *
	 *     let options = new firefox.Options()
	 *         .setProfile('/profile/path/on/remote/host')
	 *         .setBinary('/install/dir/on/remote/host/firefox-bin');
	 *
	 *     let driver = new Builder()
	 *         .forBrowser('firefox')
	 *         .usingServer('http://127.0.0.1:4444/wd/hub')
	 *         .setFirefoxOptions(options)
	 *         .build();
	 *
	 * __Testing Older Versions of Firefox__
	 *
	 * To test versions of Firefox prior to Firefox 47, you must disable the use of
	 * the geckodriver using the {@link Options} class.
	 *
	 *     let options = new firefox.Options().useGeckoDriver(false);
	 *
	 * Alternatively, you may disable the geckodriver at runtime by setting the
	 * environment variable `SELENIUM_MARIONETTE=false`.
	 *
	 * [geckodriver release]: https://github.com/mozilla/geckodriver/releases/
	 * [PATH]: http://en.wikipedia.org/wiki/PATH_%28variable%29
	 */

	'use strict';

	const url = __webpack_require__(75);

	const {Binary, Channel} = __webpack_require__(123),
	    Profile = __webpack_require__(126).Profile,
	    decodeProfile = __webpack_require__(126).decode,
	    http = __webpack_require__(112),
	    httpUtil = __webpack_require__(118),
	    io = __webpack_require__(113),
	    capabilities = __webpack_require__(99),
	    command = __webpack_require__(97),
	    logging = __webpack_require__(40),
	    promise = __webpack_require__(36),
	    webdriver = __webpack_require__(101),
	    net = __webpack_require__(120),
	    portprober = __webpack_require__(114),
	    remote = __webpack_require__(115);


	/**
	 * Firefox-specific capability keys. Users should use the {@linkplain Options}
	 * class instead of referencing these keys directly. _These keys are considered
	 * implementation details and may be removed or changed at any time._
	 *
	 * @enum {string}
	 */
	const Capability = {
	  /**
	   * Defines the Firefox binary to use. May be set to either a
	   * {@linkplain Binary} instance, or a string path to the Firefox executable.
	   */
	  BINARY: 'firefox_binary',

	  /**
	   * Specifies whether to use Mozilla's Marionette, or the legacy FirefoxDriver
	   * from the Selenium project. Defaults to false.
	   */
	  MARIONETTE: 'marionette',

	  /**
	   * Defines the Firefox profile to use. May be set to either a
	   * {@linkplain Profile} instance, or to a base-64 encoded zip of a profile
	   * directory.
	   */
	  PROFILE: 'firefox_profile'
	};


	/**
	 * Configuration options for the FirefoxDriver.
	 */
	class Options {
	  constructor() {
	    /** @private {Profile} */
	    this.profile_ = null;

	    /** @private {Binary} */
	    this.binary_ = null;

	    /** @private {logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?capabilities.ProxyConfig} */
	    this.proxy_ = null;

	    /** @private {boolean} */
	    this.marionette_ = true;
	  }

	  /**
	   * Sets the profile to use. The profile may be specified as a
	   * {@link Profile} object or as the path to an existing Firefox profile to use
	   * as a template.
	   *
	   * @param {(string|!Profile)} profile The profile to use.
	   * @return {!Options} A self reference.
	   */
	  setProfile(profile) {
	    if (typeof profile === 'string') {
	      profile = new Profile(profile);
	    }
	    this.profile_ = profile;
	    return this;
	  }

	  /**
	   * Sets the binary to use. The binary may be specified as the path to a
	   * Firefox executable, a specific {@link Channel}, or as a {@link Binary}
	   * object.
	   *
	   * @param {(string|!Binary|!Channel)} binary The binary to use.
	   * @return {!Options} A self reference.
	   * @throws {TypeError} If `binary` is an invalid type.
	   */
	  setBinary(binary) {
	    if (typeof binary === 'string' || binary instanceof Channel) {
	      binary = new Binary(binary);
	    }

	    if (!(binary instanceof Binary)) {
	      throw TypeError(
	          'binary must be a string path, Channel, or Binary object');
	    }

	    this.binary_ = binary;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPreferences(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the proxy to use.
	   *
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Sets whether to use Mozilla's geckodriver to drive the browser. This option
	   * is enabled by default and required for Firefox 47+.
	   *
	   * @param {boolean} enable Whether to enable the geckodriver.
	   * @see https://github.com/mozilla/geckodriver
	   */
	  useGeckoDriver(enable) {
	    this.marionette_ = enable;
	    return this;
	  }

	  /**
	   * Converts these options to a {@link capabilities.Capabilities} instance.
	   *
	   * @return {!capabilities.Capabilities} A new capabilities object.
	   */
	  toCapabilities() {
	    var caps = capabilities.Capabilities.firefox();
	    if (this.logPrefs_) {
	      caps.set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_);
	    }
	    if (this.proxy_) {
	      caps.set(capabilities.Capability.PROXY, this.proxy_);
	    }
	    if (this.binary_) {
	      caps.set(Capability.BINARY, this.binary_);
	    }
	    if (this.profile_) {
	      caps.set(Capability.PROFILE, this.profile_);
	    }
	    caps.set(Capability.MARIONETTE, this.marionette_);
	    return caps;
	  }
	}


	/**
	 * Enum of available command contexts.
	 *
	 * Command contexts are specific to Marionette, and may be used with the
	 * {@link #context=} method. Contexts allow you to direct all subsequent
	 * commands to either "content" (default) or "chrome". The latter gives
	 * you elevated security permissions.
	 *
	 * @enum {string}
	 */
	const Context = {
	  CONTENT: "content",
	  CHROME: "chrome",
	};


	const GECKO_DRIVER_EXE =
	    process.platform === 'win32' ? 'geckodriver.exe' : 'geckodriver';


	/**
	 * @return {string} .
	 * @throws {Error}
	 */
	function findGeckoDriver() {
	  let exe = io.findInPath(GECKO_DRIVER_EXE, true);
	  if (!exe) {
	    throw Error(
	      'The ' + GECKO_DRIVER_EXE + ' executable could not be found on the current ' +
	      'PATH. Please download the latest version from ' +
	      'https://github.com/mozilla/geckodriver/releases/' +
	      'WebDriver and ensure it can be found on your PATH.');
	  }
	  return exe;
	}


	/**
	 * @param {(Profile|string)} profile The profile to prepare.
	 * @param {number} port The port the FirefoxDriver should listen on.
	 * @return {!Promise<string>} a promise for the path to the profile directory.
	 */
	function prepareProfile(profile, port) {
	  if (typeof profile === 'string') {
	    return decodeProfile(/** @type {string} */(profile)).then(dir => {
	      profile = new Profile(dir);
	      profile.setPreference('webdriver_firefox_port', port);
	      return profile.writeToDisk();
	    });
	  }

	  profile = profile || new Profile;
	  profile.setPreference('webdriver_firefox_port', port);
	  return profile.writeToDisk();
	}


	function normalizeProxyConfiguration(config) {
	  if ('manual' === config.proxyType) {
	    if (config.ftpProxy && !config.ftpProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.ftpProxy);
	      config.ftpProxy = hostAndPort.host;
	      config.ftpProxyPort = hostAndPort.port;
	    }

	    if (config.httpProxy && !config.httpProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.httpProxy);
	      config.httpProxy = hostAndPort.host;
	      config.httpProxyPort = hostAndPort.port;
	    }

	    if (config.sslProxy && !config.sslProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.sslProxy);
	      config.sslProxy = hostAndPort.host;
	      config.sslProxyPort = hostAndPort.port;
	    }

	    if (config.socksProxy && !config.socksProxyPort) {
	      let hostAndPort = net.splitHostAndPort(config.socksProxy);
	      config.socksProxy = hostAndPort.host;
	      config.socksProxyPort = hostAndPort.port;
	    }
	  } else if ('pac' === config.proxyType) {
	    if (config.proxyAutoconfigUrl && !config.pacUrl) {
	      config.pacUrl = config.proxyAutoconfigUrl;
	    }
	  }
	  return config;
	}


	/** @enum {string} */
	const ExtensionCommand = {
	  GET_CONTEXT: 'getContext',
	  SET_CONTEXT: 'setContext',
	};


	/**
	 * Creates a command executor with support for Marionette's custom commands.
	 * @param {!Promise<string>} serverUrl The server's URL.
	 * @return {!command.Executor} The new command executor.
	 */
	function createExecutor(serverUrl) {
	  let client = serverUrl.then(url => new http.HttpClient(url));
	  let executor = new http.Executor(client);
	  configureExecutor(executor);
	  return executor;
	}


	/**
	 * Configures the given executor with Firefox-specific commands.
	 * @param {!http.Executor} executor the executor to configure.
	 */
	function configureExecutor(executor) {
	  executor.defineCommand(
	      ExtensionCommand.GET_CONTEXT,
	      'GET',
	      '/session/:sessionId/moz/context');

	  executor.defineCommand(
	      ExtensionCommand.SET_CONTEXT,
	      'POST',
	      '/session/:sessionId/moz/context');
	}


	/**
	 * Creates {@link selenium-webdriver/remote.DriverService} instances that manage
	 * a [geckodriver](https://github.com/mozilla/geckodriver) server in a child
	 * process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the geckodriver on the system PATH.
	   */
	  constructor(opt_exe) {
	    super(opt_exe || findGeckoDriver());
	    this.setLoopback(true);  // Required.
	  }

	  /**
	   * Enables verbose logging.
	   *
	   * @param {boolean=} opt_trace Whether to enable trace-level logging. By
	   *     default, only debug logging is enabled.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  enableVerboseLogging(opt_trace) {
	    return this.addArguments(opt_trace ? '-vv' : '-v');
	  }

	  /**
	   * Sets the path to the executable Firefox binary that the geckodriver should
	   * use. If this method is not called, this builder will attempt to locate
	   * Firefox in the default installation location for the current platform.
	   *
	   * @param {(string|!Binary)} binary Path to the executable Firefox binary to use.
	   * @return {!ServiceBuilder} A self reference.
	   * @see Binary#locate()
	   */
	  setFirefoxBinary(binary) {
	    let exe = typeof binary === 'string'
	        ? Promise.resolve(binary) : binary.locate();
	    return this.addArguments('-b', exe);
	  }
	}


	/**
	 * @typedef {{executor: !command.Executor,
	 *            capabilities: (!capabilities.Capabilities|
	 *                           {desired: (capabilities.Capabilities|undefined),
	 *                            required: (capabilities.Capabilities|undefined)}),
	 *            onQuit: function(this: void): ?}}
	 */
	var DriverSpec;


	/**
	 * @param {(http.Executor|remote.DriverService|undefined)} executor
	 * @param {!capabilities.Capabilities} caps
	 * @param {Profile} profile
	 * @param {Binary} binary
	 * @return {DriverSpec}
	 */
	function createGeckoDriver(executor, caps, profile, binary) {
	  let firefoxOptions = {};
	  caps.set('moz:firefoxOptions', firefoxOptions);

	  if (binary) {
	    if (binary.getExe()) {
	      firefoxOptions['binary'] = binary.getExe();
	    }

	    let args = binary.getArguments();
	    if (args.length) {
	      firefoxOptions['args'] = args;
	    }
	  }

	  if (profile) {
	    // If the user specified a template directory or any extensions to install,
	    // we need to encode the profile as a base64 string (which requires writing
	    // it to disk first). Otherwise, if the user just specified some custom
	    // preferences, we can send those directly.
	    if (profile.getTemplateDir() || profile.getExtensions().length) {
	      firefoxOptions['profile'] = profile.encode();

	    } else {
	      let prefs = profile.getPreferences();
	      if (Object.keys(prefs).length) {
	        firefoxOptions['prefs'] = prefs;
	      }
	    }
	  }

	  let sessionCaps = caps;
	  if (caps.has(capabilities.Capability.PROXY)) {
	    let proxy = normalizeProxyConfiguration(
	        caps.get(capabilities.Capability.PROXY));

	    // Marionette requires proxy settings to be specified as required
	    // capabilities. See mozilla/geckodriver#97
	    let required = new capabilities.Capabilities()
	        .set(capabilities.Capability.PROXY, proxy);

	    caps.delete(capabilities.Capability.PROXY);
	    sessionCaps = {required, desired: caps};
	  }

	  /** @type {!command.Executor} */
	  let cmdExecutor;
	  let onQuit = function() {};

	  if (executor instanceof http.Executor) {
	    configureExecutor(executor);
	    cmdExecutor = executor;
	  } else if (executor instanceof remote.DriverService) {
	    cmdExecutor = createExecutor(executor.start());
	    onQuit = () => executor.kill();
	  } else {
	    let builder = new ServiceBuilder();
	    if (binary) {
	      builder.setFirefoxBinary(binary);
	    }
	    let service = builder.build();
	    cmdExecutor = createExecutor(service.start());
	    onQuit = () => service.kill();
	  }

	  return {
	    executor: cmdExecutor,
	    capabilities: sessionCaps,
	    onQuit
	  };
	}


	/**
	 * @param {!capabilities.Capabilities} caps
	 * @param {Profile} profile
	 * @param {!Binary} binary
	 * @return {DriverSpec}
	 */
	function createLegacyDriver(caps, profile, binary, flow) {
	  profile = profile || new Profile;

	  let freePort = portprober.findFreePort();
	  let preparedProfile =
	      freePort.then(port => prepareProfile(profile, port));
	  let command = preparedProfile.then(dir => binary.launch(dir));

	  let serverUrl = command.then(() => freePort)
	      .then(function(/** number */port) {
	        let serverUrl = url.format({
	          protocol: 'http',
	          hostname: net.getLoopbackAddress(),
	          port: port + '',
	          pathname: '/hub'
	        });
	        let ready = httpUtil.waitForServer(serverUrl, 45 * 1000);
	        return ready.then(() => serverUrl);
	      });

	  return {
	    executor: createExecutor(serverUrl),
	    capabilities: caps,
	    onQuit: function() {
	      return command.then(command => {
	        command.kill();
	        return preparedProfile.then(io.rmDir)
	            .then(() => command.result(),
	                  () => command.result());
	      });
	    }
	  };
	}


	/**
	 * A WebDriver client for Firefox.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new Firefox session.
	   *
	   * @param {(Options|capabilities.Capabilities|Object)=} opt_config The
	   *    configuration options for this driver, specified as either an
	   *    {@link Options} or {@link capabilities.Capabilities}, or as a raw hash
	   *    object.
	   * @param {(http.Executor|remote.DriverService)=} opt_executor Either a
	   *   pre-configured command executor to use for communicating with an
	   *   externally managed remote end (which is assumed to already be running),
	   *   or the `DriverService` to use to start the geckodriver in a child
	   *   process.
	   *
	   *   If an executor is provided, care should e taken not to use reuse it with
	   *   other clients as its internal command mappings will be updated to support
	   *   Firefox-specific commands.
	   *
	   *   _This parameter may only be used with Mozilla's GeckoDriver._
	   *
	   * @param {promise.ControlFlow=} opt_flow The flow to
	   *     schedule commands through. Defaults to the active flow object.
	   * @throws {Error} If a custom command executor is provided and the driver is
	   *     configured to use the legacy FirefoxDriver from the Selenium project.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_executor, opt_flow) {
	    let caps;
	    if (opt_config instanceof Options) {
	      caps = opt_config.toCapabilities();
	    } else {
	      caps = new capabilities.Capabilities(opt_config);
	    }

	    let binary = caps.get(Capability.BINARY) || new Binary();
	    caps.delete(Capability.BINARY);
	    if (typeof binary === 'string') {
	      binary = new Binary(binary);
	    }

	    let profile;
	    if (caps.has(Capability.PROFILE)) {
	      profile = caps.get(Capability.PROFILE);
	      caps.delete(Capability.PROFILE);
	    }

	    // Users must now explicitly disable marionette to use the legacy
	    // FirefoxDriver.
	    let noMarionette =
	        caps.get(Capability.MARIONETTE) === false
	            || /^0|false$/i.test(process.env['SELENIUM_MARIONETTE']);
	    let useMarionette = !noMarionette;

	    let spec;
	    if (useMarionette) {
	      spec = createGeckoDriver(opt_executor, caps, profile, binary);
	    } else {
	      if (opt_executor) {
	        throw Error('You may not use a custom command executor with the legacy'
	            + ' FirefoxDriver');
	      }
	      spec = createLegacyDriver(caps, profile, binary, opt_flow);
	    }

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        spec.executor, spec.capabilities, opt_flow, this, spec.onQuit));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {
	  }

	  /**
	   * Get the context that is currently in effect.
	   *
	   * @return {!promise.Thenable<Context>} Current context.
	   */
	  getContext() {
	    return this.schedule(
	        new command.Command(ExtensionCommand.GET_CONTEXT),
	        'get WebDriver.context');
	  }

	  /**
	   * Changes target context for commands between chrome- and content.
	   *
	   * Changing the current context has a stateful impact on all subsequent
	   * commands. The {@link Context.CONTENT} context has normal web
	   * platform document permissions, as if you would evaluate arbitrary
	   * JavaScript. The {@link Context.CHROME} context gets elevated
	   * permissions that lets you manipulate the browser chrome itself,
	   * with full access to the XUL toolkit.
	   *
	   * Use your powers wisely.
	   *
	   * @param {!promise.Thenable<void>} ctx The context to switch to.
	   */
	  setContext(ctx) {
	    return this.schedule(
	        new command.Command(ExtensionCommand.SET_CONTEXT)
	            .setParameter("context", ctx),
	        'set WebDriver.context');
	  }
	}


	// PUBLIC API


	exports.Binary = Binary;
	exports.Channel = Channel;
	exports.Context = Context;
	exports.Driver = Driver;
	exports.Options = Options;
	exports.Profile = Profile;
	exports.ServiceBuilder = ServiceBuilder;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Manages Firefox binaries. This module is considered internal;
	 * users should use {@link ./firefox selenium-webdriver/firefox}.
	 */

	'use strict';

	const child = __webpack_require__(124),
	    fs = __webpack_require__(109),
	    path = __webpack_require__(117),
	    util = __webpack_require__(71);

	const isDevMode = __webpack_require__(125),
	    Symbols = __webpack_require__(100),
	    io = __webpack_require__(113),
	    exec = __webpack_require__(119);



	/** @const */
	const NO_FOCUS_LIB_X86 = isDevMode ?
	    path.join(__dirname, '../../../../cpp/prebuilt/i386/libnoblur.so') :
	    path.join(__dirname, '../lib/firefox/i386/libnoblur.so') ;

	/** @const */
	const NO_FOCUS_LIB_AMD64 = isDevMode ?
	    path.join(__dirname, '../../../../cpp/prebuilt/amd64/libnoblur64.so') :
	    path.join(__dirname, '../lib/firefox/amd64/libnoblur64.so') ;

	const X_IGNORE_NO_FOCUS_LIB = 'x_ignore_nofocus.so';


	/**
	 * @param {string} file Path to the file to find, relative to the program files
	 *     root.
	 * @return {!Promise<?string>} A promise for the located executable.
	 *     The promise will resolve to {@code null} if Firefox was not found.
	 */
	function findInProgramFiles(file) {
	  let files = [
	    process.env['PROGRAMFILES'] || 'C:\\Program Files',
	    process.env['PROGRAMFILES(X86)'] || 'C:\\Program Files (x86)'
	  ].map(prefix => path.join(prefix, file));
	  return io.exists(files[0]).then(function(exists) {
	    return exists ? files[0] : io.exists(files[1]).then(function(exists) {
	      return exists ? files[1] : null;
	    });
	  });
	}


	/**
	 * Provides methods for locating the executable for a Firefox release channel
	 * on Windows and MacOS. For other systems (i.e. Linux), Firefox will always
	 * be located on the system PATH.
	 *
	 * @final
	 */
	class Channel {
	  /**
	   * @param {string} darwin The path to check when running on MacOS.
	   * @param {string} win32 The path to check when running on Windows.
	   */
	  constructor(darwin, win32) {
	    /** @private @const */ this.darwin_ = darwin;
	    /** @private @const */ this.win32_ = win32;
	    /** @private {Promise<string>} */
	    this.found_ = null;
	  }

	  /**
	   * Attempts to locate the Firefox executable for this release channel. This
	   * will first check the default installation location for the channel before
	   * checking the user's PATH. The returned promise will be rejected if Firefox
	   * can not be found.
	   *
	   * @return {!Promise<string>} A promise for the location of the located
	   *     Firefox executable.
	   */
	  locate() {
	    if (this.found_) {
	      return this.found_;
	    }

	    let found;
	    switch (process.platform) {
	      case 'darwin':
	        found = io.exists(this.darwin_)
	            .then(exists => exists ? this.darwin_ : io.findInPath('firefox'));
	        break;

	      case 'win32':
	        found = findInProgramFiles(this.win32_)
	            .then(found => found || io.findInPath('firefox.exe'));
	        break;

	      default:
	        found = Promise.resolve(io.findInPath('firefox'));
	        break;
	    }

	    this.found_ = found.then(found => {
	      if (found) {
	        // TODO: verify version info.
	        return found;
	      }
	      throw Error('Could not locate Firefox on the current system');
	    });
	    return this.found_;
	  }
	}


	/**
	 * Firefox's developer channel.
	 * @const
	 * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#aurora>
	 */
	Channel.AURORA = new Channel(
	  '/Applications/FirefoxDeveloperEdition.app/Contents/MacOS/firefox-bin',
	  'Firefox Developer Edition\\firefox.exe');

	/**
	 * Firefox's beta channel. Note this is provided mainly for convenience as
	 * the beta channel has the same installation location as the main release
	 * channel.
	 * @const
	 * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#beta>
	 */
	Channel.BETA = new Channel(
	  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',
	  'Mozilla Firefox\\firefox.exe');

	/**
	 * Firefox's release channel.
	 * @const
	 * @see <https://www.mozilla.org/en-US/firefox/desktop/>
	 */
	Channel.RELEASE = new Channel(
	  '/Applications/Firefox.app/Contents/MacOS/firefox-bin',
	  'Mozilla Firefox\\firefox.exe');

	/**
	 * Firefox's nightly release channel.
	 * @const
	 * @see <https://www.mozilla.org/en-US/firefox/channel/desktop/#nightly>
	 */
	Channel.NIGHTLY = new Channel(
	  '/Applications/FirefoxNightly.app/Contents/MacOS/firefox-bin',
	  'Nightly\\firefox.exe');


	/**
	 * Copies the no focus libs into the given profile directory.
	 * @param {string} profileDir Path to the profile directory to install into.
	 * @return {!Promise<string>} The LD_LIBRARY_PATH prefix string to use
	 *     for the installed libs.
	 */
	function installNoFocusLibs(profileDir) {
	  var x86 = path.join(profileDir, 'x86');
	  var amd64 = path.join(profileDir, 'amd64');

	  return io.mkdir(x86)
	      .then(() => copyLib(NO_FOCUS_LIB_X86, x86))
	      .then(() => io.mkdir(amd64))
	      .then(() => copyLib(NO_FOCUS_LIB_AMD64, amd64))
	      .then(function() {
	        return x86 + ':' + amd64;
	      });

	  function copyLib(src, dir) {
	    return io.copy(src, path.join(dir, X_IGNORE_NO_FOCUS_LIB));
	  }
	}


	/**
	 * Provides a mechanism to configure and launch Firefox in a subprocess for
	 * use with WebDriver.
	 *
	 * If created _without_ a path for the Firefox binary to use, this class will
	 * attempt to find Firefox when {@link #launch()} is called. For MacOS and
	 * Windows, this class will look for Firefox in the current platform's default
	 * installation location (e.g. /Applications/Firefox.app on MacOS). For all
	 * other platforms, the Firefox executable must be available on your system
	 * `PATH`.
	 *
	 * @final
	 */
	class Binary {
	  /**
	   * @param {?(string|Channel)=} opt_exeOrChannel Either the path to a specific
	   *     Firefox binary to use, or a {@link Channel} instance that describes
	   *     how to locate the desired Firefox version.
	   */
	  constructor(opt_exeOrChannel) {
	    /** @private {?(string|Channel)} */
	    this.exe_ = opt_exeOrChannel || null;

	    /** @private {!Array.<string>} */
	    this.args_ = [];

	    /** @private {!Object<string, string>} */
	    this.env_ = {};
	    Object.assign(this.env_, process.env, {
	      MOZ_CRASHREPORTER_DISABLE: '1',
	      MOZ_NO_REMOTE: '1',
	      NO_EM_RESTART: '1'
	    });

	    /** @private {boolean} */
	    this.devEdition_ = false;
	  }

	  /**
	   * @return {(string|undefined)} The path to the Firefox executable to use, or
	   *     `undefined` if WebDriver should attempt to locate Firefox automatically
	   *     on the current system.
	   */
	  getExe() {
	    return typeof this.exe_ === 'string' ? this.exe_ : undefined;
	  }

	  /**
	   * Add arguments to the command line used to start Firefox.
	   * @param {...(string|!Array.<string>)} var_args Either the arguments to add
	   *     as varargs, or the arguments as an array.
	   */
	  addArguments(var_args) {
	    for (var i = 0; i < arguments.length; i++) {
	      if (Array.isArray(arguments[i])) {
	        this.args_ = this.args_.concat(arguments[i]);
	      } else {
	        this.args_.push(arguments[i]);
	      }
	    }
	  }

	  /**
	   * @return {!Array<string>} The command line arguments to use when starting
	   *     the browser.
	   */
	  getArguments() {
	    return this.args_;
	  }

	  /**
	   * Specifies whether to use Firefox Developer Edition instead of the normal
	   * stable channel. Setting this option has no effect if this instance was
	   * created with a path to a specific Firefox binary.
	   *
	   * This method has no effect on Unix systems where the Firefox application
	   * has the same (default) name regardless of version.
	   *
	   * @param {boolean=} opt_use Whether to use the developer edition. Defaults to
	   *     true.
	   * @deprecated Use the {@link Channel} class to indicate the desired Firefox
	   *     version when creating a new binary: `new Binary(Channel.AURORA)`.
	   */
	  useDevEdition(opt_use) {
	    this.devEdition_ = opt_use === undefined || !!opt_use;
	  }

	  /**
	   * Returns a promise for the Firefox executable used by this instance. The
	   * returned promise will be immediately resolved if the user supplied an
	   * executable path when this instance was created. Otherwise, an attempt will
	   * be made to find Firefox on the current system.
	   *
	   * @return {!Promise<string>} a promise for the path to the Firefox executable
	   *     used by this instance.
	   */
	  locate() {
	    if (typeof this.exe_ === 'string') {
	      return Promise.resolve(this.exe_);
	    } else if (this.exe_ instanceof Channel) {
	      return this.exe_.locate();
	    }
	    let channel = this.devEdition_ ? Channel.AURORA : Channel.RELEASE;
	    return channel.locate();
	  }

	  /**
	   * Launches Firefox and returns a promise that will be fulfilled when the
	   * process terminates.
	   * @param {string} profile Path to the profile directory to use.
	   * @return {!Promise<!exec.Command>} A promise for the handle to the started
	   *     subprocess.
	   */
	  launch(profile) {
	    let env = {};
	    Object.assign(env, this.env_, {XRE_PROFILE_PATH: profile});

	    let args = ['-foreground'].concat(this.args_);

	    return this.locate().then(function(firefox) {
	      if (process.platform === 'win32' || process.platform === 'darwin') {
	        return exec(firefox, {args: args, env: env});
	      }
	      return installNoFocusLibs(profile).then(function(ldLibraryPath) {
	        env['LD_LIBRARY_PATH'] = ldLibraryPath + ':' + env['LD_LIBRARY_PATH'];
	        env['LD_PRELOAD'] = X_IGNORE_NO_FOCUS_LIB;
	        return exec(firefox, {args: args, env: env});
	      });
	    });
	  }

	  /**
	   * Returns a promise for the wire representation of this binary. Note: the
	   * FirefoxDriver only supports passing the path to the binary executable over
	   * the wire; all command line arguments and environment variables will be
	   * discarded.
	   *
	   * @return {!Promise<string>} A promise for this binary's wire representation.
	   */
	  [Symbols.serialize]() {
	    return this.locate();
	  }
	}


	// PUBLIC API


	exports.Binary = Binary;
	exports.Channel = Channel;


	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(37)))

/***/ }),
/* 124 */
/***/ (function(module, exports) {

	/**
	 * Keep empty until really needed
	 */


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Module used to detect if scripts are loaded from the Selenium
	 * project repo instead of from a deployed package.
	 */

	'use strict';

	const fs = __webpack_require__(109);
	const path = __webpack_require__(117);

	/**
	 * @const {boolean}
	 */
	module.exports = (function() {
	  let buildDescFile = path.join(__dirname, '..', '..', 'build.desc');
	  return fs.existsSync(buildDescFile);
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname, Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Profile management module. This module is considered internal;
	 * users should use {@link selenium-webdriver/firefox}.
	 */

	'use strict';

	const AdmZip = __webpack_require__(116),
	    fs = __webpack_require__(109),
	    path = __webpack_require__(117),
	    vm = __webpack_require__(127);

	const isDevMode = __webpack_require__(125),
	    Symbols = __webpack_require__(100),
	    io = __webpack_require__(113),
	    extension = __webpack_require__(129);


	/** @const */
	const WEBDRIVER_PREFERENCES_PATH = isDevMode
	    ? path.join(__dirname, '../../../firefox-driver/webdriver.json')
	    : path.join(__dirname, '../lib/firefox/webdriver.json');

	/** @const */
	const WEBDRIVER_EXTENSION_PATH = isDevMode
	    ? path.join(__dirname,
	        '../../../../build/javascript/firefox-driver/webdriver.xpi')
	    : path.join(__dirname, '../lib/firefox/webdriver.xpi');

	/** @const */
	const WEBDRIVER_EXTENSION_NAME = 'fxdriver@googlecode.com';



	/** @type {Object} */
	var defaultPreferences = null;

	/**
	 * Synchronously loads the default preferences used for the FirefoxDriver.
	 * @return {!Object} The default preferences JSON object.
	 */
	function getDefaultPreferences() {
	  if (!defaultPreferences) {
	    var contents = /** @type {string} */(
	        fs.readFileSync(WEBDRIVER_PREFERENCES_PATH, 'utf8'));
	    defaultPreferences = /** @type {!Object} */(JSON.parse(contents));
	  }
	  return defaultPreferences;
	}


	/**
	 * Parses a user.js file in a Firefox profile directory.
	 * @param {string} f Path to the file to parse.
	 * @return {!Promise<!Object>} A promise for the parsed preferences as
	 *     a JSON object. If the file does not exist, an empty object will be
	 *     returned.
	 */
	function loadUserPrefs(f) {
	  return io.read(f).then(
	      function onSuccess(contents) {
	        var prefs = {};
	        var context = vm.createContext({
	          'user_pref': function(key, value) {
	            prefs[key] = value;
	          }
	        });
	        vm.runInContext(contents.toString(), context, f);
	        return prefs;
	      },
	      function onError(err) {
	        if (err && err.code === 'ENOENT') {
	          return {};
	        }
	        throw err;
	      });
	}



	/**
	 * @param {!Object} prefs The default preferences to write. Will be
	 *     overridden by user.js preferences in the template directory and the
	 *     frozen preferences required by WebDriver.
	 * @param {string} dir Path to the directory write the file to.
	 * @return {!Promise<string>} A promise for the profile directory,
	 *     to be fulfilled when user preferences have been written.
	 */
	function writeUserPrefs(prefs, dir) {
	  var userPrefs = path.join(dir, 'user.js');
	  return loadUserPrefs(userPrefs).then(function(overrides) {
	    Object.assign(prefs, overrides);
	    Object.assign(prefs, getDefaultPreferences()['frozen']);

	    var contents = Object.keys(prefs).map(function(key) {
	      return 'user_pref(' + JSON.stringify(key) + ', ' +
	          JSON.stringify(prefs[key]) + ');';
	    }).join('\n');

	    return new Promise((resolve, reject) => {
	      fs.writeFile(userPrefs, contents, function(err) {
	        err && reject(err) || resolve(dir);
	      });
	    });
	  });
	};


	/**
	 * Installs a group of extensions in the given profile directory. If the
	 * WebDriver extension is not included in this set, the default version
	 * bundled with this package will be installed.
	 * @param {!Array.<string>} extensions The extensions to install, as a
	 *     path to an unpacked extension directory or a path to a xpi file.
	 * @param {string} dir The profile directory to install to.
	 * @param {boolean=} opt_excludeWebDriverExt Whether to skip installation of
	 *     the default WebDriver extension.
	 * @return {!Promise<string>} A promise for the main profile directory
	 *     once all extensions have been installed.
	 */
	function installExtensions(extensions, dir, opt_excludeWebDriverExt) {
	  var hasWebDriver = !!opt_excludeWebDriverExt;
	  var next = 0;
	  var extensionDir = path.join(dir, 'extensions');

	  return new Promise(function(fulfill, reject) {
	    io.mkdir(extensionDir).then(installNext, reject);

	    function installNext() {
	      if (next >= extensions.length) {
	        if (hasWebDriver) {
	          fulfill(dir);
	        } else {
	          install(WEBDRIVER_EXTENSION_PATH);
	        }
	      } else {
	        install(extensions[next++]);
	      }
	    }

	    function install(ext) {
	      extension.install(ext, extensionDir).then(function(id) {
	        hasWebDriver = hasWebDriver || (id === WEBDRIVER_EXTENSION_NAME);
	        installNext();
	      }, reject);
	    }
	  });
	}


	/**
	 * Decodes a base64 encoded profile.
	 * @param {string} data The base64 encoded string.
	 * @return {!Promise<string>} A promise for the path to the decoded profile
	 *     directory.
	 */
	function decode(data) {
	  return io.tmpFile().then(function(file) {
	    var buf = new Buffer(data, 'base64');
	    return io.write(file, buf)
	        .then(io.tmpDir)
	        .then(function(dir) {
	          var zip = new AdmZip(file);
	          zip.extractAllTo(dir);  // Sync only? Why?? :-(
	          return dir;
	        });
	  });
	}



	/**
	 * Models a Firefox profile directory for use with the FirefoxDriver. The
	 * {@code Profile} directory uses an in-memory model until
	 * {@link #writeToDisk} or {@link #encode} is called.
	 */
	class Profile {
	  /**
	   * @param {string=} opt_dir Path to an existing Firefox profile directory to
	   *     use a template for this profile. If not specified, a blank profile will
	   *     be used.
	   */
	  constructor(opt_dir) {
	    /** @private {!Object} */
	    this.preferences_ = {};

	    /** @private {boolean} */
	    this.nativeEventsEnabled_ = true;

	    /** @private {(string|undefined)} */
	    this.template_ = opt_dir;

	    /** @private {number} */
	    this.port_ = 0;

	    /** @private {!Array<string>} */
	    this.extensions_ = [];
	  }

	  /**
	   * @return {(string|undefined)} Path to an existing Firefox profile directory
	   *     to use as a template when writing this Profile to disk.
	   */
	  getTemplateDir() {
	    return this.template_;
	  }

	  /**
	   * Registers an extension to be included with this profile.
	   * @param {string} extension Path to the extension to include, as either an
	   *     unpacked extension directory or the path to a xpi file.
	   */
	  addExtension(extension) {
	    this.extensions_.push(extension);
	  }

	  /**
	   * @return {!Array<string>} A list of extensions to install in this profile.
	   */
	  getExtensions() {
	    return this.extensions_;
	  }

	  /**
	   * Sets a desired preference for this profile.
	   * @param {string} key The preference key.
	   * @param {(string|number|boolean)} value The preference value.
	   * @throws {Error} If attempting to set a frozen preference.
	   */
	  setPreference(key, value) {
	    var frozen = getDefaultPreferences()['frozen'];
	    if (frozen.hasOwnProperty(key) && frozen[key] !== value) {
	      throw Error('You may not set ' + key + '=' + JSON.stringify(value)
	          + '; value is frozen for proper WebDriver functionality ('
	          + key + '=' + JSON.stringify(frozen[key]) + ')');
	    }
	    this.preferences_[key] = value;
	  }

	  /**
	   * Returns the currently configured value of a profile preference. This does
	   * not include any defaults defined in the profile's template directory user.js
	   * file (if a template were specified on construction).
	   * @param {string} key The desired preference.
	   * @return {(string|number|boolean|undefined)} The current value of the
	   *     requested preference.
	   */
	  getPreference(key) {
	    return this.preferences_[key];
	  }

	  /**
	   * @return {!Object} A copy of all currently configured preferences.
	   */
	  getPreferences() {
	    return Object.assign({}, this.preferences_);
	  }

	  /**
	   * Specifies which host the driver should listen for commands on. If not
	   * specified, the driver will default to "localhost". This option should be
	   * specified when "localhost" is not mapped to the loopback address
	   * (127.0.0.1) in `/etc/hosts`.
	   *
	   * @param {string} host the host the driver should listen for commands on
	   */
	  setHost(host) {
	    this.preferences_['webdriver_firefox_allowed_hosts'] = host;
	  }

	  /**
	   * @return {number} The port this profile is currently configured to use, or
	   *     0 if the port will be selected at random when the profile is written
	   *     to disk.
	   */
	  getPort() {
	    return this.port_;
	  }

	  /**
	   * Sets the port to use for the WebDriver extension loaded by this profile.
	   * @param {number} port The desired port, or 0 to use any free port.
	   */
	  setPort(port) {
	    this.port_ = port;
	  }

	  /**
	   * @return {boolean} Whether the FirefoxDriver is configured to automatically
	   *     accept untrusted SSL certificates.
	   */
	  acceptUntrustedCerts() {
	    return !!this.preferences_['webdriver_accept_untrusted_certs'];
	  }

	  /**
	   * Sets whether the FirefoxDriver should automatically accept untrusted SSL
	   * certificates.
	   * @param {boolean} value .
	   */
	  setAcceptUntrustedCerts(value) {
	    this.preferences_['webdriver_accept_untrusted_certs'] = !!value;
	  }

	  /**
	   * Sets whether to assume untrusted certificates come from untrusted issuers.
	   * @param {boolean} value .
	   */
	  setAssumeUntrustedCertIssuer(value) {
	    this.preferences_['webdriver_assume_untrusted_issuer'] = !!value;
	  }

	  /**
	   * @return {boolean} Whether to assume untrusted certs come from untrusted
	   *     issuers.
	   */
	  assumeUntrustedCertIssuer() {
	    return !!this.preferences_['webdriver_assume_untrusted_issuer'];
	  }

	  /**
	   * Sets whether to use native events with this profile.
	   * @param {boolean} enabled .
	   */
	  setNativeEventsEnabled(enabled) {
	    this.nativeEventsEnabled_ = enabled;
	  }

	  /**
	   * Returns whether native events are enabled in this profile.
	   * @return {boolean} .
	   */
	  nativeEventsEnabled() {
	    return this.nativeEventsEnabled_;
	  }

	  /**
	   * Writes this profile to disk.
	   * @param {boolean=} opt_excludeWebDriverExt Whether to exclude the WebDriver
	   *     extension from the generated profile. Used to reduce the size of an
	   *     {@link #encode() encoded profile} since the server will always install
	   *     the extension itself.
	   * @return {!Promise<string>} A promise for the path to the new profile
	   *     directory.
	   */
	  writeToDisk(opt_excludeWebDriverExt) {
	    var profileDir = io.tmpDir();
	    if (this.template_) {
	      profileDir = profileDir.then(function(dir) {
	        return io.copyDir(
	            /** @type {string} */(this.template_),
	            dir, /(parent\.lock|lock|\.parentlock)/);
	      }.bind(this));
	    }

	    // Freeze preferences for async operations.
	    var prefs = {};
	    Object.assign(prefs, getDefaultPreferences()['mutable']);
	    Object.assign(prefs, getDefaultPreferences()['frozen']);
	    Object.assign(prefs, this.preferences_);

	    // Freeze extensions for async operations.
	    var extensions = this.extensions_.concat();

	    return profileDir.then(function(dir) {
	      return writeUserPrefs(prefs, dir);
	    }).then(function(dir) {
	      return installExtensions(extensions, dir, !!opt_excludeWebDriverExt);
	    });
	  }

	  /**
	   * Write profile to disk, compress its containing directory, and return
	   * it as a Base64 encoded string.
	   *
	   * @return {!Promise<string>} A promise for the encoded profile as
	   *     Base64 string.
	   *
	   */
	  encode() {
	    return this.writeToDisk(true).then(function(dir) {
	      var zip = new AdmZip();
	      zip.addLocalFolder(dir, '');
	      // Stored compression, see https://en.wikipedia.org/wiki/Zip_(file_format)
	      zip.getEntries().forEach(function(entry) {
	        entry.header.method = 0;
	      });

	      return io.tmpFile().then(function(file) {
	        zip.writeZip(file);  // Sync! Why oh why :-(
	        return io.read(file);
	      });
	    }).then(function(data) {
	      return data.toString('base64');
	    });
	  }

	  /**
	   * Encodes this profile as a zipped, base64 encoded directory.
	   * @return {!Promise<string>} A promise for the encoded profile.
	   */
	  [Symbols.serialize]() {
	    return this.encode();
	  }
	}


	// PUBLIC API


	exports.Profile = Profile;
	exports.decode = decode;
	exports.loadUserPrefs = loadUserPrefs;

	/* WEBPACK VAR INJECTION */}.call(exports, "/", __webpack_require__(51).Buffer))

/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	var indexOf = __webpack_require__(128);

	var Object_keys = function (obj) {
	    if (Object.keys) return Object.keys(obj)
	    else {
	        var res = [];
	        for (var key in obj) res.push(key)
	        return res;
	    }
	};

	var forEach = function (xs, fn) {
	    if (xs.forEach) return xs.forEach(fn)
	    else for (var i = 0; i < xs.length; i++) {
	        fn(xs[i], i, xs);
	    }
	};

	var defineProp = (function() {
	    try {
	        Object.defineProperty({}, '_', {});
	        return function(obj, name, value) {
	            Object.defineProperty(obj, name, {
	                writable: true,
	                enumerable: false,
	                configurable: true,
	                value: value
	            })
	        };
	    } catch(e) {
	        return function(obj, name, value) {
	            obj[name] = value;
	        };
	    }
	}());

	var globals = ['Array', 'Boolean', 'Date', 'Error', 'EvalError', 'Function',
	'Infinity', 'JSON', 'Math', 'NaN', 'Number', 'Object', 'RangeError',
	'ReferenceError', 'RegExp', 'String', 'SyntaxError', 'TypeError', 'URIError',
	'decodeURI', 'decodeURIComponent', 'encodeURI', 'encodeURIComponent', 'escape',
	'eval', 'isFinite', 'isNaN', 'parseFloat', 'parseInt', 'undefined', 'unescape'];

	function Context() {}
	Context.prototype = {};

	var Script = exports.Script = function NodeScript (code) {
	    if (!(this instanceof Script)) return new Script(code);
	    this.code = code;
	};

	Script.prototype.runInContext = function (context) {
	    if (!(context instanceof Context)) {
	        throw new TypeError("needs a 'context' argument.");
	    }
	    
	    var iframe = document.createElement('iframe');
	    if (!iframe.style) iframe.style = {};
	    iframe.style.display = 'none';
	    
	    document.body.appendChild(iframe);
	    
	    var win = iframe.contentWindow;
	    var wEval = win.eval, wExecScript = win.execScript;

	    if (!wEval && wExecScript) {
	        // win.eval() magically appears when this is called in IE:
	        wExecScript.call(win, 'null');
	        wEval = win.eval;
	    }
	    
	    forEach(Object_keys(context), function (key) {
	        win[key] = context[key];
	    });
	    forEach(globals, function (key) {
	        if (context[key]) {
	            win[key] = context[key];
	        }
	    });
	    
	    var winKeys = Object_keys(win);

	    var res = wEval.call(win, this.code);
	    
	    forEach(Object_keys(win), function (key) {
	        // Avoid copying circular objects like `top` and `window` by only
	        // updating existing context properties or new properties in the `win`
	        // that was only introduced after the eval.
	        if (key in context || indexOf(winKeys, key) === -1) {
	            context[key] = win[key];
	        }
	    });

	    forEach(globals, function (key) {
	        if (!(key in context)) {
	            defineProp(context, key, win[key]);
	        }
	    });
	    
	    document.body.removeChild(iframe);
	    
	    return res;
	};

	Script.prototype.runInThisContext = function () {
	    return eval(this.code); // maybe...
	};

	Script.prototype.runInNewContext = function (context) {
	    var ctx = Script.createContext(context);
	    var res = this.runInContext(ctx);

	    forEach(Object_keys(ctx), function (key) {
	        context[key] = ctx[key];
	    });

	    return res;
	};

	forEach(Object_keys(Script.prototype), function (name) {
	    exports[name] = Script[name] = function (code) {
	        var s = Script(code);
	        return s[name].apply(s, [].slice.call(arguments, 1));
	    };
	});

	exports.createScript = function (code) {
	    return exports.Script(code);
	};

	exports.createContext = Script.createContext = function (context) {
	    var copy = new Context();
	    if(typeof context === 'object') {
	        forEach(Object_keys(context), function (key) {
	            copy[key] = context[key];
	        });
	    }
	    return copy;
	};


/***/ }),
/* 128 */
/***/ (function(module, exports) {

	
	var indexOf = [].indexOf;

	module.exports = function(arr, obj){
	  if (indexOf) return arr.indexOf(obj);
	  for (var i = 0; i < arr.length; ++i) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	};

/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/** @fileoverview Utilities for working with Firefox extensions. */

	'use strict';

	const AdmZip = __webpack_require__(116),
	    fs = __webpack_require__(109),
	    path = __webpack_require__(117),
	    xml = __webpack_require__(130);

	const io = __webpack_require__(113);


	/**
	 * Thrown when there an add-on is malformed.
	 */
	class AddonFormatError extends Error {
	  /** @param {string} msg The error message. */
	  constructor(msg) {
	    super(msg);
	    /** @override */
	    this.name = this.constructor.name;
	  }
	}



	/**
	 * Installs an extension to the given directory.
	 * @param {string} extension Path to the extension to install, as either a xpi
	 *     file or a directory.
	 * @param {string} dir Path to the directory to install the extension in.
	 * @return {!Promise<string>} A promise for the add-on ID once
	 *     installed.
	 */
	function install(extension, dir) {
	  return getDetails(extension).then(function(details) {
	    var dst = path.join(dir, details.id);
	    if (extension.slice(-4) === '.xpi') {
	      if (!details.unpack) {
	        return io.copy(extension, dst + '.xpi').then(() => details.id);
	      } else {
	        return Promise.resolve().then(function() {
	          // TODO: find an async library for inflating a zip archive.
	          new AdmZip(extension).extractAllTo(dst, true);
	          return details.id;
	        });
	      }
	    } else {
	      return io.copyDir(extension, dst).then(() => details.id);
	    }
	  });
	}


	/**
	 * Describes a Firefox add-on.
	 * @typedef {{id: string, name: string, version: string, unpack: boolean}}
	 */
	var AddonDetails;

	/** @typedef {{$: !Object<string, string>}} */
	var RdfRoot;



	/**
	 * Extracts the details needed to install an add-on.
	 * @param {string} addonPath Path to the extension directory.
	 * @return {!Promise<!AddonDetails>} A promise for the add-on details.
	 */
	function getDetails(addonPath) {
	  return readManifest(addonPath).then(function(doc) {
	    var em = getNamespaceId(doc, 'http://www.mozilla.org/2004/em-rdf#');
	    var rdf = getNamespaceId(
	        doc, 'http://www.w3.org/1999/02/22-rdf-syntax-ns#');

	    var description = doc[rdf + 'RDF'][rdf + 'Description'][0];
	    var details = {
	      id: getNodeText(description, em + 'id'),
	      name: getNodeText(description, em + 'name'),
	      version: getNodeText(description, em + 'version'),
	      unpack: getNodeText(description, em + 'unpack') || false
	    };

	    if (typeof details.unpack === 'string') {
	      details.unpack = details.unpack.toLowerCase() === 'true';
	    }

	    if (!details.id) {
	      throw new AddonFormatError('Could not find add-on ID for ' + addonPath);
	    }

	    return details;
	  });

	  function getNodeText(node, name) {
	    return node[name] && node[name][0] || '';
	  }

	  function getNamespaceId(doc, url) {
	    var keys = Object.keys(doc);
	    if (keys.length !== 1) {
	      throw new AddonFormatError('Malformed manifest for add-on ' + addonPath);
	    }

	    var namespaces = /** @type {!RdfRoot} */(doc[keys[0]]).$;
	    var id = '';
	    Object.keys(namespaces).some(function(ns) {
	      if (namespaces[ns] !== url) {
	        return false;
	      }

	      if (ns.indexOf(':') != -1) {
	        id = ns.split(':')[1] + ':';
	      }
	      return true;
	    });
	    return id;
	  }
	}


	/**
	 * Reads the manifest for a Firefox add-on.
	 * @param {string} addonPath Path to a Firefox add-on as a xpi or an extension.
	 * @return {!Promise<!Object>} A promise for the parsed manifest.
	 */
	function readManifest(addonPath) {
	  var manifest;

	  if (addonPath.slice(-4) === '.xpi') {
	    manifest = new Promise((resolve, reject) => {
	      let zip = new AdmZip(addonPath);

	      if (!zip.getEntry('install.rdf')) {
	        reject(new AddonFormatError(
	            'Could not find install.rdf in ' + addonPath));
	        return;
	      }

	      zip.readAsTextAsync('install.rdf', resolve);
	    });
	  } else {
	    manifest = io.stat(addonPath).then(function(stats) {
	      if (!stats.isDirectory()) {
	        throw Error(
	            'Add-on path is neither a xpi nor a directory: ' + addonPath);
	      }
	      return io.read(path.join(addonPath, 'install.rdf'));
	    });
	  }

	  return manifest.then(function(content) {
	    return new Promise((resolve, reject) => {
	      xml.parseString(content, (err, data) => {
	        if (err) {
	          reject(err);
	        } else {
	          resolve(data);
	        }
	      });
	    });
	  });
	}


	// PUBLIC API


	exports.install = install;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  "use strict";
	  var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

	  sax = __webpack_require__(131);

	  events = __webpack_require__(43);

	  builder = __webpack_require__(132);

	  bom = __webpack_require__(280);

	  processors = __webpack_require__(281);

	  setImmediate = __webpack_require__(60).setImmediate;

	  isEmpty = function(thing) {
	    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
	  };

	  processName = function(processors, processedName) {
	    var i, len, process;
	    for (i = 0, len = processors.length; i < len; i++) {
	      process = processors[i];
	      processedName = process(processedName);
	    }
	    return processedName;
	  };

	  requiresCDATA = function(entry) {
	    return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
	  };

	  wrapCDATA = function(entry) {
	    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
	  };

	  escapeCDATA = function(entry) {
	    return entry.replace(']]>', ']]]]><![CDATA[>');
	  };

	  exports.processors = processors;

	  exports.defaults = {
	    "0.1": {
	      explicitCharkey: false,
	      trim: true,
	      normalize: true,
	      normalizeTags: false,
	      attrkey: "@",
	      charkey: "#",
	      explicitArray: false,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: false,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      childkey: '@@',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      emptyTag: ''
	    },
	    "0.2": {
	      explicitCharkey: false,
	      trim: false,
	      normalize: false,
	      normalizeTags: false,
	      attrkey: "$",
	      charkey: "_",
	      explicitArray: true,
	      ignoreAttrs: false,
	      mergeAttrs: false,
	      explicitRoot: true,
	      validator: null,
	      xmlns: false,
	      explicitChildren: false,
	      preserveChildrenOrder: false,
	      childkey: '$$',
	      charsAsChildren: false,
	      includeWhiteChars: false,
	      async: false,
	      strict: true,
	      attrNameProcessors: null,
	      attrValueProcessors: null,
	      tagNameProcessors: null,
	      valueProcessors: null,
	      rootName: 'root',
	      xmldec: {
	        'version': '1.0',
	        'encoding': 'UTF-8',
	        'standalone': true
	      },
	      doctype: null,
	      renderOpts: {
	        'pretty': true,
	        'indent': '  ',
	        'newline': '\n'
	      },
	      headless: false,
	      chunkSize: 10000,
	      emptyTag: '',
	      cdata: false
	    }
	  };

	  exports.ValidationError = (function(superClass) {
	    extend(ValidationError, superClass);

	    function ValidationError(message) {
	      this.message = message;
	    }

	    return ValidationError;

	  })(Error);

	  exports.Builder = (function() {
	    function Builder(opts) {
	      var key, ref, value;
	      this.options = {};
	      ref = exports.defaults["0.2"];
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	    }

	    Builder.prototype.buildObject = function(rootObj) {
	      var attrkey, charkey, render, rootElement, rootName;
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
	        rootName = Object.keys(rootObj)[0];
	        rootObj = rootObj[rootName];
	      } else {
	        rootName = this.options.rootName;
	      }
	      render = (function(_this) {
	        return function(element, obj) {
	          var attr, child, entry, index, key, value;
	          if (typeof obj !== 'object') {
	            if (_this.options.cdata && requiresCDATA(obj)) {
	              element.raw(wrapCDATA(obj));
	            } else {
	              element.txt(obj);
	            }
	          } else {
	            for (key in obj) {
	              if (!hasProp.call(obj, key)) continue;
	              child = obj[key];
	              if (key === attrkey) {
	                if (typeof child === "object") {
	                  for (attr in child) {
	                    value = child[attr];
	                    element = element.att(attr, value);
	                  }
	                }
	              } else if (key === charkey) {
	                if (_this.options.cdata && requiresCDATA(child)) {
	                  element = element.raw(wrapCDATA(child));
	                } else {
	                  element = element.txt(child);
	                }
	              } else if (Array.isArray(child)) {
	                for (index in child) {
	                  if (!hasProp.call(child, index)) continue;
	                  entry = child[index];
	                  if (typeof entry === 'string') {
	                    if (_this.options.cdata && requiresCDATA(entry)) {
	                      element = element.ele(key).raw(wrapCDATA(entry)).up();
	                    } else {
	                      element = element.ele(key, entry).up();
	                    }
	                  } else {
	                    element = render(element.ele(key), entry).up();
	                  }
	                }
	              } else if (typeof child === "object") {
	                element = render(element.ele(key), child).up();
	              } else {
	                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
	                  element = element.ele(key).raw(wrapCDATA(child)).up();
	                } else {
	                  if (child == null) {
	                    child = '';
	                  }
	                  element = element.ele(key, child.toString()).up();
	                }
	              }
	            }
	          }
	          return element;
	        };
	      })(this);
	      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
	        headless: this.options.headless,
	        allowSurrogateChars: this.options.allowSurrogateChars
	      });
	      return render(rootElement, rootObj).end(this.options.renderOpts);
	    };

	    return Builder;

	  })();

	  exports.Parser = (function(superClass) {
	    extend(Parser, superClass);

	    function Parser(opts) {
	      this.parseString = bind(this.parseString, this);
	      this.reset = bind(this.reset, this);
	      this.assignOrPush = bind(this.assignOrPush, this);
	      this.processAsync = bind(this.processAsync, this);
	      var key, ref, value;
	      if (!(this instanceof exports.Parser)) {
	        return new exports.Parser(opts);
	      }
	      this.options = {};
	      ref = exports.defaults["0.2"];
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this.options[key] = value;
	      }
	      for (key in opts) {
	        if (!hasProp.call(opts, key)) continue;
	        value = opts[key];
	        this.options[key] = value;
	      }
	      if (this.options.xmlns) {
	        this.options.xmlnskey = this.options.attrkey + "ns";
	      }
	      if (this.options.normalizeTags) {
	        if (!this.options.tagNameProcessors) {
	          this.options.tagNameProcessors = [];
	        }
	        this.options.tagNameProcessors.unshift(processors.normalize);
	      }
	      this.reset();
	    }

	    Parser.prototype.processAsync = function() {
	      var chunk, err, error1;
	      try {
	        if (this.remaining.length <= this.options.chunkSize) {
	          chunk = this.remaining;
	          this.remaining = '';
	          this.saxParser = this.saxParser.write(chunk);
	          return this.saxParser.close();
	        } else {
	          chunk = this.remaining.substr(0, this.options.chunkSize);
	          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
	          this.saxParser = this.saxParser.write(chunk);
	          return setImmediate(this.processAsync);
	        }
	      } catch (error1) {
	        err = error1;
	        if (!this.saxParser.errThrown) {
	          this.saxParser.errThrown = true;
	          return this.emit(err);
	        }
	      }
	    };

	    Parser.prototype.assignOrPush = function(obj, key, newValue) {
	      if (!(key in obj)) {
	        if (!this.options.explicitArray) {
	          return obj[key] = newValue;
	        } else {
	          return obj[key] = [newValue];
	        }
	      } else {
	        if (!(obj[key] instanceof Array)) {
	          obj[key] = [obj[key]];
	        }
	        return obj[key].push(newValue);
	      }
	    };

	    Parser.prototype.reset = function() {
	      var attrkey, charkey, ontext, stack;
	      this.removeAllListeners();
	      this.saxParser = sax.parser(this.options.strict, {
	        trim: false,
	        normalize: false,
	        xmlns: this.options.xmlns
	      });
	      this.saxParser.errThrown = false;
	      this.saxParser.onerror = (function(_this) {
	        return function(error) {
	          _this.saxParser.resume();
	          if (!_this.saxParser.errThrown) {
	            _this.saxParser.errThrown = true;
	            return _this.emit("error", error);
	          }
	        };
	      })(this);
	      this.saxParser.onend = (function(_this) {
	        return function() {
	          if (!_this.saxParser.ended) {
	            _this.saxParser.ended = true;
	            return _this.emit("end", _this.resultObject);
	          }
	        };
	      })(this);
	      this.saxParser.ended = false;
	      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
	      this.resultObject = null;
	      stack = [];
	      attrkey = this.options.attrkey;
	      charkey = this.options.charkey;
	      this.saxParser.onopentag = (function(_this) {
	        return function(node) {
	          var key, newValue, obj, processedKey, ref;
	          obj = {};
	          obj[charkey] = "";
	          if (!_this.options.ignoreAttrs) {
	            ref = node.attributes;
	            for (key in ref) {
	              if (!hasProp.call(ref, key)) continue;
	              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
	                obj[attrkey] = {};
	              }
	              newValue = _this.options.attrValueProcessors ? processName(_this.options.attrValueProcessors, node.attributes[key]) : node.attributes[key];
	              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
	              if (_this.options.mergeAttrs) {
	                _this.assignOrPush(obj, processedKey, newValue);
	              } else {
	                obj[attrkey][processedKey] = newValue;
	              }
	            }
	          }
	          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
	          if (_this.options.xmlns) {
	            obj[_this.options.xmlnskey] = {
	              uri: node.uri,
	              local: node.local
	            };
	          }
	          return stack.push(obj);
	        };
	      })(this);
	      this.saxParser.onclosetag = (function(_this) {
	        return function() {
	          var cdata, emptyStr, err, error1, key, node, nodeName, obj, objClone, old, s, xpath;
	          obj = stack.pop();
	          nodeName = obj["#name"];
	          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
	            delete obj["#name"];
	          }
	          if (obj.cdata === true) {
	            cdata = obj.cdata;
	            delete obj.cdata;
	          }
	          s = stack[stack.length - 1];
	          if (obj[charkey].match(/^\s*$/) && !cdata) {
	            emptyStr = obj[charkey];
	            delete obj[charkey];
	          } else {
	            if (_this.options.trim) {
	              obj[charkey] = obj[charkey].trim();
	            }
	            if (_this.options.normalize) {
	              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
	            }
	            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
	            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
	              obj = obj[charkey];
	            }
	          }
	          if (isEmpty(obj)) {
	            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
	          }
	          if (_this.options.validator != null) {
	            xpath = "/" + ((function() {
	              var i, len, results;
	              results = [];
	              for (i = 0, len = stack.length; i < len; i++) {
	                node = stack[i];
	                results.push(node["#name"]);
	              }
	              return results;
	            })()).concat(nodeName).join("/");
	            try {
	              obj = _this.options.validator(xpath, s && s[nodeName], obj);
	            } catch (error1) {
	              err = error1;
	              _this.emit("error", err);
	            }
	          }
	          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
	            if (!_this.options.preserveChildrenOrder) {
	              node = {};
	              if (_this.options.attrkey in obj) {
	                node[_this.options.attrkey] = obj[_this.options.attrkey];
	                delete obj[_this.options.attrkey];
	              }
	              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
	                node[_this.options.charkey] = obj[_this.options.charkey];
	                delete obj[_this.options.charkey];
	              }
	              if (Object.getOwnPropertyNames(obj).length > 0) {
	                node[_this.options.childkey] = obj;
	              }
	              obj = node;
	            } else if (s) {
	              s[_this.options.childkey] = s[_this.options.childkey] || [];
	              objClone = {};
	              for (key in obj) {
	                if (!hasProp.call(obj, key)) continue;
	                objClone[key] = obj[key];
	              }
	              s[_this.options.childkey].push(objClone);
	              delete obj["#name"];
	              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
	                obj = obj[charkey];
	              }
	            }
	          }
	          if (stack.length > 0) {
	            return _this.assignOrPush(s, nodeName, obj);
	          } else {
	            if (_this.options.explicitRoot) {
	              old = obj;
	              obj = {};
	              obj[nodeName] = old;
	            }
	            _this.resultObject = obj;
	            _this.saxParser.ended = true;
	            return _this.emit("end", _this.resultObject);
	          }
	        };
	      })(this);
	      ontext = (function(_this) {
	        return function(text) {
	          var charChild, s;
	          s = stack[stack.length - 1];
	          if (s) {
	            s[charkey] += text;
	            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, '').trim() !== '')) {
	              s[_this.options.childkey] = s[_this.options.childkey] || [];
	              charChild = {
	                '#name': '__text__'
	              };
	              charChild[charkey] = text;
	              if (_this.options.normalize) {
	                charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
	              }
	              s[_this.options.childkey].push(charChild);
	            }
	            return s;
	          }
	        };
	      })(this);
	      this.saxParser.ontext = ontext;
	      return this.saxParser.oncdata = (function(_this) {
	        return function(text) {
	          var s;
	          s = ontext(text);
	          if (s) {
	            return s.cdata = true;
	          }
	        };
	      })(this);
	    };

	    Parser.prototype.parseString = function(str, cb) {
	      var err, error1;
	      if ((cb != null) && typeof cb === "function") {
	        this.on("end", function(result) {
	          this.reset();
	          return cb(null, result);
	        });
	        this.on("error", function(err) {
	          this.reset();
	          return cb(err);
	        });
	      }
	      try {
	        str = str.toString();
	        if (str.trim() === '') {
	          this.emit("end", null);
	          return true;
	        }
	        str = bom.stripBOM(str);
	        if (this.options.async) {
	          this.remaining = str;
	          setImmediate(this.processAsync);
	          return this.saxParser;
	        }
	        return this.saxParser.write(str).close();
	      } catch (error1) {
	        err = error1;
	        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
	          this.emit('error', err);
	          return this.saxParser.errThrown = true;
	        } else if (this.saxParser.ended) {
	          throw err;
	        }
	      }
	    };

	    return Parser;

	  })(events.EventEmitter);

	  exports.parseString = function(str, a, b) {
	    var cb, options, parser;
	    if (b != null) {
	      if (typeof b === 'function') {
	        cb = b;
	      }
	      if (typeof a === 'object') {
	        options = a;
	      }
	    } else {
	      if (typeof a === 'function') {
	        cb = a;
	      }
	      options = {};
	    }
	    parser = new exports.Parser(options);
	    return parser.parseString(str, cb);
	  };

	}).call(this);


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {;(function (sax) { // wrapper for non-node envs
	  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
	  sax.SAXParser = SAXParser
	  sax.SAXStream = SAXStream
	  sax.createStream = createStream

	  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
	  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
	  // since that's the earliest that a buffer overrun could occur.  This way, checks are
	  // as rare as required, but as often as necessary to ensure never crossing this bound.
	  // Furthermore, buffers are only tested at most once per write(), so passing a very
	  // large string into write() might have undesirable effects, but this is manageable by
	  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
	  // edge case, result in creating at most one complete copy of the string passed in.
	  // Set to Infinity to have unlimited buffers.
	  sax.MAX_BUFFER_LENGTH = 64 * 1024

	  var buffers = [
	    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',
	    'procInstName', 'procInstBody', 'entity', 'attribName',
	    'attribValue', 'cdata', 'script'
	  ]

	  sax.EVENTS = [
	    'text',
	    'processinginstruction',
	    'sgmldeclaration',
	    'doctype',
	    'comment',
	    'opentagstart',
	    'attribute',
	    'opentag',
	    'closetag',
	    'opencdata',
	    'cdata',
	    'closecdata',
	    'error',
	    'end',
	    'ready',
	    'script',
	    'opennamespace',
	    'closenamespace'
	  ]

	  function SAXParser (strict, opt) {
	    if (!(this instanceof SAXParser)) {
	      return new SAXParser(strict, opt)
	    }

	    var parser = this
	    clearBuffers(parser)
	    parser.q = parser.c = ''
	    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
	    parser.opt = opt || {}
	    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
	    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'
	    parser.tags = []
	    parser.closed = parser.closedRoot = parser.sawRoot = false
	    parser.tag = parser.error = null
	    parser.strict = !!strict
	    parser.noscript = !!(strict || parser.opt.noscript)
	    parser.state = S.BEGIN
	    parser.strictEntities = parser.opt.strictEntities
	    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)
	    parser.attribList = []

	    // namespaces form a prototype chain.
	    // it always points at the current tag,
	    // which protos to its parent tag.
	    if (parser.opt.xmlns) {
	      parser.ns = Object.create(rootNS)
	    }

	    // mostly just for error reporting
	    parser.trackPosition = parser.opt.position !== false
	    if (parser.trackPosition) {
	      parser.position = parser.line = parser.column = 0
	    }
	    emit(parser, 'onready')
	  }

	  if (!Object.create) {
	    Object.create = function (o) {
	      function F () {}
	      F.prototype = o
	      var newf = new F()
	      return newf
	    }
	  }

	  if (!Object.keys) {
	    Object.keys = function (o) {
	      var a = []
	      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
	      return a
	    }
	  }

	  function checkBufferLength (parser) {
	    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
	    var maxActual = 0
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      var len = parser[buffers[i]].length
	      if (len > maxAllowed) {
	        // Text/cdata nodes can get big, and since they're buffered,
	        // we can get here under normal conditions.
	        // Avoid issues by emitting the text node now,
	        // so at least it won't get any bigger.
	        switch (buffers[i]) {
	          case 'textNode':
	            closeText(parser)
	            break

	          case 'cdata':
	            emitNode(parser, 'oncdata', parser.cdata)
	            parser.cdata = ''
	            break

	          case 'script':
	            emitNode(parser, 'onscript', parser.script)
	            parser.script = ''
	            break

	          default:
	            error(parser, 'Max buffer length exceeded: ' + buffers[i])
	        }
	      }
	      maxActual = Math.max(maxActual, len)
	    }
	    // schedule the next check for the earliest possible buffer overrun.
	    var m = sax.MAX_BUFFER_LENGTH - maxActual
	    parser.bufferCheckPosition = m + parser.position
	  }

	  function clearBuffers (parser) {
	    for (var i = 0, l = buffers.length; i < l; i++) {
	      parser[buffers[i]] = ''
	    }
	  }

	  function flushBuffers (parser) {
	    closeText(parser)
	    if (parser.cdata !== '') {
	      emitNode(parser, 'oncdata', parser.cdata)
	      parser.cdata = ''
	    }
	    if (parser.script !== '') {
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }
	  }

	  SAXParser.prototype = {
	    end: function () { end(this) },
	    write: write,
	    resume: function () { this.error = null; return this },
	    close: function () { return this.write(null) },
	    flush: function () { flushBuffers(this) }
	  }

	  var Stream
	  try {
	    Stream = __webpack_require__(45).Stream
	  } catch (ex) {
	    Stream = function () {}
	  }

	  var streamWraps = sax.EVENTS.filter(function (ev) {
	    return ev !== 'error' && ev !== 'end'
	  })

	  function createStream (strict, opt) {
	    return new SAXStream(strict, opt)
	  }

	  function SAXStream (strict, opt) {
	    if (!(this instanceof SAXStream)) {
	      return new SAXStream(strict, opt)
	    }

	    Stream.apply(this)

	    this._parser = new SAXParser(strict, opt)
	    this.writable = true
	    this.readable = true

	    var me = this

	    this._parser.onend = function () {
	      me.emit('end')
	    }

	    this._parser.onerror = function (er) {
	      me.emit('error', er)

	      // if didn't throw, then means error was handled.
	      // go ahead and clear error, so we can write again.
	      me._parser.error = null
	    }

	    this._decoder = null

	    streamWraps.forEach(function (ev) {
	      Object.defineProperty(me, 'on' + ev, {
	        get: function () {
	          return me._parser['on' + ev]
	        },
	        set: function (h) {
	          if (!h) {
	            me.removeAllListeners(ev)
	            me._parser['on' + ev] = h
	            return h
	          }
	          me.on(ev, h)
	        },
	        enumerable: true,
	        configurable: false
	      })
	    })
	  }

	  SAXStream.prototype = Object.create(Stream.prototype, {
	    constructor: {
	      value: SAXStream
	    }
	  })

	  SAXStream.prototype.write = function (data) {
	    if (typeof Buffer === 'function' &&
	      typeof Buffer.isBuffer === 'function' &&
	      Buffer.isBuffer(data)) {
	      if (!this._decoder) {
	        var SD = __webpack_require__(63).StringDecoder
	        this._decoder = new SD('utf8')
	      }
	      data = this._decoder.write(data)
	    }

	    this._parser.write(data.toString())
	    this.emit('data', data)
	    return true
	  }

	  SAXStream.prototype.end = function (chunk) {
	    if (chunk && chunk.length) {
	      this.write(chunk)
	    }
	    this._parser.end()
	    return true
	  }

	  SAXStream.prototype.on = function (ev, handler) {
	    var me = this
	    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {
	      me._parser['on' + ev] = function () {
	        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)
	        args.splice(0, 0, ev)
	        me.emit.apply(me, args)
	      }
	    }

	    return Stream.prototype.on.call(me, ev, handler)
	  }

	  // character classes and tokens
	  var whitespace = '\r\n\t '

	  // this really needs to be replaced with character classes.
	  // XML allows all manner of ridiculous numbers and digits.
	  var number = '0124356789'
	  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'

	  // (Letter | "_" | ":")
	  var quote = '\'"'
	  var attribEnd = whitespace + '>'
	  var CDATA = '[CDATA['
	  var DOCTYPE = 'DOCTYPE'
	  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'
	  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'
	  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

	  // turn all the string character sets into character class objects.
	  whitespace = charClass(whitespace)
	  number = charClass(number)
	  letter = charClass(letter)

	  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar
	  // This implementation works on strings, a single character at a time
	  // as such, it cannot ever support astral-plane characters (10000-EFFFF)
	  // without a significant breaking change to either this  parser, or the
	  // JavaScript language.  Implementation of an emoji-capable xml parser
	  // is left as an exercise for the reader.
	  var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

	  var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/
	  var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

	  quote = charClass(quote)
	  attribEnd = charClass(attribEnd)

	  function charClass (str) {
	    return str.split('').reduce(function (s, c) {
	      s[c] = true
	      return s
	    }, {})
	  }

	  function isRegExp (c) {
	    return Object.prototype.toString.call(c) === '[object RegExp]'
	  }

	  function is (charclass, c) {
	    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
	  }

	  function not (charclass, c) {
	    return !is(charclass, c)
	  }

	  var S = 0
	  sax.STATE = {
	    BEGIN: S++, // leading byte order mark or whitespace
	    BEGIN_WHITESPACE: S++, // leading whitespace
	    TEXT: S++, // general stuff
	    TEXT_ENTITY: S++, // &amp and such.
	    OPEN_WAKA: S++, // <
	    SGML_DECL: S++, // <!BLARG
	    SGML_DECL_QUOTED: S++, // <!BLARG foo "bar
	    DOCTYPE: S++, // <!DOCTYPE
	    DOCTYPE_QUOTED: S++, // <!DOCTYPE "//blah
	    DOCTYPE_DTD: S++, // <!DOCTYPE "//blah" [ ...
	    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE "//blah" [ "foo
	    COMMENT_STARTING: S++, // <!-
	    COMMENT: S++, // <!--
	    COMMENT_ENDING: S++, // <!-- blah -
	    COMMENT_ENDED: S++, // <!-- blah --
	    CDATA: S++, // <![CDATA[ something
	    CDATA_ENDING: S++, // ]
	    CDATA_ENDING_2: S++, // ]]
	    PROC_INST: S++, // <?hi
	    PROC_INST_BODY: S++, // <?hi there
	    PROC_INST_ENDING: S++, // <?hi "there" ?
	    OPEN_TAG: S++, // <strong
	    OPEN_TAG_SLASH: S++, // <strong /
	    ATTRIB: S++, // <a
	    ATTRIB_NAME: S++, // <a foo
	    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _
	    ATTRIB_VALUE: S++, // <a foo=
	    ATTRIB_VALUE_QUOTED: S++, // <a foo="bar
	    ATTRIB_VALUE_CLOSED: S++, // <a foo="bar"
	    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar
	    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar="&quot;"
	    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot
	    CLOSE_TAG: S++, // </a
	    CLOSE_TAG_SAW_WHITE: S++, // </a   >
	    SCRIPT: S++, // <script> ...
	    SCRIPT_ENDING: S++ // <script> ... <
	  }

	  sax.XML_ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'"
	  }

	  sax.ENTITIES = {
	    'amp': '&',
	    'gt': '>',
	    'lt': '<',
	    'quot': '"',
	    'apos': "'",
	    'AElig': 198,
	    'Aacute': 193,
	    'Acirc': 194,
	    'Agrave': 192,
	    'Aring': 197,
	    'Atilde': 195,
	    'Auml': 196,
	    'Ccedil': 199,
	    'ETH': 208,
	    'Eacute': 201,
	    'Ecirc': 202,
	    'Egrave': 200,
	    'Euml': 203,
	    'Iacute': 205,
	    'Icirc': 206,
	    'Igrave': 204,
	    'Iuml': 207,
	    'Ntilde': 209,
	    'Oacute': 211,
	    'Ocirc': 212,
	    'Ograve': 210,
	    'Oslash': 216,
	    'Otilde': 213,
	    'Ouml': 214,
	    'THORN': 222,
	    'Uacute': 218,
	    'Ucirc': 219,
	    'Ugrave': 217,
	    'Uuml': 220,
	    'Yacute': 221,
	    'aacute': 225,
	    'acirc': 226,
	    'aelig': 230,
	    'agrave': 224,
	    'aring': 229,
	    'atilde': 227,
	    'auml': 228,
	    'ccedil': 231,
	    'eacute': 233,
	    'ecirc': 234,
	    'egrave': 232,
	    'eth': 240,
	    'euml': 235,
	    'iacute': 237,
	    'icirc': 238,
	    'igrave': 236,
	    'iuml': 239,
	    'ntilde': 241,
	    'oacute': 243,
	    'ocirc': 244,
	    'ograve': 242,
	    'oslash': 248,
	    'otilde': 245,
	    'ouml': 246,
	    'szlig': 223,
	    'thorn': 254,
	    'uacute': 250,
	    'ucirc': 251,
	    'ugrave': 249,
	    'uuml': 252,
	    'yacute': 253,
	    'yuml': 255,
	    'copy': 169,
	    'reg': 174,
	    'nbsp': 160,
	    'iexcl': 161,
	    'cent': 162,
	    'pound': 163,
	    'curren': 164,
	    'yen': 165,
	    'brvbar': 166,
	    'sect': 167,
	    'uml': 168,
	    'ordf': 170,
	    'laquo': 171,
	    'not': 172,
	    'shy': 173,
	    'macr': 175,
	    'deg': 176,
	    'plusmn': 177,
	    'sup1': 185,
	    'sup2': 178,
	    'sup3': 179,
	    'acute': 180,
	    'micro': 181,
	    'para': 182,
	    'middot': 183,
	    'cedil': 184,
	    'ordm': 186,
	    'raquo': 187,
	    'frac14': 188,
	    'frac12': 189,
	    'frac34': 190,
	    'iquest': 191,
	    'times': 215,
	    'divide': 247,
	    'OElig': 338,
	    'oelig': 339,
	    'Scaron': 352,
	    'scaron': 353,
	    'Yuml': 376,
	    'fnof': 402,
	    'circ': 710,
	    'tilde': 732,
	    'Alpha': 913,
	    'Beta': 914,
	    'Gamma': 915,
	    'Delta': 916,
	    'Epsilon': 917,
	    'Zeta': 918,
	    'Eta': 919,
	    'Theta': 920,
	    'Iota': 921,
	    'Kappa': 922,
	    'Lambda': 923,
	    'Mu': 924,
	    'Nu': 925,
	    'Xi': 926,
	    'Omicron': 927,
	    'Pi': 928,
	    'Rho': 929,
	    'Sigma': 931,
	    'Tau': 932,
	    'Upsilon': 933,
	    'Phi': 934,
	    'Chi': 935,
	    'Psi': 936,
	    'Omega': 937,
	    'alpha': 945,
	    'beta': 946,
	    'gamma': 947,
	    'delta': 948,
	    'epsilon': 949,
	    'zeta': 950,
	    'eta': 951,
	    'theta': 952,
	    'iota': 953,
	    'kappa': 954,
	    'lambda': 955,
	    'mu': 956,
	    'nu': 957,
	    'xi': 958,
	    'omicron': 959,
	    'pi': 960,
	    'rho': 961,
	    'sigmaf': 962,
	    'sigma': 963,
	    'tau': 964,
	    'upsilon': 965,
	    'phi': 966,
	    'chi': 967,
	    'psi': 968,
	    'omega': 969,
	    'thetasym': 977,
	    'upsih': 978,
	    'piv': 982,
	    'ensp': 8194,
	    'emsp': 8195,
	    'thinsp': 8201,
	    'zwnj': 8204,
	    'zwj': 8205,
	    'lrm': 8206,
	    'rlm': 8207,
	    'ndash': 8211,
	    'mdash': 8212,
	    'lsquo': 8216,
	    'rsquo': 8217,
	    'sbquo': 8218,
	    'ldquo': 8220,
	    'rdquo': 8221,
	    'bdquo': 8222,
	    'dagger': 8224,
	    'Dagger': 8225,
	    'bull': 8226,
	    'hellip': 8230,
	    'permil': 8240,
	    'prime': 8242,
	    'Prime': 8243,
	    'lsaquo': 8249,
	    'rsaquo': 8250,
	    'oline': 8254,
	    'frasl': 8260,
	    'euro': 8364,
	    'image': 8465,
	    'weierp': 8472,
	    'real': 8476,
	    'trade': 8482,
	    'alefsym': 8501,
	    'larr': 8592,
	    'uarr': 8593,
	    'rarr': 8594,
	    'darr': 8595,
	    'harr': 8596,
	    'crarr': 8629,
	    'lArr': 8656,
	    'uArr': 8657,
	    'rArr': 8658,
	    'dArr': 8659,
	    'hArr': 8660,
	    'forall': 8704,
	    'part': 8706,
	    'exist': 8707,
	    'empty': 8709,
	    'nabla': 8711,
	    'isin': 8712,
	    'notin': 8713,
	    'ni': 8715,
	    'prod': 8719,
	    'sum': 8721,
	    'minus': 8722,
	    'lowast': 8727,
	    'radic': 8730,
	    'prop': 8733,
	    'infin': 8734,
	    'ang': 8736,
	    'and': 8743,
	    'or': 8744,
	    'cap': 8745,
	    'cup': 8746,
	    'int': 8747,
	    'there4': 8756,
	    'sim': 8764,
	    'cong': 8773,
	    'asymp': 8776,
	    'ne': 8800,
	    'equiv': 8801,
	    'le': 8804,
	    'ge': 8805,
	    'sub': 8834,
	    'sup': 8835,
	    'nsub': 8836,
	    'sube': 8838,
	    'supe': 8839,
	    'oplus': 8853,
	    'otimes': 8855,
	    'perp': 8869,
	    'sdot': 8901,
	    'lceil': 8968,
	    'rceil': 8969,
	    'lfloor': 8970,
	    'rfloor': 8971,
	    'lang': 9001,
	    'rang': 9002,
	    'loz': 9674,
	    'spades': 9824,
	    'clubs': 9827,
	    'hearts': 9829,
	    'diams': 9830
	  }

	  Object.keys(sax.ENTITIES).forEach(function (key) {
	    var e = sax.ENTITIES[key]
	    var s = typeof e === 'number' ? String.fromCharCode(e) : e
	    sax.ENTITIES[key] = s
	  })

	  for (var s in sax.STATE) {
	    sax.STATE[sax.STATE[s]] = s
	  }

	  // shorthand
	  S = sax.STATE

	  function emit (parser, event, data) {
	    parser[event] && parser[event](data)
	  }

	  function emitNode (parser, nodeType, data) {
	    if (parser.textNode) closeText(parser)
	    emit(parser, nodeType, data)
	  }

	  function closeText (parser) {
	    parser.textNode = textopts(parser.opt, parser.textNode)
	    if (parser.textNode) emit(parser, 'ontext', parser.textNode)
	    parser.textNode = ''
	  }

	  function textopts (opt, text) {
	    if (opt.trim) text = text.trim()
	    if (opt.normalize) text = text.replace(/\s+/g, ' ')
	    return text
	  }

	  function error (parser, er) {
	    closeText(parser)
	    if (parser.trackPosition) {
	      er += '\nLine: ' + parser.line +
	        '\nColumn: ' + parser.column +
	        '\nChar: ' + parser.c
	    }
	    er = new Error(er)
	    parser.error = er
	    emit(parser, 'onerror', er)
	    return parser
	  }

	  function end (parser) {
	    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')
	    if ((parser.state !== S.BEGIN) &&
	      (parser.state !== S.BEGIN_WHITESPACE) &&
	      (parser.state !== S.TEXT)) {
	      error(parser, 'Unexpected end')
	    }
	    closeText(parser)
	    parser.c = ''
	    parser.closed = true
	    emit(parser, 'onend')
	    SAXParser.call(parser, parser.strict, parser.opt)
	    return parser
	  }

	  function strictFail (parser, message) {
	    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {
	      throw new Error('bad call to strictFail')
	    }
	    if (parser.strict) {
	      error(parser, message)
	    }
	  }

	  function newTag (parser) {
	    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
	    var parent = parser.tags[parser.tags.length - 1] || parser
	    var tag = parser.tag = { name: parser.tagName, attributes: {} }

	    // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
	    if (parser.opt.xmlns) {
	      tag.ns = parent.ns
	    }
	    parser.attribList.length = 0
	    emitNode(parser, 'onopentagstart', tag)
	  }

	  function qname (name, attribute) {
	    var i = name.indexOf(':')
	    var qualName = i < 0 ? [ '', name ] : name.split(':')
	    var prefix = qualName[0]
	    var local = qualName[1]

	    // <x "xmlns"="http://foo">
	    if (attribute && name === 'xmlns') {
	      prefix = 'xmlns'
	      local = ''
	    }

	    return { prefix: prefix, local: local }
	  }

	  function attrib (parser) {
	    if (!parser.strict) {
	      parser.attribName = parser.attribName[parser.looseCase]()
	    }

	    if (parser.attribList.indexOf(parser.attribName) !== -1 ||
	      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
	      parser.attribName = parser.attribValue = ''
	      return
	    }

	    if (parser.opt.xmlns) {
	      var qn = qname(parser.attribName, true)
	      var prefix = qn.prefix
	      var local = qn.local

	      if (prefix === 'xmlns') {
	        // namespace binding attribute. push the binding into scope
	        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {
	          strictFail(parser,
	            'xml: prefix must be bound to ' + XML_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {
	          strictFail(parser,
	            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\n' +
	            'Actual: ' + parser.attribValue)
	        } else {
	          var tag = parser.tag
	          var parent = parser.tags[parser.tags.length - 1] || parser
	          if (tag.ns === parent.ns) {
	            tag.ns = Object.create(parent.ns)
	          }
	          tag.ns[local] = parser.attribValue
	        }
	      }

	      // defer onattribute events until all attributes have been seen
	      // so any new bindings can take effect. preserve attribute order
	      // so deferred events can be emitted in document order
	      parser.attribList.push([parser.attribName, parser.attribValue])
	    } else {
	      // in non-xmlns mode, we can emit the event right away
	      parser.tag.attributes[parser.attribName] = parser.attribValue
	      emitNode(parser, 'onattribute', {
	        name: parser.attribName,
	        value: parser.attribValue
	      })
	    }

	    parser.attribName = parser.attribValue = ''
	  }

	  function openTag (parser, selfClosing) {
	    if (parser.opt.xmlns) {
	      // emit namespace binding events
	      var tag = parser.tag

	      // add namespace info to tag
	      var qn = qname(parser.tagName)
	      tag.prefix = qn.prefix
	      tag.local = qn.local
	      tag.uri = tag.ns[qn.prefix] || ''

	      if (tag.prefix && !tag.uri) {
	        strictFail(parser, 'Unbound namespace prefix: ' +
	          JSON.stringify(parser.tagName))
	        tag.uri = qn.prefix
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (tag.ns && parent.ns !== tag.ns) {
	        Object.keys(tag.ns).forEach(function (p) {
	          emitNode(parser, 'onopennamespace', {
	            prefix: p,
	            uri: tag.ns[p]
	          })
	        })
	      }

	      // handle deferred onattribute events
	      // Note: do not apply default ns to attributes:
	      //   http://www.w3.org/TR/REC-xml-names/#defaulting
	      for (var i = 0, l = parser.attribList.length; i < l; i++) {
	        var nv = parser.attribList[i]
	        var name = nv[0]
	        var value = nv[1]
	        var qualName = qname(name, true)
	        var prefix = qualName.prefix
	        var local = qualName.local
	        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')
	        var a = {
	          name: name,
	          value: value,
	          prefix: prefix,
	          local: local,
	          uri: uri
	        }

	        // if there's any attributes with an undefined namespace,
	        // then fail on them now.
	        if (prefix && prefix !== 'xmlns' && !uri) {
	          strictFail(parser, 'Unbound namespace prefix: ' +
	            JSON.stringify(prefix))
	          a.uri = prefix
	        }
	        parser.tag.attributes[name] = a
	        emitNode(parser, 'onattribute', a)
	      }
	      parser.attribList.length = 0
	    }

	    parser.tag.isSelfClosing = !!selfClosing

	    // process the tag
	    parser.sawRoot = true
	    parser.tags.push(parser.tag)
	    emitNode(parser, 'onopentag', parser.tag)
	    if (!selfClosing) {
	      // special case for <script> in non-strict mode.
	      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {
	        parser.state = S.SCRIPT
	      } else {
	        parser.state = S.TEXT
	      }
	      parser.tag = null
	      parser.tagName = ''
	    }
	    parser.attribName = parser.attribValue = ''
	    parser.attribList.length = 0
	  }

	  function closeTag (parser) {
	    if (!parser.tagName) {
	      strictFail(parser, 'Weird empty close tag.')
	      parser.textNode += '</>'
	      parser.state = S.TEXT
	      return
	    }

	    if (parser.script) {
	      if (parser.tagName !== 'script') {
	        parser.script += '</' + parser.tagName + '>'
	        parser.tagName = ''
	        parser.state = S.SCRIPT
	        return
	      }
	      emitNode(parser, 'onscript', parser.script)
	      parser.script = ''
	    }

	    // first make sure that the closing tag actually exists.
	    // <a><b></c></b></a> will close everything, otherwise.
	    var t = parser.tags.length
	    var tagName = parser.tagName
	    if (!parser.strict) {
	      tagName = tagName[parser.looseCase]()
	    }
	    var closeTo = tagName
	    while (t--) {
	      var close = parser.tags[t]
	      if (close.name !== closeTo) {
	        // fail the first time in strict mode
	        strictFail(parser, 'Unexpected close tag')
	      } else {
	        break
	      }
	    }

	    // didn't find it.  we already failed for strict, so just abort.
	    if (t < 0) {
	      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)
	      parser.textNode += '</' + parser.tagName + '>'
	      parser.state = S.TEXT
	      return
	    }
	    parser.tagName = tagName
	    var s = parser.tags.length
	    while (s-- > t) {
	      var tag = parser.tag = parser.tags.pop()
	      parser.tagName = parser.tag.name
	      emitNode(parser, 'onclosetag', parser.tagName)

	      var x = {}
	      for (var i in tag.ns) {
	        x[i] = tag.ns[i]
	      }

	      var parent = parser.tags[parser.tags.length - 1] || parser
	      if (parser.opt.xmlns && tag.ns !== parent.ns) {
	        // remove namespace bindings introduced by tag
	        Object.keys(tag.ns).forEach(function (p) {
	          var n = tag.ns[p]
	          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })
	        })
	      }
	    }
	    if (t === 0) parser.closedRoot = true
	    parser.tagName = parser.attribValue = parser.attribName = ''
	    parser.attribList.length = 0
	    parser.state = S.TEXT
	  }

	  function parseEntity (parser) {
	    var entity = parser.entity
	    var entityLC = entity.toLowerCase()
	    var num
	    var numStr = ''

	    if (parser.ENTITIES[entity]) {
	      return parser.ENTITIES[entity]
	    }
	    if (parser.ENTITIES[entityLC]) {
	      return parser.ENTITIES[entityLC]
	    }
	    entity = entityLC
	    if (entity.charAt(0) === '#') {
	      if (entity.charAt(1) === 'x') {
	        entity = entity.slice(2)
	        num = parseInt(entity, 16)
	        numStr = num.toString(16)
	      } else {
	        entity = entity.slice(1)
	        num = parseInt(entity, 10)
	        numStr = num.toString(10)
	      }
	    }
	    entity = entity.replace(/^0+/, '')
	    if (numStr.toLowerCase() !== entity) {
	      strictFail(parser, 'Invalid character entity')
	      return '&' + parser.entity + ';'
	    }

	    return String.fromCodePoint(num)
	  }

	  function beginWhiteSpace (parser, c) {
	    if (c === '<') {
	      parser.state = S.OPEN_WAKA
	      parser.startTagPosition = parser.position
	    } else if (not(whitespace, c)) {
	      // have to process this as a text node.
	      // weird, but happens.
	      strictFail(parser, 'Non-whitespace before first tag.')
	      parser.textNode = c
	      parser.state = S.TEXT
	    }
	  }

	  function charAt (chunk, i) {
	    var result = ''
	    if (i < chunk.length) {
	      result = chunk.charAt(i)
	    }
	    return result
	  }

	  function write (chunk) {
	    var parser = this
	    if (this.error) {
	      throw this.error
	    }
	    if (parser.closed) {
	      return error(parser,
	        'Cannot write after close. Assign an onready handler.')
	    }
	    if (chunk === null) {
	      return end(parser)
	    }
	    if (typeof chunk === 'object') {
	      chunk = chunk.toString()
	    }
	    var i = 0
	    var c = ''
	    while (true) {
	      c = charAt(chunk, i++)
	      parser.c = c
	      if (!c) {
	        break
	      }
	      if (parser.trackPosition) {
	        parser.position++
	        if (c === '\n') {
	          parser.line++
	          parser.column = 0
	        } else {
	          parser.column++
	        }
	      }
	      switch (parser.state) {
	        case S.BEGIN:
	          parser.state = S.BEGIN_WHITESPACE
	          if (c === '\uFEFF') {
	            continue
	          }
	          beginWhiteSpace(parser, c)
	          continue

	        case S.BEGIN_WHITESPACE:
	          beginWhiteSpace(parser, c)
	          continue

	        case S.TEXT:
	          if (parser.sawRoot && !parser.closedRoot) {
	            var starti = i - 1
	            while (c && c !== '<' && c !== '&') {
	              c = charAt(chunk, i++)
	              if (c && parser.trackPosition) {
	                parser.position++
	                if (c === '\n') {
	                  parser.line++
	                  parser.column = 0
	                } else {
	                  parser.column++
	                }
	              }
	            }
	            parser.textNode += chunk.substring(starti, i - 1)
	          }
	          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
	            parser.state = S.OPEN_WAKA
	            parser.startTagPosition = parser.position
	          } else {
	            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {
	              strictFail(parser, 'Text data outside of root node.')
	            }
	            if (c === '&') {
	              parser.state = S.TEXT_ENTITY
	            } else {
	              parser.textNode += c
	            }
	          }
	          continue

	        case S.SCRIPT:
	          // only non-strict
	          if (c === '<') {
	            parser.state = S.SCRIPT_ENDING
	          } else {
	            parser.script += c
	          }
	          continue

	        case S.SCRIPT_ENDING:
	          if (c === '/') {
	            parser.state = S.CLOSE_TAG
	          } else {
	            parser.script += '<' + c
	            parser.state = S.SCRIPT
	          }
	          continue

	        case S.OPEN_WAKA:
	          // either a /, ?, !, or text is coming next.
	          if (c === '!') {
	            parser.state = S.SGML_DECL
	            parser.sgmlDecl = ''
	          } else if (is(whitespace, c)) {
	            // wait for it...
	          } else if (is(nameStart, c)) {
	            parser.state = S.OPEN_TAG
	            parser.tagName = c
	          } else if (c === '/') {
	            parser.state = S.CLOSE_TAG
	            parser.tagName = ''
	          } else if (c === '?') {
	            parser.state = S.PROC_INST
	            parser.procInstName = parser.procInstBody = ''
	          } else {
	            strictFail(parser, 'Unencoded <')
	            // if there was some whitespace, then add that in.
	            if (parser.startTagPosition + 1 < parser.position) {
	              var pad = parser.position - parser.startTagPosition
	              c = new Array(pad).join(' ') + c
	            }
	            parser.textNode += '<' + c
	            parser.state = S.TEXT
	          }
	          continue

	        case S.SGML_DECL:
	          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {
	            emitNode(parser, 'onopencdata')
	            parser.state = S.CDATA
	            parser.sgmlDecl = ''
	            parser.cdata = ''
	          } else if (parser.sgmlDecl + c === '--') {
	            parser.state = S.COMMENT
	            parser.comment = ''
	            parser.sgmlDecl = ''
	          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {
	            parser.state = S.DOCTYPE
	            if (parser.doctype || parser.sawRoot) {
	              strictFail(parser,
	                'Inappropriately located doctype declaration')
	            }
	            parser.doctype = ''
	            parser.sgmlDecl = ''
	          } else if (c === '>') {
	            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)
	            parser.sgmlDecl = ''
	            parser.state = S.TEXT
	          } else if (is(quote, c)) {
	            parser.state = S.SGML_DECL_QUOTED
	            parser.sgmlDecl += c
	          } else {
	            parser.sgmlDecl += c
	          }
	          continue

	        case S.SGML_DECL_QUOTED:
	          if (c === parser.q) {
	            parser.state = S.SGML_DECL
	            parser.q = ''
	          }
	          parser.sgmlDecl += c
	          continue

	        case S.DOCTYPE:
	          if (c === '>') {
	            parser.state = S.TEXT
	            emitNode(parser, 'ondoctype', parser.doctype)
	            parser.doctype = true // just remember that we saw it.
	          } else {
	            parser.doctype += c
	            if (c === '[') {
	              parser.state = S.DOCTYPE_DTD
	            } else if (is(quote, c)) {
	              parser.state = S.DOCTYPE_QUOTED
	              parser.q = c
	            }
	          }
	          continue

	        case S.DOCTYPE_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.q = ''
	            parser.state = S.DOCTYPE
	          }
	          continue

	        case S.DOCTYPE_DTD:
	          parser.doctype += c
	          if (c === ']') {
	            parser.state = S.DOCTYPE
	          } else if (is(quote, c)) {
	            parser.state = S.DOCTYPE_DTD_QUOTED
	            parser.q = c
	          }
	          continue

	        case S.DOCTYPE_DTD_QUOTED:
	          parser.doctype += c
	          if (c === parser.q) {
	            parser.state = S.DOCTYPE_DTD
	            parser.q = ''
	          }
	          continue

	        case S.COMMENT:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDING
	          } else {
	            parser.comment += c
	          }
	          continue

	        case S.COMMENT_ENDING:
	          if (c === '-') {
	            parser.state = S.COMMENT_ENDED
	            parser.comment = textopts(parser.opt, parser.comment)
	            if (parser.comment) {
	              emitNode(parser, 'oncomment', parser.comment)
	            }
	            parser.comment = ''
	          } else {
	            parser.comment += '-' + c
	            parser.state = S.COMMENT
	          }
	          continue

	        case S.COMMENT_ENDED:
	          if (c !== '>') {
	            strictFail(parser, 'Malformed comment')
	            // allow <!-- blah -- bloo --> in non-strict mode,
	            // which is a comment of " blah -- bloo "
	            parser.comment += '--' + c
	            parser.state = S.COMMENT
	          } else {
	            parser.state = S.TEXT
	          }
	          continue

	        case S.CDATA:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING
	          } else {
	            parser.cdata += c
	          }
	          continue

	        case S.CDATA_ENDING:
	          if (c === ']') {
	            parser.state = S.CDATA_ENDING_2
	          } else {
	            parser.cdata += ']' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.CDATA_ENDING_2:
	          if (c === '>') {
	            if (parser.cdata) {
	              emitNode(parser, 'oncdata', parser.cdata)
	            }
	            emitNode(parser, 'onclosecdata')
	            parser.cdata = ''
	            parser.state = S.TEXT
	          } else if (c === ']') {
	            parser.cdata += ']'
	          } else {
	            parser.cdata += ']]' + c
	            parser.state = S.CDATA
	          }
	          continue

	        case S.PROC_INST:
	          if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else if (is(whitespace, c)) {
	            parser.state = S.PROC_INST_BODY
	          } else {
	            parser.procInstName += c
	          }
	          continue

	        case S.PROC_INST_BODY:
	          if (!parser.procInstBody && is(whitespace, c)) {
	            continue
	          } else if (c === '?') {
	            parser.state = S.PROC_INST_ENDING
	          } else {
	            parser.procInstBody += c
	          }
	          continue

	        case S.PROC_INST_ENDING:
	          if (c === '>') {
	            emitNode(parser, 'onprocessinginstruction', {
	              name: parser.procInstName,
	              body: parser.procInstBody
	            })
	            parser.procInstName = parser.procInstBody = ''
	            parser.state = S.TEXT
	          } else {
	            parser.procInstBody += '?' + c
	            parser.state = S.PROC_INST_BODY
	          }
	          continue

	        case S.OPEN_TAG:
	          if (is(nameBody, c)) {
	            parser.tagName += c
	          } else {
	            newTag(parser)
	            if (c === '>') {
	              openTag(parser)
	            } else if (c === '/') {
	              parser.state = S.OPEN_TAG_SLASH
	            } else {
	              if (not(whitespace, c)) {
	                strictFail(parser, 'Invalid character in tag name')
	              }
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.OPEN_TAG_SLASH:
	          if (c === '>') {
	            openTag(parser, true)
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Forward-slash in opening tag not followed by >')
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.ATTRIB:
	          // haven't read the attribute name yet.
	          if (is(whitespace, c)) {
	            continue
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (c === '>') {
	            strictFail(parser, 'Attribute without value')
	            parser.attribValue = parser.attribName
	            attrib(parser)
	            openTag(parser)
	          } else if (is(whitespace, c)) {
	            parser.state = S.ATTRIB_NAME_SAW_WHITE
	          } else if (is(nameBody, c)) {
	            parser.attribName += c
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_NAME_SAW_WHITE:
	          if (c === '=') {
	            parser.state = S.ATTRIB_VALUE
	          } else if (is(whitespace, c)) {
	            continue
	          } else {
	            strictFail(parser, 'Attribute without value')
	            parser.tag.attributes[parser.attribName] = ''
	            parser.attribValue = ''
	            emitNode(parser, 'onattribute', {
	              name: parser.attribName,
	              value: ''
	            })
	            parser.attribName = ''
	            if (c === '>') {
	              openTag(parser)
	            } else if (is(nameStart, c)) {
	              parser.attribName = c
	              parser.state = S.ATTRIB_NAME
	            } else {
	              strictFail(parser, 'Invalid attribute name')
	              parser.state = S.ATTRIB
	            }
	          }
	          continue

	        case S.ATTRIB_VALUE:
	          if (is(whitespace, c)) {
	            continue
	          } else if (is(quote, c)) {
	            parser.q = c
	            parser.state = S.ATTRIB_VALUE_QUOTED
	          } else {
	            strictFail(parser, 'Unquoted attribute value')
	            parser.state = S.ATTRIB_VALUE_UNQUOTED
	            parser.attribValue = c
	          }
	          continue

	        case S.ATTRIB_VALUE_QUOTED:
	          if (c !== parser.q) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_Q
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          parser.q = ''
	          parser.state = S.ATTRIB_VALUE_CLOSED
	          continue

	        case S.ATTRIB_VALUE_CLOSED:
	          if (is(whitespace, c)) {
	            parser.state = S.ATTRIB
	          } else if (c === '>') {
	            openTag(parser)
	          } else if (c === '/') {
	            parser.state = S.OPEN_TAG_SLASH
	          } else if (is(nameStart, c)) {
	            strictFail(parser, 'No whitespace between attributes')
	            parser.attribName = c
	            parser.attribValue = ''
	            parser.state = S.ATTRIB_NAME
	          } else {
	            strictFail(parser, 'Invalid attribute name')
	          }
	          continue

	        case S.ATTRIB_VALUE_UNQUOTED:
	          if (not(attribEnd, c)) {
	            if (c === '&') {
	              parser.state = S.ATTRIB_VALUE_ENTITY_U
	            } else {
	              parser.attribValue += c
	            }
	            continue
	          }
	          attrib(parser)
	          if (c === '>') {
	            openTag(parser)
	          } else {
	            parser.state = S.ATTRIB
	          }
	          continue

	        case S.CLOSE_TAG:
	          if (!parser.tagName) {
	            if (is(whitespace, c)) {
	              continue
	            } else if (not(nameStart, c)) {
	              if (parser.script) {
	                parser.script += '</' + c
	                parser.state = S.SCRIPT
	              } else {
	                strictFail(parser, 'Invalid tagname in closing tag.')
	              }
	            } else {
	              parser.tagName = c
	            }
	          } else if (c === '>') {
	            closeTag(parser)
	          } else if (is(nameBody, c)) {
	            parser.tagName += c
	          } else if (parser.script) {
	            parser.script += '</' + parser.tagName
	            parser.tagName = ''
	            parser.state = S.SCRIPT
	          } else {
	            if (not(whitespace, c)) {
	              strictFail(parser, 'Invalid tagname in closing tag')
	            }
	            parser.state = S.CLOSE_TAG_SAW_WHITE
	          }
	          continue

	        case S.CLOSE_TAG_SAW_WHITE:
	          if (is(whitespace, c)) {
	            continue
	          }
	          if (c === '>') {
	            closeTag(parser)
	          } else {
	            strictFail(parser, 'Invalid characters in closing tag')
	          }
	          continue

	        case S.TEXT_ENTITY:
	        case S.ATTRIB_VALUE_ENTITY_Q:
	        case S.ATTRIB_VALUE_ENTITY_U:
	          var returnState
	          var buffer
	          switch (parser.state) {
	            case S.TEXT_ENTITY:
	              returnState = S.TEXT
	              buffer = 'textNode'
	              break

	            case S.ATTRIB_VALUE_ENTITY_Q:
	              returnState = S.ATTRIB_VALUE_QUOTED
	              buffer = 'attribValue'
	              break

	            case S.ATTRIB_VALUE_ENTITY_U:
	              returnState = S.ATTRIB_VALUE_UNQUOTED
	              buffer = 'attribValue'
	              break
	          }

	          if (c === ';') {
	            parser[buffer] += parseEntity(parser)
	            parser.entity = ''
	            parser.state = returnState
	          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {
	            parser.entity += c
	          } else {
	            strictFail(parser, 'Invalid character in entity name')
	            parser[buffer] += '&' + parser.entity + c
	            parser.entity = ''
	            parser.state = returnState
	          }

	          continue

	        default:
	          throw new Error(parser, 'Unknown state: ' + parser.state)
	      }
	    } // while

	    if (parser.position >= parser.bufferCheckPosition) {
	      checkBufferLength(parser)
	    }
	    return parser
	  }

	  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
	  if (!String.fromCodePoint) {
	    (function () {
	      var stringFromCharCode = String.fromCharCode
	      var floor = Math.floor
	      var fromCodePoint = function () {
	        var MAX_SIZE = 0x4000
	        var codeUnits = []
	        var highSurrogate
	        var lowSurrogate
	        var index = -1
	        var length = arguments.length
	        if (!length) {
	          return ''
	        }
	        var result = ''
	        while (++index < length) {
	          var codePoint = Number(arguments[index])
	          if (
	            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	            codePoint < 0 || // not a valid Unicode code point
	            codePoint > 0x10FFFF || // not a valid Unicode code point
	            floor(codePoint) !== codePoint // not an integer
	          ) {
	            throw RangeError('Invalid code point: ' + codePoint)
	          }
	          if (codePoint <= 0xFFFF) { // BMP code point
	            codeUnits.push(codePoint)
	          } else { // Astral code point; split in surrogate halves
	            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	            codePoint -= 0x10000
	            highSurrogate = (codePoint >> 10) + 0xD800
	            lowSurrogate = (codePoint % 0x400) + 0xDC00
	            codeUnits.push(highSurrogate, lowSurrogate)
	          }
	          if (index + 1 === length || codeUnits.length > MAX_SIZE) {
	            result += stringFromCharCode.apply(null, codeUnits)
	            codeUnits.length = 0
	          }
	        }
	        return result
	      }
	      if (Object.defineProperty) {
	        Object.defineProperty(String, 'fromCodePoint', {
	          value: fromCodePoint,
	          configurable: true,
	          writable: true
	        })
	      } else {
	        String.fromCodePoint = fromCodePoint
	      }
	    }())
	  }
	})( false ? this.sax = {} : exports)

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(51).Buffer))

/***/ }),
/* 132 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLBuilder, assign;

	  assign = __webpack_require__(133);

	  XMLBuilder = __webpack_require__(173);

	  module.exports.create = function(name, xmldec, doctype, options) {
	    options = assign({}, xmldec, doctype, options);
	    return new XMLBuilder(name, options).root();
	  };

	}).call(this);


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(134),
	    copyObject = __webpack_require__(148),
	    createAssigner = __webpack_require__(149),
	    isArrayLike = __webpack_require__(159),
	    isPrototype = __webpack_require__(162),
	    keys = __webpack_require__(163);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns own enumerable string keyed properties of source objects to the
	 * destination object. Source objects are applied from left to right.
	 * Subsequent sources overwrite property assignments of previous sources.
	 *
	 * **Note:** This method mutates `object` and is loosely based on
	 * [`Object.assign`](https://mdn.io/Object/assign).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.10.0
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @see _.assignIn
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * function Bar() {
	 *   this.c = 3;
	 * }
	 *
	 * Foo.prototype.b = 2;
	 * Bar.prototype.d = 4;
	 *
	 * _.assign({ 'a': 0 }, new Foo, new Bar);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var assign = createAssigner(function(object, source) {
	  if (isPrototype(source) || isArrayLike(source)) {
	    copyObject(source, keys(source), object);
	    return;
	  }
	  for (var key in source) {
	    if (hasOwnProperty.call(source, key)) {
	      assignValue(object, key, source[key]);
	    }
	  }
	});

	module.exports = assign;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(135),
	    eq = __webpack_require__(147);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
	      (value === undefined && !(key in object))) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(136);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137);

	var defineProperty = (function() {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}());

	module.exports = defineProperty;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(138),
	    getValue = __webpack_require__(146);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(139),
	    isMasked = __webpack_require__(141),
	    isObject = __webpack_require__(140),
	    toSource = __webpack_require__(145);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(140);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in Safari 8-9 which returns 'object' for typed array and other constructors.
	  var tag = isObject(value) ? objectToString.call(value) : '';
	  return tag == funcTag || tag == genTag || tag == proxyTag;
	}

	module.exports = isFunction;


/***/ }),
/* 140 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(142);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = (function() {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? ('Symbol(src)_1.' + uid) : '';
	}());

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && (maskSrcKey in func);
	}

	module.exports = isMasked;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(143);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(144);

	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;


/***/ }),
/* 144 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 145 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to process.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return (func + '');
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;


/***/ }),
/* 146 */
/***/ (function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;


/***/ }),
/* 147 */
/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || (value !== value && other !== other);
	}

	module.exports = eq;


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(134),
	    baseAssignValue = __webpack_require__(135);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer
	      ? customizer(object[key], source[key], key, object, source)
	      : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;


/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

	var baseRest = __webpack_require__(150),
	    isIterateeCall = __webpack_require__(158);

	/**
	 * Creates a function like `_.assign`.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return baseRest(function(object, sources) {
	    var index = -1,
	        length = sources.length,
	        customizer = length > 1 ? sources[length - 1] : undefined,
	        guard = length > 2 ? sources[2] : undefined;

	    customizer = (assigner.length > 3 && typeof customizer == 'function')
	      ? (length--, customizer)
	      : undefined;

	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    object = Object(object);
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, index, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(151),
	    overRest = __webpack_require__(152),
	    setToString = __webpack_require__(154);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;


/***/ }),
/* 151 */
/***/ (function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(153);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;


/***/ }),
/* 153 */
/***/ (function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0: return func.call(thisArg);
	    case 1: return func.call(thisArg, args[0]);
	    case 2: return func.call(thisArg, args[0], args[1]);
	    case 3: return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;


/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(155),
	    shortOut = __webpack_require__(157);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;


/***/ }),
/* 155 */
/***/ (function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(156),
	    defineProperty = __webpack_require__(136),
	    identity = __webpack_require__(151);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function(func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;


/***/ }),
/* 156 */
/***/ (function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function() {
	    return value;
	  };
	}

	module.exports = constant;


/***/ }),
/* 157 */
/***/ (function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 500,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function() {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;


/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(147),
	    isArrayLike = __webpack_require__(159),
	    isIndex = __webpack_require__(161),
	    isObject = __webpack_require__(140);

	/**
	 * Checks if the given arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	 *  else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	        ? (isArrayLike(object) && isIndex(index, object.length))
	        : (type == 'string' && index in object)
	      ) {
	    return eq(object[index], value);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(139),
	    isLength = __webpack_require__(160);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;


/***/ }),
/* 160 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' &&
	    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ }),
/* 161 */
/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return !!length &&
	    (typeof value == 'number' || reIsUint.test(value)) &&
	    (value > -1 && value % 1 == 0 && value < length);
	}

	module.exports = isIndex;


/***/ }),
/* 162 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;


/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(164),
	    baseKeys = __webpack_require__(170),
	    isArrayLike = __webpack_require__(159);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;


/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(165),
	    isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(169),
	    isIndex = __webpack_require__(161);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  // Safari 9 makes `arguments.length` enumerable in strict mode.
	  var result = (isArray(value) || isArguments(value))
	    ? baseTimes(value.length, String)
	    : [];

	  var length = result.length,
	      skipIndexes = !!length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) &&
	        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;


/***/ }),
/* 165 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;


/***/ }),
/* 166 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLikeObject = __webpack_require__(167);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
	    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
	}

	module.exports = isArguments;


/***/ }),
/* 167 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(159),
	    isObjectLike = __webpack_require__(168);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;


/***/ }),
/* 168 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ }),
/* 169 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;


/***/ }),
/* 170 */
/***/ (function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(162),
	    nativeKeys = __webpack_require__(171);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;


/***/ }),
/* 171 */
/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(172);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function(arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;


/***/ }),
/* 173 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

	  XMLStringifier = __webpack_require__(174);

	  XMLDeclaration = __webpack_require__(175);

	  XMLDocType = __webpack_require__(273);

	  XMLElement = __webpack_require__(190);

	  module.exports = XMLBuilder = (function() {
	    function XMLBuilder(name, options) {
	      var root, temp;
	      if (name == null) {
	        throw new Error("Root element needs a name");
	      }
	      if (options == null) {
	        options = {};
	      }
	      this.options = options;
	      this.stringify = new XMLStringifier(options);
	      temp = new XMLElement(this, 'doc');
	      root = temp.element(name);
	      root.isRoot = true;
	      root.documentObject = this;
	      this.rootObject = root;
	      if (!options.headless) {
	        root.declaration(options);
	        if ((options.pubID != null) || (options.sysID != null)) {
	          root.doctype(options);
	        }
	      }
	    }

	    XMLBuilder.prototype.root = function() {
	      return this.rootObject;
	    };

	    XMLBuilder.prototype.end = function(options) {
	      return this.toString(options);
	    };

	    XMLBuilder.prototype.toString = function(options) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      r = '';
	      if (this.xmldec != null) {
	        r += this.xmldec.toString(options);
	      }
	      if (this.doctype != null) {
	        r += this.doctype.toString(options);
	      }
	      r += this.rootObject.toString(options);
	      if (pretty && r.slice(-newline.length) === newline) {
	        r = r.slice(0, -newline.length);
	      }
	      return r;
	    };

	    return XMLBuilder;

	  })();

	}).call(this);


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLStringifier,
	    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
	    hasProp = {}.hasOwnProperty;

	  module.exports = XMLStringifier = (function() {
	    function XMLStringifier(options) {
	      this.assertLegalChar = bind(this.assertLegalChar, this);
	      var key, ref, value;
	      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
	      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
	      ref = (options != null ? options.stringify : void 0) || {};
	      for (key in ref) {
	        if (!hasProp.call(ref, key)) continue;
	        value = ref[key];
	        this[key] = value;
	      }
	    }

	    XMLStringifier.prototype.eleName = function(val) {
	      val = '' + val || '';
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.eleText = function(val) {
	      val = '' + val || '';
	      return this.assertLegalChar(this.elEscape(val));
	    };

	    XMLStringifier.prototype.cdata = function(val) {
	      val = '' + val || '';
	      if (val.match(/]]>/)) {
	        throw new Error("Invalid CDATA text: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.comment = function(val) {
	      val = '' + val || '';
	      if (val.match(/--/)) {
	        throw new Error("Comment text cannot contain double-hypen: " + val);
	      }
	      return this.assertLegalChar(val);
	    };

	    XMLStringifier.prototype.raw = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.attName = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.attValue = function(val) {
	      val = '' + val || '';
	      return this.attEscape(val);
	    };

	    XMLStringifier.prototype.insTarget = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.insValue = function(val) {
	      val = '' + val || '';
	      if (val.match(/\?>/)) {
	        throw new Error("Invalid processing instruction value: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlVersion = function(val) {
	      val = '' + val || '';
	      if (!val.match(/1\.[0-9]+/)) {
	        throw new Error("Invalid version number: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlEncoding = function(val) {
	      val = '' + val || '';
	      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
	        throw new Error("Invalid encoding: " + val);
	      }
	      return val;
	    };

	    XMLStringifier.prototype.xmlStandalone = function(val) {
	      if (val) {
	        return "yes";
	      } else {
	        return "no";
	      }
	    };

	    XMLStringifier.prototype.dtdPubID = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdSysID = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdElementValue = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdAttType = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdAttDefault = function(val) {
	      if (val != null) {
	        return '' + val || '';
	      } else {
	        return val;
	      }
	    };

	    XMLStringifier.prototype.dtdEntityValue = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.dtdNData = function(val) {
	      return '' + val || '';
	    };

	    XMLStringifier.prototype.convertAttKey = '@';

	    XMLStringifier.prototype.convertPIKey = '?';

	    XMLStringifier.prototype.convertTextKey = '#text';

	    XMLStringifier.prototype.convertCDataKey = '#cdata';

	    XMLStringifier.prototype.convertCommentKey = '#comment';

	    XMLStringifier.prototype.convertRawKey = '#raw';

	    XMLStringifier.prototype.assertLegalChar = function(str) {
	      var chars, chr;
	      if (this.allowSurrogateChars) {
	        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
	      } else {
	        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
	      }
	      chr = str.match(chars);
	      if (chr) {
	        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
	      }
	      return str;
	    };

	    XMLStringifier.prototype.elEscape = function(str) {
	      var ampregex;
	      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
	    };

	    XMLStringifier.prototype.attEscape = function(str) {
	      var ampregex;
	      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
	      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
	    };

	    return XMLStringifier;

	  })();

	}).call(this);


/***/ }),
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDeclaration, XMLNode, create, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(176);

	  isObject = __webpack_require__(140);

	  XMLNode = __webpack_require__(179);

	  module.exports = XMLDeclaration = (function(superClass) {
	    extend(XMLDeclaration, superClass);

	    function XMLDeclaration(parent, version, encoding, standalone) {
	      var ref;
	      XMLDeclaration.__super__.constructor.call(this, parent);
	      if (isObject(version)) {
	        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
	      }
	      if (!version) {
	        version = '1.0';
	      }
	      this.version = this.stringify.xmlVersion(version);
	      if (encoding != null) {
	        this.encoding = this.stringify.xmlEncoding(encoding);
	      }
	      if (standalone != null) {
	        this.standalone = this.stringify.xmlStandalone(standalone);
	      }
	    }

	    XMLDeclaration.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<?xml';
	      r += ' version="' + this.version + '"';
	      if (this.encoding != null) {
	        r += ' encoding="' + this.encoding + '"';
	      }
	      if (this.standalone != null) {
	        r += ' standalone="' + this.standalone + '"';
	      }
	      r += '?>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDeclaration;

	  })(XMLNode);

	}).call(this);


/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

	var baseAssign = __webpack_require__(177),
	    baseCreate = __webpack_require__(178);

	/**
	 * Creates an object that inherits from the `prototype` object. If a
	 * `properties` object is given, its own enumerable string keyed properties
	 * are assigned to the created object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Object
	 * @param {Object} prototype The object to inherit from.
	 * @param {Object} [properties] The properties to assign to the object.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * function Shape() {
	 *   this.x = 0;
	 *   this.y = 0;
	 * }
	 *
	 * function Circle() {
	 *   Shape.call(this);
	 * }
	 *
	 * Circle.prototype = _.create(Shape.prototype, {
	 *   'constructor': Circle
	 * });
	 *
	 * var circle = new Circle;
	 * circle instanceof Circle;
	 * // => true
	 *
	 * circle instanceof Shape;
	 * // => true
	 */
	function create(prototype, properties) {
	  var result = baseCreate(prototype);
	  return properties ? baseAssign(result, properties) : result;
	}

	module.exports = create;


/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(148),
	    keys = __webpack_require__(163);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ }),
/* 178 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(140);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = (function() {
	  function object() {}
	  return function(proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object;
	    object.prototype = undefined;
	    return result;
	  };
	}());

	module.exports = baseCreate;


/***/ }),
/* 179 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
	    hasProp = {}.hasOwnProperty;

	  isObject = __webpack_require__(140);

	  isFunction = __webpack_require__(139);

	  isEmpty = __webpack_require__(180);

	  XMLElement = null;

	  XMLCData = null;

	  XMLComment = null;

	  XMLDeclaration = null;

	  XMLDocType = null;

	  XMLRaw = null;

	  XMLText = null;

	  module.exports = XMLNode = (function() {
	    function XMLNode(parent) {
	      this.parent = parent;
	      this.options = this.parent.options;
	      this.stringify = this.parent.stringify;
	      if (XMLElement === null) {
	        XMLElement = __webpack_require__(190);
	        XMLCData = __webpack_require__(271);
	        XMLComment = __webpack_require__(272);
	        XMLDeclaration = __webpack_require__(175);
	        XMLDocType = __webpack_require__(273);
	        XMLRaw = __webpack_require__(278);
	        XMLText = __webpack_require__(279);
	      }
	    }

	    XMLNode.prototype.element = function(name, attributes, text) {
	      var childNode, item, j, k, key, lastChild, len, len1, ref, val;
	      lastChild = null;
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = attributes.valueOf();
	      if (!isObject(attributes)) {
	        ref = [attributes, text], text = ref[0], attributes = ref[1];
	      }
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (Array.isArray(name)) {
	        for (j = 0, len = name.length; j < len; j++) {
	          item = name[j];
	          lastChild = this.element(item);
	        }
	      } else if (isFunction(name)) {
	        lastChild = this.element(name.apply());
	      } else if (isObject(name)) {
	        for (key in name) {
	          if (!hasProp.call(name, key)) continue;
	          val = name[key];
	          if (isFunction(val)) {
	            val = val.apply();
	          }
	          if ((isObject(val)) && (isEmpty(val))) {
	            val = null;
	          }
	          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
	            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
	          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
	            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
	          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
	            for (k = 0, len1 = val.length; k < len1; k++) {
	              item = val[k];
	              childNode = {};
	              childNode[key] = item;
	              lastChild = this.element(childNode);
	            }
	          } else if (isObject(val)) {
	            lastChild = this.element(key);
	            lastChild.element(val);
	          } else {
	            lastChild = this.element(key, val);
	          }
	        }
	      } else {
	        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
	          lastChild = this.text(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
	          lastChild = this.cdata(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
	          lastChild = this.comment(text);
	        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
	          lastChild = this.raw(text);
	        } else {
	          lastChild = this.node(name, attributes, text);
	        }
	      }
	      if (lastChild == null) {
	        throw new Error("Could not create any elements with: " + name);
	      }
	      return lastChild;
	    };

	    XMLNode.prototype.insertBefore = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };

	    XMLNode.prototype.insertAfter = function(name, attributes, text) {
	      var child, i, removed;
	      if (this.isRoot) {
	        throw new Error("Cannot insert elements at root level");
	      }
	      i = this.parent.children.indexOf(this);
	      removed = this.parent.children.splice(i + 1);
	      child = this.parent.element(name, attributes, text);
	      Array.prototype.push.apply(this.parent.children, removed);
	      return child;
	    };

	    XMLNode.prototype.remove = function() {
	      var i, ref;
	      if (this.isRoot) {
	        throw new Error("Cannot remove the root element");
	      }
	      i = this.parent.children.indexOf(this);
	      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
	      return this.parent;
	    };

	    XMLNode.prototype.node = function(name, attributes, text) {
	      var child, ref;
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (attributes == null) {
	        attributes = {};
	      }
	      attributes = attributes.valueOf();
	      if (!isObject(attributes)) {
	        ref = [attributes, text], text = ref[0], attributes = ref[1];
	      }
	      child = new XMLElement(this, name, attributes);
	      if (text != null) {
	        child.text(text);
	      }
	      this.children.push(child);
	      return child;
	    };

	    XMLNode.prototype.text = function(value) {
	      var child;
	      child = new XMLText(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.raw = function(value) {
	      var child;
	      child = new XMLRaw(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLNode.prototype.declaration = function(version, encoding, standalone) {
	      var doc, xmldec;
	      doc = this.document();
	      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
	      doc.xmldec = xmldec;
	      return doc.root();
	    };

	    XMLNode.prototype.doctype = function(pubID, sysID) {
	      var doc, doctype;
	      doc = this.document();
	      doctype = new XMLDocType(doc, pubID, sysID);
	      doc.doctype = doctype;
	      return doctype;
	    };

	    XMLNode.prototype.up = function() {
	      if (this.isRoot) {
	        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
	      }
	      return this.parent;
	    };

	    XMLNode.prototype.root = function() {
	      var child;
	      if (this.isRoot) {
	        return this;
	      }
	      child = this.parent;
	      while (!child.isRoot) {
	        child = child.parent;
	      }
	      return child;
	    };

	    XMLNode.prototype.document = function() {
	      return this.root().documentObject;
	    };

	    XMLNode.prototype.end = function(options) {
	      return this.document().toString(options);
	    };

	    XMLNode.prototype.prev = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i < 1) {
	        throw new Error("Already at the first node");
	      }
	      return this.parent.children[i - 1];
	    };

	    XMLNode.prototype.next = function() {
	      var i;
	      if (this.isRoot) {
	        throw new Error("Root node has no siblings");
	      }
	      i = this.parent.children.indexOf(this);
	      if (i === -1 || i === this.parent.children.length - 1) {
	        throw new Error("Already at the last node");
	      }
	      return this.parent.children[i + 1];
	    };

	    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
	      var clonedRoot;
	      clonedRoot = xmlbuilder.root().clone();
	      clonedRoot.parent = this;
	      clonedRoot.isRoot = false;
	      this.children.push(clonedRoot);
	      return this;
	    };

	    XMLNode.prototype.ele = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.nod = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.txt = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.doc = function() {
	      return this.document();
	    };

	    XMLNode.prototype.dec = function(version, encoding, standalone) {
	      return this.declaration(version, encoding, standalone);
	    };

	    XMLNode.prototype.dtd = function(pubID, sysID) {
	      return this.doctype(pubID, sysID);
	    };

	    XMLNode.prototype.e = function(name, attributes, text) {
	      return this.element(name, attributes, text);
	    };

	    XMLNode.prototype.n = function(name, attributes, text) {
	      return this.node(name, attributes, text);
	    };

	    XMLNode.prototype.t = function(value) {
	      return this.text(value);
	    };

	    XMLNode.prototype.d = function(value) {
	      return this.cdata(value);
	    };

	    XMLNode.prototype.c = function(value) {
	      return this.comment(value);
	    };

	    XMLNode.prototype.r = function(value) {
	      return this.raw(value);
	    };

	    XMLNode.prototype.u = function() {
	      return this.up();
	    };

	    return XMLNode;

	  })();

	}).call(this);


/***/ }),
/* 180 */
/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(181),
	    isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(169),
	    isArrayLike = __webpack_require__(159),
	    isBuffer = __webpack_require__(188),
	    isPrototype = __webpack_require__(162),
	    nativeKeys = __webpack_require__(171);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (isArrayLike(value) &&
	      (isArray(value) || typeof value == 'string' ||
	        typeof value.splice == 'function' || isBuffer(value) || isArguments(value))) {
	    return !value.length;
	  }
	  var tag = getTag(value);
	  if (tag == mapTag || tag == setTag) {
	    return !value.size;
	  }
	  if (isPrototype(value)) {
	    return !nativeKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isEmpty;


/***/ }),
/* 181 */
/***/ (function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(182),
	    Map = __webpack_require__(183),
	    Promise = __webpack_require__(184),
	    Set = __webpack_require__(185),
	    WeakMap = __webpack_require__(186),
	    baseGetTag = __webpack_require__(187),
	    toSource = __webpack_require__(145);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
	    (Map && getTag(new Map) != mapTag) ||
	    (Promise && getTag(Promise.resolve()) != promiseTag) ||
	    (Set && getTag(new Set) != setTag) ||
	    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
	  getTag = function(value) {
	    var result = objectToString.call(value),
	        Ctor = result == objectTag ? value.constructor : undefined,
	        ctorString = Ctor ? toSource(Ctor) : undefined;

	    if (ctorString) {
	      switch (ctorString) {
	        case dataViewCtorString: return dataViewTag;
	        case mapCtorString: return mapTag;
	        case promiseCtorString: return promiseTag;
	        case setCtorString: return setTag;
	        case weakMapCtorString: return weakMapTag;
	      }
	    }
	    return result;
	  };
	}

	module.exports = getTag;


/***/ }),
/* 182 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137),
	    root = __webpack_require__(143);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;


/***/ }),
/* 183 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137),
	    root = __webpack_require__(143);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;


/***/ }),
/* 184 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137),
	    root = __webpack_require__(143);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;


/***/ }),
/* 185 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137),
	    root = __webpack_require__(143);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;


/***/ }),
/* 186 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137),
	    root = __webpack_require__(143);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;


/***/ }),
/* 187 */
/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * The base implementation of `getTag`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  return objectToString.call(value);
	}

	module.exports = baseGetTag;


/***/ }),
/* 188 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(143),
	    stubFalse = __webpack_require__(189);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(77)(module)))

/***/ }),
/* 189 */
/***/ (function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;


/***/ }),
/* 190 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(176);

	  isObject = __webpack_require__(140);

	  isFunction = __webpack_require__(139);

	  every = __webpack_require__(191);

	  XMLNode = __webpack_require__(179);

	  XMLAttribute = __webpack_require__(269);

	  XMLProcessingInstruction = __webpack_require__(270);

	  module.exports = XMLElement = (function(superClass) {
	    extend(XMLElement, superClass);

	    function XMLElement(parent, name, attributes) {
	      XMLElement.__super__.constructor.call(this, parent);
	      if (name == null) {
	        throw new Error("Missing element name");
	      }
	      this.name = this.stringify.eleName(name);
	      this.children = [];
	      this.instructions = [];
	      this.attributes = {};
	      if (attributes != null) {
	        this.attribute(attributes);
	      }
	    }

	    XMLElement.prototype.clone = function() {
	      var att, attName, clonedSelf, i, len, pi, ref, ref1;
	      clonedSelf = create(XMLElement.prototype, this);
	      if (clonedSelf.isRoot) {
	        clonedSelf.documentObject = null;
	      }
	      clonedSelf.attributes = {};
	      ref = this.attributes;
	      for (attName in ref) {
	        if (!hasProp.call(ref, attName)) continue;
	        att = ref[attName];
	        clonedSelf.attributes[attName] = att.clone();
	      }
	      clonedSelf.instructions = [];
	      ref1 = this.instructions;
	      for (i = 0, len = ref1.length; i < len; i++) {
	        pi = ref1[i];
	        clonedSelf.instructions.push(pi.clone());
	      }
	      clonedSelf.children = [];
	      this.children.forEach(function(child) {
	        var clonedChild;
	        clonedChild = child.clone();
	        clonedChild.parent = clonedSelf;
	        return clonedSelf.children.push(clonedChild);
	      });
	      return clonedSelf;
	    };

	    XMLElement.prototype.attribute = function(name, value) {
	      var attName, attValue;
	      if (name != null) {
	        name = name.valueOf();
	      }
	      if (isObject(name)) {
	        for (attName in name) {
	          if (!hasProp.call(name, attName)) continue;
	          attValue = name[attName];
	          this.attribute(attName, attValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        if (!this.options.skipNullAttributes || (value != null)) {
	          this.attributes[name] = new XMLAttribute(this, name, value);
	        }
	      }
	      return this;
	    };

	    XMLElement.prototype.removeAttribute = function(name) {
	      var attName, i, len;
	      if (name == null) {
	        throw new Error("Missing attribute name");
	      }
	      name = name.valueOf();
	      if (Array.isArray(name)) {
	        for (i = 0, len = name.length; i < len; i++) {
	          attName = name[i];
	          delete this.attributes[attName];
	        }
	      } else {
	        delete this.attributes[name];
	      }
	      return this;
	    };

	    XMLElement.prototype.instruction = function(target, value) {
	      var i, insTarget, insValue, instruction, len;
	      if (target != null) {
	        target = target.valueOf();
	      }
	      if (value != null) {
	        value = value.valueOf();
	      }
	      if (Array.isArray(target)) {
	        for (i = 0, len = target.length; i < len; i++) {
	          insTarget = target[i];
	          this.instruction(insTarget);
	        }
	      } else if (isObject(target)) {
	        for (insTarget in target) {
	          if (!hasProp.call(target, insTarget)) continue;
	          insValue = target[insTarget];
	          this.instruction(insTarget, insValue);
	        }
	      } else {
	        if (isFunction(value)) {
	          value = value.apply();
	        }
	        instruction = new XMLProcessingInstruction(this, target, value);
	        this.instructions.push(instruction);
	      }
	      return this;
	    };

	    XMLElement.prototype.toString = function(options, level) {
	      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      ref3 = this.instructions;
	      for (i = 0, len = ref3.length; i < len; i++) {
	        instruction = ref3[i];
	        r += instruction.toString(options, level);
	      }
	      if (pretty) {
	        r += space;
	      }
	      r += '<' + this.name;
	      ref4 = this.attributes;
	      for (name in ref4) {
	        if (!hasProp.call(ref4, name)) continue;
	        att = ref4[name];
	        r += att.toString(options);
	      }
	      if (this.children.length === 0 || every(this.children, function(e) {
	        return e.value === '';
	      })) {
	        r += '/>';
	        if (pretty) {
	          r += newline;
	        }
	      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
	        r += '>';
	        r += this.children[0].value;
	        r += '</' + this.name + '>';
	        r += newline;
	      } else {
	        r += '>';
	        if (pretty) {
	          r += newline;
	        }
	        ref5 = this.children;
	        for (j = 0, len1 = ref5.length; j < len1; j++) {
	          child = ref5[j];
	          r += child.toString(options, level + 1);
	        }
	        if (pretty) {
	          r += space;
	        }
	        r += '</' + this.name + '>';
	        if (pretty) {
	          r += newline;
	        }
	      }
	      return r;
	    };

	    XMLElement.prototype.att = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLElement.prototype.a = function(name, value) {
	      return this.attribute(name, value);
	    };

	    XMLElement.prototype.i = function(target, value) {
	      return this.instruction(target, value);
	    };

	    return XMLElement;

	  })(XMLNode);

	}).call(this);


/***/ }),
/* 191 */
/***/ (function(module, exports, __webpack_require__) {

	var arrayEvery = __webpack_require__(192),
	    baseEvery = __webpack_require__(193),
	    baseIteratee = __webpack_require__(199),
	    isArray = __webpack_require__(169),
	    isIterateeCall = __webpack_require__(158);

	/**
	 * Checks if `predicate` returns truthy for **all** elements of `collection`.
	 * Iteration is stopped once `predicate` returns falsey. The predicate is
	 * invoked with three arguments: (value, index|key, collection).
	 *
	 * **Note:** This method returns `true` for
	 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
	 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
	 * elements of empty collections.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity]
	 *  The function invoked per iteration.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.every([true, 1, null, 'yes'], Boolean);
	 * // => false
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': false },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.every(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.every(users, ['active', false]);
	 * // => true
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.every(users, 'active');
	 * // => false
	 */
	function every(collection, predicate, guard) {
	  var func = isArray(collection) ? arrayEvery : baseEvery;
	  if (guard && isIterateeCall(collection, predicate, guard)) {
	    predicate = undefined;
	  }
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = every;


/***/ }),
/* 192 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.every` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`.
	 */
	function arrayEvery(array, predicate) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (!predicate(array[index], index, array)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = arrayEvery;


/***/ }),
/* 193 */
/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(194);

	/**
	 * The base implementation of `_.every` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if all elements pass the predicate check,
	 *  else `false`
	 */
	function baseEvery(collection, predicate) {
	  var result = true;
	  baseEach(collection, function(value, index, collection) {
	    result = !!predicate(value, index, collection);
	    return result;
	  });
	  return result;
	}

	module.exports = baseEvery;


/***/ }),
/* 194 */
/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(195),
	    createBaseEach = __webpack_require__(198);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ }),
/* 195 */
/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(196),
	    keys = __webpack_require__(163);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ }),
/* 196 */
/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(197);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ }),
/* 197 */
/***/ (function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ }),
/* 198 */
/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(159);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ }),
/* 199 */
/***/ (function(module, exports, __webpack_require__) {

	var baseMatches = __webpack_require__(200),
	    baseMatchesProperty = __webpack_require__(251),
	    identity = __webpack_require__(151),
	    isArray = __webpack_require__(169),
	    property = __webpack_require__(266);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if (typeof value == 'object') {
	    return isArray(value)
	      ? baseMatchesProperty(value[0], value[1])
	      : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;


/***/ }),
/* 200 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(201),
	    getMatchData = __webpack_require__(248),
	    matchesStrictComparable = __webpack_require__(250);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function(object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ }),
/* 201 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(202),
	    baseIsEqual = __webpack_require__(230);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack;
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined
	            ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack)
	            : result
	          )) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ }),
/* 202 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(203),
	    stackClear = __webpack_require__(210),
	    stackDelete = __webpack_require__(211),
	    stackGet = __webpack_require__(212),
	    stackHas = __webpack_require__(213),
	    stackSet = __webpack_require__(214);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;


/***/ }),
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(204),
	    listCacheDelete = __webpack_require__(205),
	    listCacheGet = __webpack_require__(207),
	    listCacheHas = __webpack_require__(208),
	    listCacheSet = __webpack_require__(209);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;


/***/ }),
/* 204 */
/***/ (function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;


/***/ }),
/* 205 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(206);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;


/***/ }),
/* 206 */
/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(147);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;


/***/ }),
/* 207 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(206);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;


/***/ }),
/* 208 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(206);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;


/***/ }),
/* 209 */
/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(206);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;


/***/ }),
/* 210 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(203);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache;
	  this.size = 0;
	}

	module.exports = stackClear;


/***/ }),
/* 211 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;


/***/ }),
/* 212 */
/***/ (function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;


/***/ }),
/* 214 */
/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(203),
	    Map = __webpack_require__(183),
	    MapCache = __webpack_require__(215);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;


/***/ }),
/* 215 */
/***/ (function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(216),
	    mapCacheDelete = __webpack_require__(224),
	    mapCacheGet = __webpack_require__(227),
	    mapCacheHas = __webpack_require__(228),
	    mapCacheSet = __webpack_require__(229);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;


/***/ }),
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(217),
	    ListCache = __webpack_require__(203),
	    Map = __webpack_require__(183);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash,
	    'map': new (Map || ListCache),
	    'string': new Hash
	  };
	}

	module.exports = mapCacheClear;


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(218),
	    hashDelete = __webpack_require__(220),
	    hashGet = __webpack_require__(221),
	    hashHas = __webpack_require__(222),
	    hashSet = __webpack_require__(223);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	  var index = -1,
	      length = entries ? entries.length : 0;

	  this.clear();
	  while (++index < length) {
	    var entry = entries[index];
	    this.set(entry[0], entry[1]);
	  }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;


/***/ }),
/* 218 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;


/***/ }),
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(137);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;


/***/ }),
/* 220 */
/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;


/***/ }),
/* 223 */
/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(219);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;


/***/ }),
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(225);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(226);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key)
	    ? data[typeof key == 'string' ? 'string' : 'hash']
	    : data.map;
	}

	module.exports = getMapData;


/***/ }),
/* 226 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value;
	  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
	    ? (value !== '__proto__')
	    : (value === null);
	}

	module.exports = isKeyable;


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(225);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;


/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(225);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;


/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(225);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;


/***/ }),
/* 230 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(231),
	    isObject = __webpack_require__(140),
	    isObjectLike = __webpack_require__(168);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {boolean} [bitmask] The bitmask of comparison flags.
	 *  The bitmask may be composed of the following flags:
	 *     1 - Unordered comparison
	 *     2 - Partial comparison
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, bitmask, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
	}

	module.exports = baseIsEqual;


/***/ }),
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(202),
	    equalArrays = __webpack_require__(232),
	    equalByTag = __webpack_require__(238),
	    equalObjects = __webpack_require__(243),
	    getTag = __webpack_require__(181),
	    isArray = __webpack_require__(169),
	    isBuffer = __webpack_require__(188),
	    isTypedArray = __webpack_require__(244);

	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = getTag(object);
	    objTag = objTag == argsTag ? objectTag : objTag;
	  }
	  if (!othIsArr) {
	    othTag = getTag(other);
	    othTag = othTag == argsTag ? objectTag : othTag;
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack);
	    return (objIsArr || isTypedArray(object))
	      ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
	      : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
	  }
	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack);
	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack);
	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);
	}

	module.exports = baseIsEqualDeep;


/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(233),
	    arraySome = __webpack_require__(236),
	    cacheHas = __webpack_require__(237);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = (bitmask & UNORDERED_COMPARE_FLAG) ? new SetCache : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, arrValue, index, other, array, stack)
	        : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function(othValue, othIndex) {
	            if (!cacheHas(seen, othIndex) &&
	                (arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
	              return seen.push(othIndex);
	            }
	          })) {
	        result = false;
	        break;
	      }
	    } else if (!(
	          arrValue === othValue ||
	            equalFunc(arrValue, othValue, customizer, bitmask, stack)
	        )) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;


/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(215),
	    setCacheAdd = __webpack_require__(234),
	    setCacheHas = __webpack_require__(235);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var index = -1,
	      length = values ? values.length : 0;

	  this.__data__ = new MapCache;
	  while (++index < length) {
	    this.add(values[index]);
	  }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;


/***/ }),
/* 234 */
/***/ (function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;


/***/ }),
/* 235 */
/***/ (function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;


/***/ }),
/* 236 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array ? array.length : 0;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ }),
/* 237 */
/***/ (function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;


/***/ }),
/* 238 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(239),
	    Uint8Array = __webpack_require__(240),
	    eq = __webpack_require__(147),
	    equalArrays = __webpack_require__(232),
	    mapToArray = __webpack_require__(241),
	    setToArray = __webpack_require__(242);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if ((object.byteLength != other.byteLength) ||
	          (object.byteOffset != other.byteOffset)) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if ((object.byteLength != other.byteLength) ||
	          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == (other + '');

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= UNORDERED_COMPARE_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ }),
/* 239 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(143);

	/** Built-in value references. */
	var Symbol = root.Symbol;

	module.exports = Symbol;


/***/ }),
/* 240 */
/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(143);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;


/***/ }),
/* 241 */
/***/ (function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function(value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;


/***/ }),
/* 242 */
/***/ (function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function(value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;


/***/ }),
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

	var keys = __webpack_require__(163);

	/** Used to compose bitmasks for comparison styles. */
	var PARTIAL_COMPARE_FLAG = 2;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`
	 *  for more details.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
	      objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial
	        ? customizer(othValue, objValue, key, other, object, stack)
	        : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined
	          ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
	          : compared
	        )) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;


/***/ }),
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(245),
	    baseUnary = __webpack_require__(246),
	    nodeUtil = __webpack_require__(247);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;


/***/ }),
/* 245 */
/***/ (function(module, exports, __webpack_require__) {

	var isLength = __webpack_require__(160),
	    isObjectLike = __webpack_require__(168);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
	typedArrayTags[errorTag] = typedArrayTags[funcTag] =
	typedArrayTags[mapTag] = typedArrayTags[numberTag] =
	typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
	typedArrayTags[setTag] = typedArrayTags[stringTag] =
	typedArrayTags[weakMapTag] = false;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	  return isObjectLike(value) &&
	    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];
	}

	module.exports = baseIsTypedArray;


/***/ }),
/* 246 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function(value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;


/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(144);

	/** Detect free variable `exports`. */
	var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = (function() {
	  try {
	    return freeProcess && freeProcess.binding('util');
	  } catch (e) {}
	}());

	module.exports = nodeUtil;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(77)(module)))

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(249),
	    keys = __webpack_require__(163);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = keys(object),
	      length = result.length;

	  while (length--) {
	    var key = result[length],
	        value = object[key];

	    result[length] = [key, value, isStrictComparable(value)];
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(140);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ }),
/* 250 */
/***/ (function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue &&
	      (srcValue !== undefined || (key in Object(object)));
	  };
	}

	module.exports = matchesStrictComparable;


/***/ }),
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(230),
	    get = __webpack_require__(252),
	    hasIn = __webpack_require__(263),
	    isKey = __webpack_require__(261),
	    isStrictComparable = __webpack_require__(249),
	    matchesStrictComparable = __webpack_require__(250),
	    toKey = __webpack_require__(262);

	/** Used to compose bitmasks for comparison styles. */
	var UNORDERED_COMPARE_FLAG = 1,
	    PARTIAL_COMPARE_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function(object) {
	    var objValue = get(object, path);
	    return (objValue === undefined && objValue === srcValue)
	      ? hasIn(object, path)
	      : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(253);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;


/***/ }),
/* 253 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(254),
	    isKey = __webpack_require__(261),
	    toKey = __webpack_require__(262);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ }),
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(169),
	    stringToPath = __webpack_require__(255);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value) {
	  return isArray(value) ? value : stringToPath(value);
	}

	module.exports = castPath;


/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(256),
	    toString = __webpack_require__(258);

	/** Used to match property names within property paths. */
	var reLeadingDot = /^\./,
	    rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function(string) {
	  string = toString(string);

	  var result = [];
	  if (reLeadingDot.test(string)) {
	    result.push('');
	  }
	  string.replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	});

	module.exports = stringToPath;


/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(257);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function(key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;


/***/ }),
/* 257 */
/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(215);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache);
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;


/***/ }),
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(259);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;


/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(239),
	    isSymbol = __webpack_require__(260);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = Symbol ? Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = baseToString;


/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(168);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objectToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && objectToString.call(value) == symbolTag);
	}

	module.exports = isSymbol;


/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(169),
	    isSymbol = __webpack_require__(260);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value;
	  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
	      value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
	    (object != null && value in Object(object));
	}

	module.exports = isKey;


/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(260);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = (value + '');
	  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
	}

	module.exports = toKey;


/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(264),
	    hasPath = __webpack_require__(265);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;


/***/ }),
/* 264 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;


/***/ }),
/* 265 */
/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(254),
	    isArguments = __webpack_require__(166),
	    isArray = __webpack_require__(169),
	    isIndex = __webpack_require__(161),
	    isKey = __webpack_require__(261),
	    isLength = __webpack_require__(160),
	    toKey = __webpack_require__(262);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = isKey(path, object) ? [path] : castPath(path);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object ? object.length : 0;
	  return !!length && isLength(length) && isIndex(key, length) &&
	    (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;


/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(267),
	    basePropertyDeep = __webpack_require__(268),
	    isKey = __webpack_require__(261),
	    toKey = __webpack_require__(262);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ }),
/* 267 */
/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(253);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function(object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;


/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLAttribute, create;

	  create = __webpack_require__(176);

	  module.exports = XMLAttribute = (function() {
	    function XMLAttribute(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing attribute name of element " + parent.name);
	      }
	      if (value == null) {
	        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
	      }
	      this.name = this.stringify.attName(name);
	      this.value = this.stringify.attValue(value);
	    }

	    XMLAttribute.prototype.clone = function() {
	      return create(XMLAttribute.prototype, this);
	    };

	    XMLAttribute.prototype.toString = function(options, level) {
	      return ' ' + this.name + '="' + this.value + '"';
	    };

	    return XMLAttribute;

	  })();

	}).call(this);


/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLProcessingInstruction, create;

	  create = __webpack_require__(176);

	  module.exports = XMLProcessingInstruction = (function() {
	    function XMLProcessingInstruction(parent, target, value) {
	      this.stringify = parent.stringify;
	      if (target == null) {
	        throw new Error("Missing instruction target");
	      }
	      this.target = this.stringify.insTarget(target);
	      if (value) {
	        this.value = this.stringify.insValue(value);
	      }
	    }

	    XMLProcessingInstruction.prototype.clone = function() {
	      return create(XMLProcessingInstruction.prototype, this);
	    };

	    XMLProcessingInstruction.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<?';
	      r += this.target;
	      if (this.value) {
	        r += ' ' + this.value;
	      }
	      r += '?>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLProcessingInstruction;

	  })();

	}).call(this);


/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLCData, XMLNode, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(176);

	  XMLNode = __webpack_require__(179);

	  module.exports = XMLCData = (function(superClass) {
	    extend(XMLCData, superClass);

	    function XMLCData(parent, text) {
	      XMLCData.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing CDATA text");
	      }
	      this.text = this.stringify.cdata(text);
	    }

	    XMLCData.prototype.clone = function() {
	      return create(XMLCData.prototype, this);
	    };

	    XMLCData.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<![CDATA[' + this.text + ']]>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLCData;

	  })(XMLNode);

	}).call(this);


/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLComment, XMLNode, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(176);

	  XMLNode = __webpack_require__(179);

	  module.exports = XMLComment = (function(superClass) {
	    extend(XMLComment, superClass);

	    function XMLComment(parent, text) {
	      XMLComment.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing comment text");
	      }
	      this.text = this.stringify.comment(text);
	    }

	    XMLComment.prototype.clone = function() {
	      return create(XMLComment.prototype, this);
	    };

	    XMLComment.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!-- ' + this.text + ' -->';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLComment;

	  })(XMLNode);

	}).call(this);


/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

	  create = __webpack_require__(176);

	  isObject = __webpack_require__(140);

	  XMLCData = __webpack_require__(271);

	  XMLComment = __webpack_require__(272);

	  XMLDTDAttList = __webpack_require__(274);

	  XMLDTDEntity = __webpack_require__(275);

	  XMLDTDElement = __webpack_require__(276);

	  XMLDTDNotation = __webpack_require__(277);

	  XMLProcessingInstruction = __webpack_require__(270);

	  module.exports = XMLDocType = (function() {
	    function XMLDocType(parent, pubID, sysID) {
	      var ref, ref1;
	      this.documentObject = parent;
	      this.stringify = this.documentObject.stringify;
	      this.children = [];
	      if (isObject(pubID)) {
	        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
	      }
	      if (sysID == null) {
	        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
	      }
	      if (pubID != null) {
	        this.pubID = this.stringify.dtdPubID(pubID);
	      }
	      if (sysID != null) {
	        this.sysID = this.stringify.dtdSysID(sysID);
	      }
	    }

	    XMLDocType.prototype.element = function(name, value) {
	      var child;
	      child = new XMLDTDElement(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      var child;
	      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.entity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, false, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.pEntity = function(name, value) {
	      var child;
	      child = new XMLDTDEntity(this, true, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.notation = function(name, value) {
	      var child;
	      child = new XMLDTDNotation(this, name, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.cdata = function(value) {
	      var child;
	      child = new XMLCData(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.comment = function(value) {
	      var child;
	      child = new XMLComment(this, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.instruction = function(target, value) {
	      var child;
	      child = new XMLProcessingInstruction(this, target, value);
	      this.children.push(child);
	      return this;
	    };

	    XMLDocType.prototype.root = function() {
	      return this.documentObject.root();
	    };

	    XMLDocType.prototype.document = function() {
	      return this.documentObject;
	    };

	    XMLDocType.prototype.toString = function(options, level) {
	      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!DOCTYPE ' + this.root().name;
	      if (this.pubID && this.sysID) {
	        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	      } else if (this.sysID) {
	        r += ' SYSTEM "' + this.sysID + '"';
	      }
	      if (this.children.length > 0) {
	        r += ' [';
	        if (pretty) {
	          r += newline;
	        }
	        ref3 = this.children;
	        for (i = 0, len = ref3.length; i < len; i++) {
	          child = ref3[i];
	          r += child.toString(options, level + 1);
	        }
	        r += ']';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    XMLDocType.prototype.ele = function(name, value) {
	      return this.element(name, value);
	    };

	    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
	    };

	    XMLDocType.prototype.ent = function(name, value) {
	      return this.entity(name, value);
	    };

	    XMLDocType.prototype.pent = function(name, value) {
	      return this.pEntity(name, value);
	    };

	    XMLDocType.prototype.not = function(name, value) {
	      return this.notation(name, value);
	    };

	    XMLDocType.prototype.dat = function(value) {
	      return this.cdata(value);
	    };

	    XMLDocType.prototype.com = function(value) {
	      return this.comment(value);
	    };

	    XMLDocType.prototype.ins = function(target, value) {
	      return this.instruction(target, value);
	    };

	    XMLDocType.prototype.up = function() {
	      return this.root();
	    };

	    XMLDocType.prototype.doc = function() {
	      return this.document();
	    };

	    return XMLDocType;

	  })();

	}).call(this);


/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDAttList, create;

	  create = __webpack_require__(176);

	  module.exports = XMLDTDAttList = (function() {
	    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
	      this.stringify = parent.stringify;
	      if (elementName == null) {
	        throw new Error("Missing DTD element name");
	      }
	      if (attributeName == null) {
	        throw new Error("Missing DTD attribute name");
	      }
	      if (!attributeType) {
	        throw new Error("Missing DTD attribute type");
	      }
	      if (!defaultValueType) {
	        throw new Error("Missing DTD attribute default");
	      }
	      if (defaultValueType.indexOf('#') !== 0) {
	        defaultValueType = '#' + defaultValueType;
	      }
	      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
	        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
	      }
	      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
	        throw new Error("Default value only applies to #FIXED or #DEFAULT");
	      }
	      this.elementName = this.stringify.eleName(elementName);
	      this.attributeName = this.stringify.attName(attributeName);
	      this.attributeType = this.stringify.dtdAttType(attributeType);
	      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
	      this.defaultValueType = defaultValueType;
	    }

	    XMLDTDAttList.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
	      if (this.defaultValueType !== '#DEFAULT') {
	        r += ' ' + this.defaultValueType;
	      }
	      if (this.defaultValue) {
	        r += ' "' + this.defaultValue + '"';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDAttList;

	  })();

	}).call(this);


/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDEntity, create, isObject;

	  create = __webpack_require__(176);

	  isObject = __webpack_require__(140);

	  module.exports = XMLDTDEntity = (function() {
	    function XMLDTDEntity(parent, pe, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing entity name");
	      }
	      if (value == null) {
	        throw new Error("Missing entity value");
	      }
	      this.pe = !!pe;
	      this.name = this.stringify.eleName(name);
	      if (!isObject(value)) {
	        this.value = this.stringify.dtdEntityValue(value);
	      } else {
	        if (!value.pubID && !value.sysID) {
	          throw new Error("Public and/or system identifiers are required for an external entity");
	        }
	        if (value.pubID && !value.sysID) {
	          throw new Error("System identifier is required for a public external entity");
	        }
	        if (value.pubID != null) {
	          this.pubID = this.stringify.dtdPubID(value.pubID);
	        }
	        if (value.sysID != null) {
	          this.sysID = this.stringify.dtdSysID(value.sysID);
	        }
	        if (value.nData != null) {
	          this.nData = this.stringify.dtdNData(value.nData);
	        }
	        if (this.pe && this.nData) {
	          throw new Error("Notation declaration is not allowed in a parameter entity");
	        }
	      }
	    }

	    XMLDTDEntity.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ENTITY';
	      if (this.pe) {
	        r += ' %';
	      }
	      r += ' ' + this.name;
	      if (this.value) {
	        r += ' "' + this.value + '"';
	      } else {
	        if (this.pubID && this.sysID) {
	          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	        } else if (this.sysID) {
	          r += ' SYSTEM "' + this.sysID + '"';
	        }
	        if (this.nData) {
	          r += ' NDATA ' + this.nData;
	        }
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDEntity;

	  })();

	}).call(this);


/***/ }),
/* 276 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDElement, create;

	  create = __webpack_require__(176);

	  module.exports = XMLDTDElement = (function() {
	    function XMLDTDElement(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing DTD element name");
	      }
	      if (!value) {
	        value = '(#PCDATA)';
	      }
	      if (Array.isArray(value)) {
	        value = '(' + value.join(',') + ')';
	      }
	      this.name = this.stringify.eleName(name);
	      this.value = this.stringify.dtdElementValue(value);
	    }

	    XMLDTDElement.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDElement;

	  })();

	}).call(this);


/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLDTDNotation, create;

	  create = __webpack_require__(176);

	  module.exports = XMLDTDNotation = (function() {
	    function XMLDTDNotation(parent, name, value) {
	      this.stringify = parent.stringify;
	      if (name == null) {
	        throw new Error("Missing notation name");
	      }
	      if (!value.pubID && !value.sysID) {
	        throw new Error("Public or system identifiers are required for an external entity");
	      }
	      this.name = this.stringify.eleName(name);
	      if (value.pubID != null) {
	        this.pubID = this.stringify.dtdPubID(value.pubID);
	      }
	      if (value.sysID != null) {
	        this.sysID = this.stringify.dtdSysID(value.sysID);
	      }
	    }

	    XMLDTDNotation.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += '<!NOTATION ' + this.name;
	      if (this.pubID && this.sysID) {
	        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
	      } else if (this.pubID) {
	        r += ' PUBLIC "' + this.pubID + '"';
	      } else if (this.sysID) {
	        r += ' SYSTEM "' + this.sysID + '"';
	      }
	      r += '>';
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLDTDNotation;

	  })();

	}).call(this);


/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLNode, XMLRaw, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(176);

	  XMLNode = __webpack_require__(179);

	  module.exports = XMLRaw = (function(superClass) {
	    extend(XMLRaw, superClass);

	    function XMLRaw(parent, text) {
	      XMLRaw.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing raw text");
	      }
	      this.value = this.stringify.raw(text);
	    }

	    XMLRaw.prototype.clone = function() {
	      return create(XMLRaw.prototype, this);
	    };

	    XMLRaw.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += this.value;
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLRaw;

	  })(XMLNode);

	}).call(this);


/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

	// Generated by CoffeeScript 1.9.1
	(function() {
	  var XMLNode, XMLText, create,
	    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	    hasProp = {}.hasOwnProperty;

	  create = __webpack_require__(176);

	  XMLNode = __webpack_require__(179);

	  module.exports = XMLText = (function(superClass) {
	    extend(XMLText, superClass);

	    function XMLText(parent, text) {
	      XMLText.__super__.constructor.call(this, parent);
	      if (text == null) {
	        throw new Error("Missing element text");
	      }
	      this.value = this.stringify.eleText(text);
	    }

	    XMLText.prototype.clone = function() {
	      return create(XMLText.prototype, this);
	    };

	    XMLText.prototype.toString = function(options, level) {
	      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
	      pretty = (options != null ? options.pretty : void 0) || false;
	      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
	      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
	      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
	      level || (level = 0);
	      space = new Array(level + offset + 1).join(indent);
	      r = '';
	      if (pretty) {
	        r += space;
	      }
	      r += this.value;
	      if (pretty) {
	        r += newline;
	      }
	      return r;
	    };

	    return XMLText;

	  })(XMLNode);

	}).call(this);


/***/ }),
/* 280 */
/***/ (function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  "use strict";
	  exports.stripBOM = function(str) {
	    if (str[0] === '\uFEFF') {
	      return str.substring(1);
	    } else {
	      return str;
	    }
	  };

	}).call(this);


/***/ }),
/* 281 */
/***/ (function(module, exports) {

	// Generated by CoffeeScript 1.10.0
	(function() {
	  "use strict";
	  var prefixMatch;

	  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

	  exports.normalize = function(str) {
	    return str.toLowerCase();
	  };

	  exports.firstCharLowerCase = function(str) {
	    return str.charAt(0).toLowerCase() + str.slice(1);
	  };

	  exports.stripPrefix = function(str) {
	    return str.replace(prefixMatch, '');
	  };

	  exports.parseNumbers = function(str) {
	    if (!isNaN(str)) {
	      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
	    }
	    return str;
	  };

	  exports.parseBooleans = function(str) {
	    if (/^(?:true|false)$/i.test(str)) {
	      str = str.toLowerCase() === 'true';
	    }
	    return str;
	  };

	}).call(this);


/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for Microsoft's
	 * Internet Explorer. Before using the IEDriver, you must download the latest
	 * [IEDriverServer](http://selenium-release.storage.googleapis.com/index.html)
	 * and place it on your
	 * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29). You must also apply
	 * the system configuration outlined on the Selenium project
	 * [wiki](https://github.com/SeleniumHQ/selenium/wiki/InternetExplorerDriver)
	 */

	'use strict';

	const fs = __webpack_require__(109),
	    util = __webpack_require__(71);

	const http = __webpack_require__(112),
	    io = __webpack_require__(113),
	    capabilities = __webpack_require__(99),
	    promise = __webpack_require__(36),
	    webdriver = __webpack_require__(101),
	    portprober = __webpack_require__(114),
	    remote = __webpack_require__(115);


	const IEDRIVER_EXE = 'IEDriverServer.exe';



	/**
	 * IEDriverServer logging levels.
	 * @enum {string}
	 */
	const Level = {
	  FATAL: 'FATAL',
	  ERROR: 'ERROR',
	  WARN: 'WARN',
	  INFO: 'INFO',
	  DEBUG: 'DEBUG',
	  TRACE: 'TRACE'
	};



	/**
	 * Option keys:
	 * https://github.com/SeleniumHQ/selenium/wiki/DesiredCapabilities#ie-specific
	 * @enum {string}
	 */
	const Key = {
	  IGNORE_PROTECTED_MODE_SETTINGS: 'ignoreProtectedModeSettings',
	  IGNORE_ZOOM_SETTING: 'ignoreZoomSetting',
	  INITIAL_BROWSER_URL: 'initialBrowserUrl',
	  ENABLE_PERSISTENT_HOVER: 'enablePersistentHover',
	  ENABLE_ELEMENT_CACHE_CLEANUP: 'enableElementCacheCleanup',
	  REQUIRE_WINDOW_FOCUS: 'requireWindowFocus',
	  BROWSER_ATTACH_TIMEOUT: 'browserAttachTimeout',
	  FORCE_CREATE_PROCESS: 'ie.forceCreateProcessApi',
	  BROWSER_COMMAND_LINE_SWITCHES: 'ie.browserCommandLineSwitches',
	  USE_PER_PROCESS_PROXY: 'ie.usePerProcessProxy',
	  ENSURE_CLEAN_SESSION: 'ie.ensureCleanSession',
	  LOG_FILE: 'logFile',
	  LOG_LEVEL: 'logLevel',
	  HOST: 'host',
	  EXTRACT_PATH: 'extractPath',
	  SILENT: 'silent'
	};


	/**
	 * Class for managing IEDriver specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Object<(boolean|number|string|!Array<string>)>} */
	    this.options_ = {};

	    /** @private {(capabilities.ProxyConfig|null)} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the IEDriver specific options from the given capabilities
	   * object.
	   * @param {!capabilities.Capabilities} caps The capabilities object.
	   * @return {!Options} The IEDriver options.
	   */
	  static fromCapabilities(caps) {
	    var options = new Options();
	    var map = options.options_;

	    Object.keys(Key).forEach(function(key) {
	      key = Key[key];
	      if (caps.has(key)) {
	        map[key] = caps.get(key);
	      }
	    });

	    if (caps.has(capabilities.Capability.PROXY)) {
	      options.setProxy(caps.get(capabilities.Capability.PROXY));
	    }

	    return options;
	  }

	  /**
	   * Whether to disable the protected mode settings check when the session is
	   * created. Disbling this setting may lead to significant instability as the
	   * browser may become unresponsive/hang. Only "best effort" support is provided
	   * when using this capability.
	   *
	   * For more information, refer to the IEDriver's
	   * [required system configuration](http://goo.gl/eH0Yi3).
	   *
	   * @param {boolean} ignoreSettings Whether to ignore protected mode settings.
	   * @return {!Options} A self reference.
	   */
	  introduceFlakinessByIgnoringProtectedModeSettings(ignoreSettings) {
	    this.options_[Key.IGNORE_PROTECTED_MODE_SETTINGS] = !!ignoreSettings;
	    return this;
	  }

	  /**
	   * Indicates whether to skip the check that the browser's zoom level is set to
	   * 100%.
	   *
	   * @param {boolean} ignore Whether to ignore the browser's zoom level settings.
	   * @return {!Options} A self reference.
	   */
	  ignoreZoomSetting(ignore) {
	    this.options_[Key.IGNORE_ZOOM_SETTING] = !!ignore;
	    return this;
	  }

	  /**
	   * Sets the initial URL loaded when IE starts. This is intended to be used with
	   * {@link #ignoreProtectedModeSettings} to allow the user to initialize IE in
	   * the proper Protected Mode zone. Setting this option may cause browser
	   * instability or flaky and unresponsive code. Only "best effort" support is
	   * provided when using this option.
	   *
	   * @param {string} url The initial browser URL.
	   * @return {!Options} A self reference.
	   */
	  initialBrowserUrl(url) {
	    this.options_[Key.INITIAL_BROWSER_URL] = url;
	    return this;
	  }

	  /**
	   * Configures whether to enable persistent mouse hovering (true by default).
	   * Persistent hovering is achieved by continuously firing mouse over events at
	   * the last location the mouse cursor has been moved to.
	   *
	   * @param {boolean} enable Whether to enable persistent hovering.
	   * @return {!Options} A self reference.
	   */
	  enablePersistentHover(enable) {
	    this.options_[Key.ENABLE_PERSISTENT_HOVER] = !!enable;
	    return this;
	  }

	  /**
	   * Configures whether the driver should attempt to remove obsolete
	   * {@linkplain webdriver.WebElement WebElements} from its internal cache on
	   * page navigation (true by default). Disabling this option will cause the
	   * driver to run with a larger memory footprint.
	   *
	   * @param {boolean} enable Whether to enable element reference cleanup.
	   * @return {!Options} A self reference.
	   */
	  enableElementCacheCleanup(enable) {
	    this.options_[Key.ENABLE_ELEMENT_CACHE_CLEANUP] = !!enable;
	    return this;
	  }

	  /**
	   * Configures whether to require the IE window to have input focus before
	   * performing any user interactions (i.e. mouse or keyboard events). This
	   * option is disabled by default, but delivers much more accurate interaction
	   * events when enabled.
	   *
	   * @param {boolean} require Whether to require window focus.
	   * @return {!Options} A self reference.
	   */
	  requireWindowFocus(require) {
	    this.options_[Key.REQUIRE_WINDOW_FOCUS] = !!require;
	    return this;
	  }

	  /**
	   * Configures the timeout, in milliseconds, that the driver will attempt to
	   * located and attach to a newly opened instance of Internet Explorer. The
	   * default is zero, which indicates waiting indefinitely.
	   *
	   * @param {number} timeout How long to wait for IE.
	   * @return {!Options} A self reference.
	   */
	  browserAttachTimeout(timeout) {
	    this.options_[Key.BROWSER_ATTACH_TIMEOUT] = Math.max(timeout, 0);
	    return this;
	  }

	  /**
	   * Configures whether to launch Internet Explorer using the CreateProcess API.
	   * If this option is not specified, IE is launched using IELaunchURL, if
	   * available. For IE 8 and above, this option requires the TabProcGrowth
	   * registry value to be set to 0.
	   *
	   * @param {boolean} force Whether to use the CreateProcess API.
	   * @return {!Options} A self reference.
	   */
	  forceCreateProcessApi(force) {
	    this.options_[Key.FORCE_CREATE_PROCESS] = !!force;
	    return this;
	  }

	  /**
	   * Specifies command-line switches to use when launching Internet Explorer.
	   * This is only valid when used with {@link #forceCreateProcessApi}.
	   *
	   * @param {...(string|!Array.<string>)} var_args The arguments to add.
	   * @return {!Options} A self reference.
	   */
	  addArguments(var_args) {
	    var args = this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] || [];
	    args = args.concat.apply(args, arguments);
	    this.options_[Key.BROWSER_COMMAND_LINE_SWITCHES] = args;
	    return this;
	  }

	  /**
	   * Configures whether proxies should be configured on a per-process basis. If
	   * not set, setting a {@linkplain #setProxy proxy} will configure the system
	   * proxy. The default behavior is to use the system proxy.
	   *
	   * @param {boolean} enable Whether to enable per-process proxy settings.
	   * @return {!Options} A self reference.
	   */
	  usePerProcessProxy(enable) {
	    this.options_[Key.USE_PER_PROCESS_PROXY] = !!enable;
	    return this;
	  }

	  /**
	   * Configures whether to clear the cache, cookies, history, and saved form data
	   * before starting the browser. _Using this capability will clear session data
	   * for all running instances of Internet Explorer, including those started
	   * manually._
	   *
	   * @param {boolean} cleanSession Whether to clear all session data on startup.
	   * @return {!Options} A self reference.
	   */
	  ensureCleanSession(cleanSession) {
	    this.options_[Key.ENSURE_CLEAN_SESSION] = !!cleanSession;
	    return this;
	  }

	  /**
	   * Sets the path to the log file the driver should log to.
	   * @param {string} file The log file path.
	   * @return {!Options} A self reference.
	   */
	  setLogFile(file) {
	    this.options_[Key.LOG_FILE] = file;
	    return this;
	  }

	  /**
	   * Sets the IEDriverServer's logging {@linkplain Level level}.
	   * @param {Level} level The logging level.
	   * @return {!Options} A self reference.
	   */
	  setLogLevel(level) {
	    this.options_[Key.LOG_LEVEL] = level;
	    return this;
	  }

	  /**
	   * Sets the IP address of the driver's host adapter.
	   * @param {string} host The IP address to use.
	   * @return {!Options} A self reference.
	   */
	  setHost(host) {
	    this.options_[Key.HOST] = host;
	    return this;
	  }

	  /**
	   * Sets the path of the temporary data directory to use.
	   * @param {string} path The log file path.
	   * @return {!Options} A self reference.
	   */
	  setExtractPath(path) {
	    this.options_[Key.EXTRACT_PATH] = path;
	    return this;
	  }

	  /**
	   * Sets whether the driver should start in silent mode.
	   * @param {boolean} silent Whether to run in silent mode.
	   * @return {!Options} A self reference.
	   */
	  silent(silent) {
	    this.options_[Key.SILENT] = silent;
	    return this;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link capabilities.Capabilities}
	   * object.
	   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!capabilities.Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || capabilities.Capabilities.ie();
	    if (this.proxy_) {
	      caps.set(capabilities.Capability.PROXY, this.proxy_);
	    }
	    Object.keys(this.options_).forEach(function(key) {
	      caps.set(key, this.options_[key]);
	    }, this);
	    return caps;
	  }
	}


	function createServiceFromCapabilities(capabilities) {
	  if (process.platform !== 'win32') {
	    throw Error(
	        'The IEDriver may only be used on Windows, but you appear to be on ' +
	        process.platform + '. Did you mean to run against a remote ' +
	        'WebDriver server?');
	  }

	  let exe = io.findInPath(IEDRIVER_EXE, true);
	  if (!exe || !fs.existsSync(exe)) {
	    throw Error(
	        `${IEDRIVER_EXE} could not be found on the current PATH. Please ` +
	        `download the latest version of ${IEDRIVER_EXE} from ` +
	        'http://selenium-release.storage.googleapis.com/index.html and ' +
	        'ensure it can be found on your system PATH.');
	  }

	  var args = [];
	  if (capabilities.has(Key.HOST)) {
	    args.push('--host=' + capabilities.get(Key.HOST));
	  }
	  if (capabilities.has(Key.LOG_FILE)) {
	    args.push('--log-file=' + capabilities.get(Key.LOG_FILE));
	  }
	  if (capabilities.has(Key.LOG_LEVEL)) {
	    args.push('--log-level=' + capabilities.get(Key.LOG_LEVEL));
	  }
	  if (capabilities.has(Key.EXTRACT_PATH)) {
	    args.push('--extract-path=' + capabilities.get(Key.EXTRACT_PATH));
	  }
	  if (capabilities.get(Key.SILENT)) {
	    args.push('--silent');
	  }

	  var port = portprober.findFreePort();
	  return new remote.DriverService(exe, {
	    loopback: true,
	    port: port,
	    args: port.then(function(port) {
	      return args.concat('--port=' + port);
	    }),
	    stdio: 'ignore'
	  });
	}


	/**
	 * A WebDriver client for Microsoft's Internet Explorer.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new session for Microsoft's Internet Explorer.
	   *
	   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration
	   *     options.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use,
	   *     or {@code null} to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_flow) {
	    var caps = opt_config instanceof Options ?
	        opt_config.toCapabilities() :
	        (opt_config || capabilities.Capabilities.ie());

	    var service = createServiceFromCapabilities(caps);
	    var client = service.start().then(url => new http.HttpClient(url));
	    var executor = new http.Executor(client);

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.Level = Level;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 283 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines common conditions for use with
	 * {@link webdriver.WebDriver#wait WebDriver wait}.
	 *
	 * Sample usage:
	 *
	 *     driver.get('http://www.google.com/ncr');
	 *
	 *     var query = driver.wait(until.elementLocated(By.name('q')));
	 *     query.sendKeys('webdriver\n');
	 *
	 *     driver.wait(until.titleIs('webdriver - Google Search'));
	 *
	 * To define a custom condition, simply call WebDriver.wait with a function
	 * that will eventually return a truthy-value (neither null, undefined, false,
	 * 0, or the empty string):
	 *
	 *     driver.wait(function() {
	 *       return driver.getTitle().then(function(title) {
	 *         return title === 'webdriver - Google Search';
	 *       });
	 *     }, 1000);
	 */

	'use strict';

	const by = __webpack_require__(104);
	const By = __webpack_require__(104).By;
	const error = __webpack_require__(38);
	const webdriver = __webpack_require__(101),
	    Condition = webdriver.Condition,
	    WebElementCondition = webdriver.WebElementCondition;


	/**
	 * Creates a condition that will wait until the input driver is able to switch
	 * to the designated frame. The target frame may be specified as
	 *
	 * 1. a numeric index into
	 *     [window.frames](https://developer.mozilla.org/en-US/docs/Web/API/Window.frames)
	 *     for the currently selected frame.
	 * 2. a {@link ./webdriver.WebElement}, which must reference a FRAME or IFRAME
	 *     element on the current page.
	 * 3. a locator which may be used to first locate a FRAME or IFRAME on the
	 *     current page before attempting to switch to it.
	 *
	 * Upon successful resolution of this condition, the driver will be left
	 * focused on the new frame.
	 *
	 * @param {!(number|./webdriver.WebElement|By|
	 *           function(!./webdriver.WebDriver): !./webdriver.WebElement)} frame
	 *     The frame identifier.
	 * @return {!Condition<boolean>} A new condition.
	 */
	exports.ableToSwitchToFrame = function ableToSwitchToFrame(frame) {
	  var condition;
	  if (typeof frame === 'number' || frame instanceof webdriver.WebElement) {
	    condition = driver => attemptToSwitchFrames(driver, frame);
	  } else {
	    condition = function(driver) {
	      let locator = /** @type {!(By|Function)} */(frame);
	      return driver.findElements(locator).then(function(els) {
	        if (els.length) {
	          return attemptToSwitchFrames(driver, els[0]);
	        }
	      });
	    };
	  }

	  return new Condition('to be able to switch to frame', condition);

	  function attemptToSwitchFrames(driver, frame) {
	    return driver.switchTo().frame(frame).then(
	        function() { return true; },
	        function(e) {
	          if (!(e instanceof error.NoSuchFrameError)) {
	            throw e;
	          }
	        });
	  }
	};


	/**
	 * Creates a condition that waits for an alert to be opened. Upon success, the
	 * returned promise will be fulfilled with the handle for the opened alert.
	 *
	 * @return {!Condition<!./webdriver.Alert>} The new condition.
	 */
	exports.alertIsPresent = function alertIsPresent() {
	  return new Condition('for alert to be present', function(driver) {
	    return driver.switchTo().alert().catch(function(e) {
	      if (!(e instanceof error.NoSuchAlertError
	        // XXX: Workaround for GeckoDriver error `TypeError: can't convert null
	        // to object`. For more details, see
	        // https://github.com/SeleniumHQ/selenium/pull/2137
	        || (e instanceof error.WebDriverError
	          && e.message === `can't convert null to object`)
	        )) {
	        throw e;
	      }
	    });
	  });
	};


	/**
	 * Creates a condition that will wait for the current page's title to match the
	 * given value.
	 *
	 * @param {string} title The expected page title.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.titleIs = function titleIs(title) {
	  return new Condition(
	      'for title to be ' + JSON.stringify(title),
	      function(driver) {
	        return driver.getTitle().then(function(t) {
	          return t === title;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's title to contain
	 * the given substring.
	 *
	 * @param {string} substr The substring that should be present in the page
	 *     title.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.titleContains = function titleContains(substr) {
	  return new Condition(
	      'for title to contain ' + JSON.stringify(substr),
	      function(driver) {
	        return driver.getTitle().then(function(title) {
	          return title.indexOf(substr) !== -1;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's title to match the
	 * given regular expression.
	 *
	 * @param {!RegExp} regex The regular expression to test against.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.titleMatches = function titleMatches(regex) {
	  return new Condition('for title to match ' + regex, function(driver) {
	    return driver.getTitle().then(function(title) {
	      return regex.test(title);
	    });
	  });
	};


	/**
	 * Creates a condition that will wait for the current page's url to match the
	 * given value.
	 *
	 * @param {string} url The expected page url.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.urlIs = function urlIs(url) {
	  return new Condition(
	      'for URL to be ' + JSON.stringify(url),
	      function(driver) {
	        return driver.getCurrentUrl().then(function(u) {
	          return u === url;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's url to contain
	 * the given substring.
	 *
	 * @param {string} substrUrl The substring that should be present in the current
	 *     URL.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.urlContains = function urlContains(substrUrl) {
	  return new Condition(
	      'for URL to contain ' + JSON.stringify(substrUrl),
	      function(driver) {
	        return driver.getCurrentUrl().then(function(url) {
	          return url.indexOf(substrUrl) !== -1;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the current page's url to match the
	 * given regular expression.
	 *
	 * @param {!RegExp} regex The regular expression to test against.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.urlMatches = function urlMatches(regex) {
	  return new Condition('for URL to match ' + regex, function(driver) {
	    return driver.getCurrentUrl().then(function(url) {
	      return regex.test(url);
	    });
	  });
	};


	/**
	 * Creates a condition that will loop until an element is
	 * {@link ./webdriver.WebDriver#findElement found} with the given locator.
	 *
	 * @param {!(By|Function)} locator The locator to use.
	 * @return {!WebElementCondition} The new condition.
	 */
	exports.elementLocated = function elementLocated(locator) {
	  locator = by.checkedLocator(locator);
	  let locatorStr =
	      typeof locator === 'function' ? 'by function()' : locator + '';
	  return new WebElementCondition('for element to be located ' + locatorStr,
	      function(driver) {
	        return driver.findElements(locator).then(function(elements) {
	          return elements[0];
	        });
	      });
	};


	/**
	 * Creates a condition that will loop until at least one element is
	 * {@link ./webdriver.WebDriver#findElement found} with the given locator.
	 *
	 * @param {!(By|Function)} locator The locator to use.
	 * @return {!Condition<!Array<!./webdriver.WebElement>>} The new
	 *     condition.
	 */
	exports.elementsLocated = function elementsLocated(locator) {
	  locator = by.checkedLocator(locator);
	  let locatorStr =
	      typeof locator === 'function' ? 'by function()' : locator + '';
	  return new Condition(
	      'for at least one element to be located ' + locatorStr,
	      function(driver) {
	        return driver.findElements(locator).then(function(elements) {
	          return elements.length > 0 ? elements : null;
	        });
	      });
	};


	/**
	 * Creates a condition that will wait for the given element to become stale. An
	 * element is considered stale once it is removed from the DOM, or a new page
	 * has loaded.
	 *
	 * @param {!./webdriver.WebElement} element The element that should become stale.
	 * @return {!Condition<boolean>} The new condition.
	 */
	exports.stalenessOf = function stalenessOf(element) {
	  return new Condition('element to become stale', function() {
	    return element.getTagName().then(
	        function() { return false; },
	        function(e) {
	          if (e instanceof error.StaleElementReferenceError) {
	            return true;
	          }
	          throw e;
	        });
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to become visible.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see ./webdriver.WebDriver#isDisplayed
	 */
	exports.elementIsVisible = function elementIsVisible(element) {
	  return new WebElementCondition('until element is visible', function() {
	    return element.isDisplayed().then(v => v ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be in the DOM,
	 * yet not visible to the user.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see ./webdriver.WebDriver#isDisplayed
	 */
	exports.elementIsNotVisible = function elementIsNotVisible(element) {
	  return new WebElementCondition('until element is not visible', function() {
	    return element.isDisplayed().then(v => v ? null : element);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be enabled.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isEnabled
	 */
	exports.elementIsEnabled = function elementIsEnabled(element) {
	  return new WebElementCondition('until element is enabled', function() {
	    return element.isEnabled().then(v => v ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be disabled.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isEnabled
	 */
	exports.elementIsDisabled = function elementIsDisabled(element) {
	  return new WebElementCondition('until element is disabled', function() {
	    return element.isEnabled().then(v => v ? null : element);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be selected.
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isSelected
	 */
	exports.elementIsSelected = function elementIsSelected(element) {
	  return new WebElementCondition('until element is selected', function() {
	    return element.isSelected().then(v => v ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element to be deselected.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#isSelected
	 */
	exports.elementIsNotSelected = function elementIsNotSelected(element) {
	  return new WebElementCondition('until element is not selected', function() {
	    return element.isSelected().then(v => v ? null : element);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element's
	 * {@link webdriver.WebDriver#getText visible text} to match the given
	 * {@code text} exactly.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @param {string} text The expected text.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#getText
	 */
	exports.elementTextIs = function elementTextIs(element, text) {
	  return new WebElementCondition('until element text is', function() {
	    return element.getText().then(t => t === text ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element's
	 * {@link webdriver.WebDriver#getText visible text} to contain the given
	 * substring.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @param {string} substr The substring to search for.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#getText
	 */
	exports.elementTextContains = function elementTextContains(element, substr) {
	  return new WebElementCondition('until element text contains', function() {
	    return element.getText()
	        .then(t => t.indexOf(substr) != -1 ? element : null);
	  });
	};


	/**
	 * Creates a condition that will wait for the given element's
	 * {@link webdriver.WebDriver#getText visible text} to match a regular
	 * expression.
	 *
	 * @param {!./webdriver.WebElement} element The element to test.
	 * @param {!RegExp} regex The regular expression to test against.
	 * @return {!WebElementCondition} The new condition.
	 * @see webdriver.WebDriver#getText
	 */
	exports.elementTextMatches = function elementTextMatches(element, regex) {
	  return new WebElementCondition('until element text matches', function() {
	    return element.getText().then(t => regex.test(t) ? element : null);
	  });
	};


/***/ }),
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, Buffer) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for the
	 * Opera web browser (v26+). Before using this module, you must download the
	 * latest OperaDriver
	 * [release](https://github.com/operasoftware/operachromiumdriver/releases) and
	 * ensure it can be found on your system
	 * [PATH](http://en.wikipedia.org/wiki/PATH_%28variable%29).
	 *
	 * There are three primary classes exported by this module:
	 *
	 * 1. {@linkplain ServiceBuilder}: configures the
	 *     {@link selenium-webdriver/remote.DriverService remote.DriverService}
	 *     that manages the
	 *     [OperaDriver](https://github.com/operasoftware/operachromiumdriver)
	 *     child process.
	 *
	 * 2. {@linkplain Options}: defines configuration options for each new Opera
	 *     session, such as which {@linkplain Options#setProxy proxy} to use,
	 *     what {@linkplain Options#addExtensions extensions} to install, or
	 *     what {@linkplain Options#addArguments command-line switches} to use when
	 *     starting the browser.
	 *
	 * 3. {@linkplain Driver}: the WebDriver client; each new instance will control
	 *     a unique browser session with a clean user profile (unless otherwise
	 *     configured through the {@link Options} class).
	 *
	 * By default, every Opera session will use a single driver service, which is
	 * started the first time a {@link Driver} instance is created and terminated
	 * when this process exits. The default service will inherit its environment
	 * from the current process and direct all output to /dev/null. You may obtain
	 * a handle to this default service using
	 * {@link #getDefaultService getDefaultService()} and change its configuration
	 * with {@link #setDefaultService setDefaultService()}.
	 *
	 * You may also create a {@link Driver} with its own driver service. This is
	 * useful if you need to capture the server's log output for a specific session:
	 *
	 *     var opera = require('selenium-webdriver/opera');
	 *
	 *     var service = new opera.ServiceBuilder()
	 *         .loggingTo('/my/log/file.txt')
	 *         .enableVerboseLogging()
	 *         .build();
	 *
	 *     var options = new opera.Options();
	 *     // configure browser options ...
	 *
	 *     var driver = opera.Driver.createSession(options, service);
	 *
	 * Users should only instantiate the {@link Driver} class directly when they
	 * need a custom driver service configuration (as shown above). For normal
	 * operation, users should start Opera using the
	 * {@link selenium-webdriver.Builder}.
	 */

	'use strict';

	const fs = __webpack_require__(109);

	const http = __webpack_require__(112),
	    io = __webpack_require__(113),
	    capabilities = __webpack_require__(99),
	    promise = __webpack_require__(36),
	    Symbols = __webpack_require__(100),
	    webdriver = __webpack_require__(101),
	    portprober = __webpack_require__(114),
	    remote = __webpack_require__(115);


	/**
	 * Name of the OperaDriver executable.
	 * @type {string}
	 * @const
	 */
	const OPERADRIVER_EXE =
	    process.platform === 'win32' ? 'operadriver.exe' : 'operadriver';


	/**
	 * Creates {@link remote.DriverService} instances that manages an
	 * [OperaDriver](https://github.com/operasoftware/operachromiumdriver)
	 * server in a child process.
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the operadriver on the current
	   *     PATH.
	   * @throws {Error} If provided executable does not exist, or the operadriver
	   *     cannot be found on the PATH.
	   */
	  constructor(opt_exe) {
	    let exe = opt_exe || io.findInPath(OPERADRIVER_EXE, true);
	    if (!exe) {
	      throw Error(
	          'The OperaDriver could not be found on the current PATH. Please ' +
	          'download the latest version of the OperaDriver from ' +
	          'https://github.com/operasoftware/operachromiumdriver/releases and ' +
	          'ensure it can be found on your PATH.');
	    }

	    super(exe);
	    this.setLoopback(true);
	  }

	  /**
	   * Sets the path of the log file the driver should log to. If a log file is
	   * not specified, the driver will log to stderr.
	   * @param {string} path Path of the log file to use.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  loggingTo(path) {
	    return this.addArguments('--log-path=' + path);
	  }

	  /**
	   * Enables verbose logging.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  enableVerboseLogging() {
	    return this.addArguments('--verbose');
	  }

	  /**
	   * Silence sthe drivers output.
	   * @return {!ServiceBuilder} A self reference.
	   */
	  silent() {
	    return this.addArguments('--silent');
	  }
	}



	/** @type {remote.DriverService} */
	var defaultService = null;


	/**
	 * Sets the default service to use for new OperaDriver instances.
	 * @param {!remote.DriverService} service The service to use.
	 * @throws {Error} If the default service is currently running.
	 */
	function setDefaultService(service) {
	  if (defaultService && defaultService.isRunning()) {
	    throw Error(
	        'The previously configured OperaDriver service is still running. ' +
	        'You must shut it down before you may adjust its configuration.');
	  }
	  defaultService = service;
	}


	/**
	 * Returns the default OperaDriver service. If such a service has not been
	 * configured, one will be constructed using the default configuration for
	 * a OperaDriver executable found on the system PATH.
	 * @return {!remote.DriverService} The default OperaDriver service.
	 */
	function getDefaultService() {
	  if (!defaultService) {
	    defaultService = new ServiceBuilder().build();
	  }
	  return defaultService;
	}


	/**
	 * @type {string}
	 * @const
	 */
	var OPTIONS_CAPABILITY_KEY = 'chromeOptions';


	/**
	 * Class for managing {@linkplain Driver OperaDriver} specific options.
	 */
	class Options {
	  constructor() {
	    /** @private {!Array.<string>} */
	    this.args_ = [];

	    /** @private {?string} */
	    this.binary_ = null;

	    /** @private {!Array.<(string|!Buffer)>} */
	    this.extensions_ = [];

	    /** @private {./lib/logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the OperaDriver specific options from the given capabilities
	   * object.
	   * @param {!capabilities.Capabilities} caps The capabilities object.
	   * @return {!Options} The OperaDriver options.
	   */
	  static fromCapabilities(caps) {
	    var options;
	    var o = caps.get(OPTIONS_CAPABILITY_KEY);
	    if (o instanceof Options) {
	      options = o;
	    } else if (o) {
	      options = new Options()
	          .addArguments(o.args || [])
	          .addExtensions(o.extensions || [])
	          .setOperaBinaryPath(o.binary);
	    } else {
	      options = new Options;
	    }

	    if (caps.has(capabilities.Capability.PROXY)) {
	      options.setProxy(caps.get(capabilities.Capability.PROXY));
	    }

	    if (caps.has(capabilities.Capability.LOGGING_PREFS)) {
	      options.setLoggingPrefs(
	          caps.get(capabilities.Capability.LOGGING_PREFS));
	    }

	    return options;
	  }

	  /**
	   * Add additional command line arguments to use when launching the Opera
	   * browser.  Each argument may be specified with or without the "--" prefix
	   * (e.g. "--foo" and "foo"). Arguments with an associated value should be
	   * delimited by an "=": "foo=bar".
	   * @param {...(string|!Array.<string>)} var_args The arguments to add.
	   * @return {!Options} A self reference.
	   */
	  addArguments(var_args) {
	    this.args_ = this.args_.concat.apply(this.args_, arguments);
	    return this;
	  }

	  /**
	   * Add additional extensions to install when launching Opera. Each extension
	   * should be specified as the path to the packed CRX file, or a Buffer for an
	   * extension.
	   * @param {...(string|!Buffer|!Array.<(string|!Buffer)>)} var_args The
	   *     extensions to add.
	   * @return {!Options} A self reference.
	   */
	  addExtensions(var_args) {
	    this.extensions_ = this.extensions_.concat.apply(
	        this.extensions_, arguments);
	    return this;
	  }

	  /**
	   * Sets the path to the Opera binary to use. On Mac OS X, this path should
	   * reference the actual Opera executable, not just the application binary. The
	   * binary path be absolute or relative to the operadriver server executable, but
	   * it must exist on the machine that will launch Opera.
	   *
	   * @param {string} path The path to the Opera binary to use.
	   * @return {!Options} A self reference.
	   */
	  setOperaBinaryPath(path) {
	    this.binary_ = path;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {!./lib/logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the proxy settings for the new session.
	   * @param {capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link capabilities.Capabilities}
	   *     object.
	   * @param {capabilities.Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!capabilities.Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || capabilities.Capabilities.opera();
	    caps.
	        set(capabilities.Capability.PROXY, this.proxy_).
	        set(capabilities.Capability.LOGGING_PREFS, this.logPrefs_).
	        set(OPTIONS_CAPABILITY_KEY, this);
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation not intended for general use.
	   * @return {!Object} The JSON wire protocol representation of this instance.
	   */
	  [Symbols.serialize]() {
	    var json = {
	      args: this.args_,
	      extensions: this.extensions_.map(function(extension) {
	        if (Buffer.isBuffer(extension)) {
	          return extension.toString('base64');
	        }
	        return io.read(/** @type {string} */(extension))
	            .then(buffer => buffer.toString('base64'));
	      })
	    };
	    if (this.binary_) {
	      json.binary = this.binary_;
	    }
	    return json;
	  }
	}


	/**
	 * Creates a new WebDriver client for Opera.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new session for Opera.
	   *
	   * @param {(capabilities.Capabilities|Options)=} opt_config The configuration
	   *     options.
	   * @param {remote.DriverService=} opt_service The session to use; will use
	   *     the {@link getDefaultService default service} by default.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use,
	   *     or {@code null} to use the currently active flow.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_service, opt_flow) {
	    var service = opt_service || getDefaultService();
	    var client = service.start().then(url => new http.HttpClient(url));
	    var executor = new http.Executor(client);

	    var caps =
	        opt_config instanceof Options ? opt_config.toCapabilities() :
	        (opt_config || capabilities.Capabilities.opera());

	    // On Linux, the OperaDriver does not look for Opera on the PATH, so we
	    // must explicitly find it. See: operachromiumdriver #9.
	    if (process.platform === 'linux') {
	      var options = Options.fromCapabilities(caps);
	      if (!options.binary_) {
	        let exe = io.findInPath('opera', true);
	        if (!exe) {
	          throw Error(
	              'The opera executable could not be found on the current PATH');
	        }
	        options.setOperaBinaryPath(exe);
	      }
	      caps = options.toCapabilities(caps);
	    }

	    return /** @type {!Driver} */(
	        webdriver.WebDriver.createSession(executor, caps, opt_flow, this));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}
	}


	// PUBLIC API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;
	exports.getDefaultService = getDefaultService;
	exports.setDefaultService = setDefaultService;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37), __webpack_require__(51).Buffer))

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a {@linkplain Driver WebDriver} client for the
	 * PhantomJS web browser. By default, it is expected that the PhantomJS
	 * executable can be located on your
	 * [PATH](https://en.wikipedia.org/wiki/PATH_(variable))
	 *
	 *  __Using a Custom PhantomJS Binary__
	 *
	 * If you have PhantomJS.exe placed somewhere other than the root of your
	 * working directory, you can build a custom Capability and attach the
	 * executable's location to the Capability
	 *
	 * For example, if you're using the
	 * [phantomjs-prebuilt](https://www.npmjs.com/package/phantomjs-prebuilt) module
	 * from npm:
	 *
	 *     //setup custom phantomJS capability
	 *     var phantomjs_exe = require('phantomjs-prebuilt').path;
	 *     var customPhantom = selenium.Capabilities.phantomjs();
	 *     customPhantom.set("phantomjs.binary.path", phantomjs_exe);
	 *     //build custom phantomJS driver
	 *     var driver = new selenium.Builder().
	 *            withCapabilities(customPhantom).
	 *            build();
	 *
	 */

	'use strict';

	const fs = __webpack_require__(109);

	const http = __webpack_require__(112),
	    io = __webpack_require__(113),
	    capabilities = __webpack_require__(99),
	    command = __webpack_require__(97),
	    logging = __webpack_require__(40),
	    promise = __webpack_require__(36),
	    webdriver = __webpack_require__(101),
	    portprober = __webpack_require__(114),
	    remote = __webpack_require__(115);


	/**
	 * Name of the PhantomJS executable.
	 * @type {string}
	 * @const
	 */
	const PHANTOMJS_EXE =
	    process.platform === 'win32' ? 'phantomjs.exe' : 'phantomjs';


	/**
	 * Capability that designates the location of the PhantomJS executable to use.
	 * @type {string}
	 * @const
	 */
	const BINARY_PATH_CAPABILITY = 'phantomjs.binary.path';


	/**
	 * Capability that designates the CLI arguments to pass to PhantomJS.
	 * @type {string}
	 * @const
	 */
	const CLI_ARGS_CAPABILITY = 'phantomjs.cli.args';


	/**
	 * Custom command names supported by PhantomJS.
	 * @enum {string}
	 */
	const Command = {
	  EXECUTE_PHANTOM_SCRIPT: 'executePhantomScript'
	};


	/**
	 * Finds the PhantomJS executable.
	 * @param {string=} opt_exe Path to the executable to use.
	 * @return {string} The located executable.
	 * @throws {Error} If the executable cannot be found on the PATH, or if the
	 *     provided executable path does not exist.
	 */
	function findExecutable(opt_exe) {
	  var exe = opt_exe || io.findInPath(PHANTOMJS_EXE, true);
	  if (!exe) {
	    throw Error(
	        'The PhantomJS executable could not be found on the current PATH. ' +
	        'Please download the latest version from ' +
	        'http://phantomjs.org/download.html and ensure it can be found on ' +
	        'your PATH. For more information, see ' +
	        'https://github.com/ariya/phantomjs/wiki');
	  }
	  if (!fs.existsSync(exe)) {
	    throw Error('File does not exist: ' + exe);
	  }
	  return exe;
	}


	/**
	 * Maps WebDriver logging level name to those recognised by PhantomJS.
	 * @const {!Map<string, string>}
	 */
	const WEBDRIVER_TO_PHANTOMJS_LEVEL = new Map([
	    [logging.Level.ALL.name, 'DEBUG'],
	    [logging.Level.DEBUG.name, 'DEBUG'],
	    [logging.Level.INFO.name, 'INFO'],
	    [logging.Level.WARNING.name, 'WARN'],
	    [logging.Level.SEVERE.name, 'ERROR']]);


	/**
	 * Creates a command executor with support for PhantomJS' custom commands.
	 * @param {!Promise<string>} url The server's URL.
	 * @return {!command.Executor} The new command executor.
	 */
	function createExecutor(url) {
	  let client = url.then(url => new http.HttpClient(url));
	  let executor = new http.Executor(client);

	  executor.defineCommand(
	      Command.EXECUTE_PHANTOM_SCRIPT,
	      'POST', '/session/:sessionId/phantom/execute');

	  return executor;
	}

	/**
	 * Creates a new WebDriver client for PhantomJS.
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new PhantomJS session.
	   *
	   * @param {capabilities.Capabilities=} opt_capabilities The desired
	   *     capabilities.
	   * @param {promise.ControlFlow=} opt_flow The control flow to use,
	   *     or {@code null} to use the currently active flow.
	   * @param {string=} opt_logFile Path to the log file for the phantomjs
	   *     executable's output. For convenience, this may be set at runtime with
	   *     the `SELENIUM_PHANTOMJS_LOG` environment variable.
	   * @return {!Driver} A new driver reference.
	   */
	  static createSession(opt_capabilities, opt_flow, opt_logFile) {
	    // TODO: add an Options class for consistency with the other driver types.

	    var caps = opt_capabilities || capabilities.Capabilities.phantomjs();
	    var exe = findExecutable(caps.get(BINARY_PATH_CAPABILITY));
	    var args = [];

	    var logPrefs = caps.get(capabilities.Capability.LOGGING_PREFS);
	    if (logPrefs instanceof logging.Preferences) {
	      logPrefs = logPrefs.toJSON();
	    }

	    if (logPrefs && logPrefs[logging.Type.DRIVER]) {
	      let level = WEBDRIVER_TO_PHANTOMJS_LEVEL.get(
	          logPrefs[logging.Type.DRIVER]);
	      if (level) {
	        args.push('--webdriver-loglevel=' + level);
	      }
	    }

	    opt_logFile = process.env['SELENIUM_PHANTOMJS_LOG'] || opt_logFile;
	    if (typeof opt_logFile === 'string') {
	      args.push('--webdriver-logfile=' + opt_logFile);
	    }

	    var proxy = caps.get(capabilities.Capability.PROXY);
	    if (proxy) {
	      switch (proxy.proxyType) {
	        case 'manual':
	          if (proxy.httpProxy) {
	            args.push(
	                '--proxy-type=http',
	                '--proxy=' + proxy.httpProxy);
	            console.log(args);
	          }
	          break;
	        case 'pac':
	          throw Error('PhantomJS does not support Proxy PAC files');
	        case 'system':
	          args.push('--proxy-type=system');
	          break;
	        case 'direct':
	          args.push('--proxy-type=none');
	          break;
	      }
	    }
	    args = args.concat(caps.get(CLI_ARGS_CAPABILITY) || []);

	    var port = portprober.findFreePort();
	    var service = new remote.DriverService(exe, {
	      port: port,
	      args: Promise.resolve(port).then(function(port) {
	        args.push('--webdriver=' + port);
	        return args;
	      })
	    });

	    var executor = createExecutor(service.start());
	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }

	  /**
	   * This function is a no-op as file detectors are not supported by this
	   * implementation.
	   * @override
	   */
	  setFileDetector() {}

	  /**
	   * Executes a PhantomJS fragment. This method is similar to
	   * {@link #executeScript}, except it exposes the
	   * <a href="http://phantomjs.org/api/">PhantomJS API</a> to the injected
	   * script.
	   *
	   * <p>The injected script will execute in the context of PhantomJS's
	   * {@code page} variable. If a page has not been loaded before calling this
	   * method, one will be created.</p>
	   *
	   * <p>Be sure to wrap callback definitions in a try/catch block, as failures
	   * may cause future WebDriver calls to fail.</p>
	   *
	   * <p>Certain callbacks are used by GhostDriver (the PhantomJS WebDriver
	   * implementation) and overriding these may cause the script to fail. It is
	   * recommended that you check for existing callbacks before defining your own.
	   * </p>
	   *
	   * As with {@link #executeScript}, the injected script may be defined as
	   * a string for an anonymous function body (e.g. "return 123;"), or as a
	   * function. If a function is provided, it will be decompiled to its original
	   * source. Note that injecting functions is provided as a convenience to
	   * simplify defining complex scripts. Care must be taken that the function
	   * only references variables that will be defined in the page's scope and
	   * that the function does not override {@code Function.prototype.toString}
	   * (overriding toString() will interfere with how the function is
	   * decompiled.
	   *
	   * @param {(string|!Function)} script The script to execute.
	   * @param {...*} var_args The arguments to pass to the script.
	   * @return {!promise.Thenable<T>} A promise that resolve to the
	   *     script's return value.
	   * @template T
	   */
	  executePhantomJS(script, var_args) {
	    if (typeof script === 'function') {
	      script = 'return (' + script + ').apply(this, arguments);';
	    }
	    var args = arguments.length > 1
	        ? Array.prototype.slice.call(arguments, 1) : [];
	    return this.schedule(
	        new command.Command(Command.EXECUTE_PHANTOM_SCRIPT)
	            .setParameter('script', script)
	            .setParameter('args', args),
	        'Driver.executePhantomJS()');
	  }
	}


	// PUBLIC API

	exports.Driver = Driver;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37)))

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a WebDriver client for Safari.
	 */

	'use strict';

	const http = __webpack_require__(112);
	const io = __webpack_require__(113);
	const {Capabilities, Capability} = __webpack_require__(99);
	const command = __webpack_require__(97);
	const error = __webpack_require__(38);
	const logging = __webpack_require__(40);
	const promise = __webpack_require__(36);
	const Symbols = __webpack_require__(100);
	const webdriver = __webpack_require__(101);
	const portprober = __webpack_require__(114);
	const remote = __webpack_require__(115);


	/**
	 * @return {string} .
	 * @throws {Error}
	 */
	function findSafariDriver() {
	  let exe = io.findInPath('safaridriver', true);
	  if (!exe) {
	    throw Error(
	      `The safaridriver executable could not be found on the current PATH.
	      Please ensure you are using Safari 10.0 or above.`);
	  }
	  return exe;
	}


	/**
	 * Creates {@link selenium-webdriver/remote.DriverService} instances that manage
	 * a [safaridriver] server in a child process.
	 *
	 * [safaridriver]: https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewInSafari/Articles/Safari_10_0.html#//apple_ref/doc/uid/TP40014305-CH11-DontLinkElementID_28
	 */
	class ServiceBuilder extends remote.DriverService.Builder {
	  /**
	   * @param {string=} opt_exe Path to the server executable to use. If omitted,
	   *     the builder will attempt to locate the safaridriver on the system PATH.
	   */
	  constructor(opt_exe) {
	    super(opt_exe || findSafariDriver());
	    this.setLoopback(true);  // Required.
	  }
	}


	const OPTIONS_CAPABILITY_KEY = 'safari.options';
	const TECHNOLOGY_PREVIEW_OPTIONS_KEY = 'technologyPreview';

	/**
	 * Configuration options specific to the {@link Driver SafariDriver}.
	 */
	class Options {
	  constructor() {
	    /** @private {Object<string, *>} */
	    this.options_ = null;

	    /** @private {./lib/logging.Preferences} */
	    this.logPrefs_ = null;

	    /** @private {?./lib/capabilities.ProxyConfig} */
	    this.proxy_ = null;
	  }

	  /**
	   * Extracts the SafariDriver specific options from the given capabilities
	   * object.
	   * @param {!Capabilities} capabilities The capabilities object.
	   * @return {!Options} The SafariDriver options.
	   */
	  static fromCapabilities(capabilities) {
	    var options = new Options();
	    var o = capabilities.get(OPTIONS_CAPABILITY_KEY);

	    if (o instanceof Options) {
	      options = o;
	    } else if (o) {
	      options.setCleanSession(o.cleanSession);
	      options.setTechnologyPreview(o[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);
	    }

	    if (capabilities.has(Capability.PROXY)) {
	      options.setProxy(capabilities.get(Capability.PROXY));
	    }

	    if (capabilities.has(Capability.LOGGING_PREFS)) {
	      options.setLoggingPrefs(capabilities.get(Capability.LOGGING_PREFS));
	    }

	    return options;
	  }

	  /**
	   * Sets whether to force Safari to start with a clean session. Enabling this
	   * option will cause all global browser data to be deleted.
	   * @param {boolean} clean Whether to make sure the session has no cookies,
	   *     cache entries, local storage, or databases.
	   * @return {!Options} A self reference.
	   */
	  setCleanSession(clean) {
	    if (!this.options_) {
	      this.options_ = {};
	    }
	    this.options_['cleanSession'] = clean;
	    return this;
	  }

	  /**
	   * Sets the logging preferences for the new session.
	   * @param {!./lib/logging.Preferences} prefs The logging preferences.
	   * @return {!Options} A self reference.
	   */
	  setLoggingPrefs(prefs) {
	    this.logPrefs_ = prefs;
	    return this;
	  }

	  /**
	   * Sets the proxy to use.
	   *
	   * @param {./lib/capabilities.ProxyConfig} proxy The proxy configuration to use.
	   * @return {!Options} A self reference.
	   */
	  setProxy(proxy) {
	    this.proxy_ = proxy;
	    return this;
	  }

	  /**
	   * Instruct the SafariDriver to use the Safari Technology Preview if true.
	   * Otherwise, use the release version of Safari. Defaults to using the release version of Safari.
	   *
	   * @param {boolean} useTechnologyPreview
	   * @return {!Options} A self reference.
	   */
	  setTechnologyPreview(useTechnologyPreview) {
	    if (!this.options_) {
	      this.options_ = {};
	    }

	    this.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY] = !!useTechnologyPreview;
	    return this;
	  }

	  /**
	   * Converts this options instance to a {@link Capabilities} object.
	   * @param {Capabilities=} opt_capabilities The capabilities to
	   *     merge these options into, if any.
	   * @return {!Capabilities} The capabilities.
	   */
	  toCapabilities(opt_capabilities) {
	    var caps = opt_capabilities || Capabilities.safari();
	    if (this.logPrefs_) {
	      caps.set(Capability.LOGGING_PREFS, this.logPrefs_);
	    }
	    if (this.proxy_) {
	      caps.set(Capability.PROXY, this.proxy_);
	    }
	    if (this.options_) {
	      caps.set(OPTIONS_CAPABILITY_KEY, this);
	    }
	    return caps;
	  }

	  /**
	   * Converts this instance to its JSON wire protocol representation. Note this
	   * function is an implementation detail not intended for general use.
	   * @return {!Object<string, *>} The JSON wire protocol representation of this
	   *     instance.
	   */
	  [Symbols.serialize]() {
	    return this.options_ || {};
	  }
	}

	/**
	 * @param  {(Options|Object<string, *>)=} o The options object
	 * @return {boolean}
	 */
	function useTechnologyPreview(o) {
	  if (o instanceof Options) {
	    return !!(o.options_ && o.options_[TECHNOLOGY_PREVIEW_OPTIONS_KEY]);
	  }

	  if (o && typeof o === 'object') {
	    return !!o[TECHNOLOGY_PREVIEW_OPTIONS_KEY];
	  }

	  return false;
	}

	const SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE = '/Applications/Safari Technology Preview.app/Contents/MacOS/safaridriver';

	/**
	 * A WebDriver client for Safari. This class should never be instantiated
	 * directly; instead, use the {@linkplain ./builder.Builder Builder}:
	 *
	 *     var driver = new Builder()
	 *         .forBrowser('safari')
	 *         .build();
	 *
	 */
	class Driver extends webdriver.WebDriver {
	  /**
	   * Creates a new Safari session.
	   *
	   * @param {(Options|Capabilities)=} opt_config The configuration
	   *     options for the new session.
	   * @param {promise.ControlFlow=} opt_flow The control flow to create
	   *     the driver under.
	   * @return {!Driver} A new driver instance.
	   */
	  static createSession(opt_config, opt_flow) {
	    let caps, exe;

	    if (opt_config instanceof Options) {
	      caps = opt_config.toCapabilities();
	    } else {
	      caps = opt_config || Capabilities.safari();
	    }

	    if (useTechnologyPreview(caps.get(OPTIONS_CAPABILITY_KEY))) {
	      exe = SAFARIDRIVER_TECHNOLOGY_PREVIEW_EXE;
	    }

	    let service = new ServiceBuilder(exe).build();
	    let executor = new http.Executor(
	        service.start().then(url => new http.HttpClient(url)));

	    return /** @type {!Driver} */(webdriver.WebDriver.createSession(
	        executor, caps, opt_flow, this, () => service.kill()));
	  }
	}


	// Public API


	exports.Driver = Driver;
	exports.Options = Options;
	exports.ServiceBuilder = ServiceBuilder;


/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Provides wrappers around the following global functions from
	 * [Mocha's BDD interface](https://github.com/mochajs/mocha):
	 *
	 * - after
	 * - afterEach
	 * - before
	 * - beforeEach
	 * - it
	 * - it.only
	 * - it.skip
	 * - xit
	 *
	 * Each of the wrapped functions support generator functions. If the generator
	 * {@linkplain ../lib/promise.consume yields a promise}, the test will wait
	 * for that promise to resolve before invoking the next iteration of the
	 * generator:
	 *
	 *     test.it('generators', function*() {
	 *       let x = yield Promise.resolve(1);
	 *       assert.equal(x, 1);
	 *     });
	 *
	 * The provided wrappers leverage the {@link webdriver.promise.ControlFlow}
	 * to simplify writing asynchronous tests:
	 *
	 *     var {Builder, By, until} = require('selenium-webdriver');
	 *     var test = require('selenium-webdriver/testing');
	 *
	 *     test.describe('Google Search', function() {
	 *       var driver;
	 *
	 *       test.before(function() {
	 *         driver = new Builder().forBrowser('firefox').build();
	 *       });
	 *
	 *       test.after(function() {
	 *         driver.quit();
	 *       });
	 *
	 *       test.it('should append query to title', function() {
	 *         driver.get('http://www.google.com/ncr');
	 *         driver.findElement(By.name('q')).sendKeys('webdriver');
	 *         driver.findElement(By.name('btnG')).click();
	 *         driver.wait(until.titleIs('webdriver - Google Search'), 1000);
	 *       });
	 *     });
	 *
	 * You may conditionally suppress a test function using the exported
	 * "ignore" function. If the provided predicate returns true, the attached
	 * test case will be skipped:
	 *
	 *     test.ignore(maybe()).it('is flaky', function() {
	 *       if (Math.random() < 0.5) throw Error();
	 *     });
	 *
	 *     function maybe() { return Math.random() < 0.5; }
	 */

	'use strict';

	const promise = __webpack_require__(107).promise;
	const flow = (function() {
	  const initial = process.env['SELENIUM_PROMISE_MANAGER'];
	  try {
	    process.env['SELENIUM_PROMISE_MANAGER'] = '1';
	    return promise.controlFlow();
	  } finally {
	    if (initial === undefined) {
	      delete process.env['SELENIUM_PROMISE_MANAGER'];
	    } else {
	      process.env['SELENIUM_PROMISE_MANAGER'] = initial;
	    }
	  }
	})();


	/**
	 * Wraps a function so that all passed arguments are ignored.
	 * @param {!Function} fn The function to wrap.
	 * @return {!Function} The wrapped function.
	 */
	function seal(fn) {
	  return function() {
	    fn();
	  };
	}


	/**
	 * Wraps a function on Mocha's BDD interface so it runs inside a
	 * webdriver.promise.ControlFlow and waits for the flow to complete before
	 * continuing.
	 * @param {!Function} globalFn The function to wrap.
	 * @return {!Function} The new function.
	 */
	function wrapped(globalFn) {
	  return function() {
	    if (arguments.length === 1) {
	      return globalFn(wrapArgument(arguments[0]));

	    } else if (arguments.length === 2) {
	      return globalFn(arguments[0], wrapArgument(arguments[1]));

	    } else {
	      throw Error('Invalid # arguments: ' + arguments.length);
	    }
	  };
	}


	function wrapArgument(value) {
	  if (typeof value === 'function') {
	    return makeAsyncTestFn(value);
	  }
	  return value;
	}


	/**
	 * Make a wrapper to invoke caller's test function, fn.  Run the test function
	 * within a ControlFlow.
	 *
	 * Should preserve the semantics of Mocha's Runnable.prototype.run (See
	 * https://github.com/mochajs/mocha/blob/master/lib/runnable.js#L192)
	 *
	 * @param {!Function} fn
	 * @return {!Function}
	 */
	function makeAsyncTestFn(fn) {
	  const isAsync = fn.length > 0;
	  const isGenerator = promise.isGenerator(fn);
	  if (isAsync && isGenerator) {
	    throw TypeError(
	        'generator-based tests must not take a callback; for async testing,'
	            + ' return a promise (or yield on a promise)');
	  }

	  var ret = /** @type {function(this: mocha.Context)}*/ (function(done) {
	    const runTest = (resolve, reject) => {
	      try {
	        if (isAsync) {
	          fn.call(this, err => err ? reject(err) : resolve());
	        } else if (isGenerator) {
	          resolve(promise.consume(fn, this));
	        } else {
	          resolve(fn.call(this));
	        }
	      } catch (ex) {
	        reject(ex);
	      }
	    };

	    if (!promise.USE_PROMISE_MANAGER) {
	      new Promise(runTest).then(seal(done), done);
	      return;
	    }

	    var runnable = this.runnable();
	    var mochaCallback = runnable.callback;
	    runnable.callback = function() {
	      flow.reset();
	      return mochaCallback.apply(this, arguments);
	    };

	    flow.execute(function controlFlowExecute() {
	      return new promise.Promise(function(fulfill, reject) {
	        return runTest(fulfill, reject);
	      }, flow);
	    }, runnable.fullTitle()).then(seal(done), done);
	  });

	  ret.toString = function() {
	    return fn.toString();
	  };

	  return ret;
	}


	/**
	 * Ignores the test chained to this function if the provided predicate returns
	 * true.
	 * @param {function(): boolean} predicateFn A predicate to call to determine
	 *     if the test should be suppressed. This function MUST be synchronous.
	 * @return {!Object} An object with wrapped versions of {@link #it()} and
	 *     {@link #describe()} that ignore tests as indicated by the predicate.
	 */
	function ignore(predicateFn) {
	  var describe = wrap(exports.xdescribe, exports.describe);
	  describe.only = wrap(exports.xdescribe, exports.describe.only);

	  var it = wrap(exports.xit, exports.it);
	  it.only = wrap(exports.xit, exports.it.only);

	  return {
	    describe: describe,
	    it: it
	  };

	  function wrap(onSkip, onRun) {
	    return function(title, fn) {
	      if (predicateFn()) {
	        onSkip(title, fn);
	      } else {
	        onRun(title, fn);
	      }
	    };
	  }
	}


	/**
	 * @param {string} name
	 * @return {!Function}
	 * @throws {TypeError}
	 */
	function getMochaGlobal(name) {
	  let fn = global[name];
	  let type = typeof fn;
	  if (type !== 'function') {
	    throw TypeError(
	        `Expected global.${name} to be a function, but is ${type}. `
	            + 'This can happen if you try using this module when running '
	            + 'with node directly instead of using the mocha executable');
	  }
	  return fn;
	}


	const WRAPPED = {
	  after: null,
	  afterEach: null,
	  before: null,
	  beforeEach: null,
	  it: null,
	  itOnly: null,
	  xit: null
	};


	function wrapIt() {
	  if (!WRAPPED.it) {
	    let it = getMochaGlobal('it');
	    WRAPPED.it = wrapped(it);
	    WRAPPED.itOnly = wrapped(it.only);
	  }
	}



	// PUBLIC API


	/**
	 * @return {!promise.ControlFlow} the control flow instance used by this module
	 *     to coordinate test actions.
	 */
	exports.controlFlow = function(){
	  return flow;
	};


	/**
	 * Registers a new test suite.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.describe = function(name, opt_fn) {
	  let fn = getMochaGlobal('describe');
	  return opt_fn ? fn(name, opt_fn) : fn(name);
	};


	/**
	 * An alias for {@link #describe()} that marks the suite as exclusive,
	 * suppressing all other test suites.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.describe.only = function(name, opt_fn) {
	  let desc = getMochaGlobal('describe');
	  return opt_fn ? desc.only(name, opt_fn) : desc.only(name);
	};


	/**
	 * Defines a suppressed test suite.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.describe.skip = function(name, opt_fn) {
	  let fn = getMochaGlobal('describe');
	  return opt_fn ? fn.skip(name, opt_fn) : fn.skip(name);
	};


	/**
	 * Defines a suppressed test suite.
	 * @param {string} name The suite name.
	 * @param {function()=} opt_fn The suite function, or `undefined` to define
	 *     a pending test suite.
	 */
	exports.xdescribe = function(name, opt_fn) {
	  let fn = getMochaGlobal('xdescribe');
	  return opt_fn ? fn(name, opt_fn) : fn(name);
	};


	/**
	 * Register a function to call after the current suite finishes.
	 * @param {function()} fn .
	 */
	exports.after = function(fn) {
	  if (!WRAPPED.after) {
	    WRAPPED.after = wrapped(getMochaGlobal('after'));
	  }
	  WRAPPED.after(fn);
	};


	/**
	 * Register a function to call after each test in a suite.
	 * @param {function()} fn .
	 */
	exports.afterEach = function(fn) {
	  if (!WRAPPED.afterEach) {
	    WRAPPED.afterEach = wrapped(getMochaGlobal('afterEach'));
	  }
	  WRAPPED.afterEach(fn);
	};


	/**
	 * Register a function to call before the current suite starts.
	 * @param {function()} fn .
	 */
	exports.before = function(fn) {
	  if (!WRAPPED.before) {
	    WRAPPED.before = wrapped(getMochaGlobal('before'));
	  }
	  WRAPPED.before(fn);
	};

	/**
	 * Register a function to call before each test in a suite.
	 * @param {function()} fn .
	 */
	exports.beforeEach = function(fn) {
	  if (!WRAPPED.beforeEach) {
	    WRAPPED.beforeEach = wrapped(getMochaGlobal('beforeEach'));
	  }
	  WRAPPED.beforeEach(fn);
	};

	/**
	 * Add a test to the current suite.
	 * @param {string} name The test name.
	 * @param {function()=} opt_fn The test function, or `undefined` to define
	 *     a pending test case.
	 */
	exports.it = function(name, opt_fn) {
	  wrapIt();
	  if (opt_fn) {
	    WRAPPED.it(name, opt_fn);
	  } else {
	    WRAPPED.it(name);
	  }
	};

	/**
	 * An alias for {@link #it()} that flags the test as the only one that should
	 * be run within the current suite.
	 * @param {string} name The test name.
	 * @param {function()=} opt_fn The test function, or `undefined` to define
	 *     a pending test case.
	 */
	exports.it.only = function(name, opt_fn) {
	  wrapIt();
	  if (opt_fn) {
	    WRAPPED.itOnly(name, opt_fn);
	  } else {
	    WRAPPED.itOnly(name);
	  }
	};


	/**
	 * Adds a test to the current suite while suppressing it so it is not run.
	 * @param {string} name The test name.
	 * @param {function()=} opt_fn The test function, or `undefined` to define
	 *     a pending test case.
	 */
	exports.xit = function(name, opt_fn) {
	  if (!WRAPPED.xit) {
	    WRAPPED.xit = wrapped(getMochaGlobal('xit'));
	  }
	  if (opt_fn) {
	    WRAPPED.xit(name, opt_fn);
	  } else {
	    WRAPPED.xit(name);
	  }
	};


	exports.it.skip = exports.xit;
	exports.ignore = ignore;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(37), (function() { return this; }())))

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

	// Licensed to the Software Freedom Conservancy (SFC) under one
	// or more contributor license agreements.  See the NOTICE file
	// distributed with this work for additional information
	// regarding copyright ownership.  The SFC licenses this file
	// to you under the Apache License, Version 2.0 (the
	// "License"); you may not use this file except in compliance
	// with the License.  You may obtain a copy of the License at
	//
	//   http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing,
	// software distributed under the License is distributed on an
	// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	// KIND, either express or implied.  See the License for the
	// specific language governing permissions and limitations
	// under the License.

	/**
	 * @fileoverview Defines a library that simplifies writing assertions against
	 * promised values.
	 *
	 * > <hr>
	 * > __NOTE:__ This module is considered experimental and is subject to
	 * > change, or removal, at any time!
	 * > <hr>
	 *
	 * Sample usage:
	 *
	 *     var driver = new webdriver.Builder().build();
	 *     driver.get('http://www.google.com');
	 *
	 *     assert(driver.getTitle()).equalTo('Google');
	 */

	'use strict';

	const assert = __webpack_require__(289);

	function trueType(v) {
	  if (v === null) {
	    return 'null';
	  }

	  let type = typeof v;
	  if (type === 'object') {
	    if (Array.isArray(v)) {
	      type = 'array';
	    }
	  }
	  return type;
	}


	function checkType(v, want) {
	  let got = trueType(v);
	  if (got !== want) {
	    throw new TypeError('require ' + want + ', but got ' + got);
	  }
	  return v;
	}

	const checkNumber = v => checkType(v, 'number');
	const checkFunction = v => checkType(v, 'function');
	const checkString = v => checkType(v, 'string');

	const isFunction = v => trueType(v) === 'function';
	const isNumber = v => trueType(v) === 'number';
	const isObject = v => trueType(v) === 'object';
	const isString = v => trueType(v) === 'string';


	function describe(value) {
	  let ret;
	  try {
	    ret = `<${String(value)}>`;
	  } catch (e) {
	    ret = `<toString failed: ${e.message}>`;
	  }

	  if (null !== value && void(0) !== value) {
	    ret += ` (${trueType(value)})`;
	  }

	  return ret;
	}


	function evaluate(value, predicate) {
	  if (isObject(value) && isFunction(value.then)) {
	    return value.then(predicate);
	  }
	  predicate(value);
	}


	/**
	 * @private
	 */
	class Assertion {
	  /**
	   * @param {?} subject The subject of this assertion.
	   * @param {boolean=} opt_invert Whether to invert any assertions performed by
	   *     this instance.
	   */
	  constructor(subject, opt_invert) {
	    /** @private {?} */
	    this.subject_ = subject;
	    /** @private {boolean} */
	    this.invert_ = !!opt_invert;
	  }

	  /**
	   * @param {number} expected The minimum permissible value (inclusive).
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  atLeast(expected, opt_message) {
	    checkNumber(expected);
	    return evaluate(this.subject_, function(actual) {
	      if (!isNumber(actual) || actual < expected) {
	        assert.fail(actual, expected, opt_message, '>=');
	      }
	    });
	  }

	  /**
	   * @param {number} expected The maximum permissible value (inclusive).
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  atMost(expected, opt_message) {
	    checkNumber(expected);
	    return evaluate(this.subject_, function (actual) {
	      if (!isNumber(actual) || actual > expected) {
	        assert.fail(actual, expected, opt_message, '<=');
	      }
	    });
	  }

	  /**
	   * @param {number} expected The maximum permissible value (exclusive).
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  greaterThan(expected, opt_message) {
	    checkNumber(expected);
	    return evaluate(this.subject_, function(actual) {
	      if (!isNumber(actual) || actual <= expected) {
	        assert.fail(actual, expected, opt_message, '>');
	      }
	    });
	  }

	  /**
	   * @param {number} expected The minimum permissible value (exclusive).
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  lessThan(expected, opt_message) {
	    checkNumber(expected);
	    return evaluate(this.subject_,  function (actual) {
	      if (!isNumber(actual) || actual >= expected) {
	        assert.fail(actual, expected, opt_message, '<');
	      }
	    });
	  }

	  /**
	   * @param {number} expected The desired value.
	   * @param {number} epsilon The maximum distance from the desired value.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  closeTo(expected, epsilon, opt_message) {
	    checkNumber(expected);
	    checkNumber(epsilon);
	    return evaluate(this.subject_, function(actual) {
	      checkNumber(actual);
	      if (Math.abs(expected - actual) > epsilon) {
	        assert.fail(opt_message || `${actual} === ${expected} (± ${epsilon})`);
	      }
	    });
	  }

	  /**
	   * @param {function(new: ?)} ctor The exptected type's constructor.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  instanceOf(ctor, opt_message) {
	    checkFunction(ctor);
	    return evaluate(this.subject_, function(actual) {
	      if (!(actual instanceof ctor)) {
	        assert.fail(
	            opt_message
	                || `${describe(actual)} instanceof ${ctor.name || ctor}`);
	      }
	    });
	  }

	  /**
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  isNull(opt_message) {
	    return this.isEqualTo(null);
	  }

	  /**
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  isUndefined(opt_message) {
	    return this.isEqualTo(void(0));
	  }

	  /**
	   * Ensures the subject of this assertion is either a string or array
	   * containing the given `value`.
	   *
	   * @param {?} value The value expected to be contained within the subject.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  contains(value, opt_message) {
	    return evaluate(this.subject_, function(actual) {
	      if (actual instanceof Map || actual instanceof Set) {
	        assert.ok(actual.has(value), opt_message || `${actual}.has(${value})`);
	      } else if (Array.isArray(actual) || isString(actual)) {
	        assert.ok(
	            actual.indexOf(value) !== -1,
	            opt_message || `${actual}.indexOf(${value}) !== -1`);
	      } else {
	        assert.fail(
	            `Expected an array, map, set, or string: got ${describe(actual)}`);
	      }
	    });
	  }

	  /**
	   * @param {string} str The expected suffix.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  endsWith(str, opt_message) {
	    checkString(str);
	    return evaluate(this.subject_, function(actual) {
	      if (!isString(actual) || !actual.endsWith(str)) {
	        assert.fail(actual, str, 'ends with');
	      }
	    });
	  }

	  /**
	   * @param {string} str The expected prefix.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  startsWith(str, opt_message) {
	    checkString(str);
	    return evaluate(this.subject_, function(actual) {
	      if (!isString(actual) || !actual.startsWith(str)) {
	        assert.fail(actual, str, 'starts with');
	      }
	    });
	  }

	  /**
	   * @param {!RegExp} regex The regex the subject is expected to match.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  matches(regex, opt_message) {
	    if (!(regex instanceof RegExp)) {
	      throw TypeError(`Not a RegExp: ${describe(regex)}`);
	    }
	    return evaluate(this.subject_, function(actual) {
	      if (!isString(actual) || !regex.test(actual)) {
	        let message = opt_message
	            || `Expected a string matching ${regex}, got ${describe(actual)}`;
	        assert.fail(actual, regex, message);
	      }
	    });
	  }

	  /**
	   * @param {?} value The unexpected value.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  notEqualTo(value, opt_message) {
	    return evaluate(this.subject_, function(actual) {
	      assert.notStrictEqual(actual, value, opt_message);
	    });
	  }

	  /** An alias for {@link #isEqualTo}. */
	  equalTo(value, opt_message) {
	    return this.isEqualTo(value, opt_message);
	  }

	  /** An alias for {@link #isEqualTo}. */
	  equals(value, opt_message) {
	    return this.isEqualTo(value, opt_message);
	  }

	  /**
	   * @param {?} value The expected value.
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  isEqualTo(value, opt_message) {
	    return evaluate(this.subject_, function(actual) {
	      assert.strictEqual(actual, value, opt_message);
	    });
	  }

	  /**
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  isTrue(opt_message) {
	    return this.isEqualTo(true, opt_message);
	  }

	  /**
	   * @param {string=} opt_message An optional failure message.
	   * @return {(Promise|undefined)} The result of this assertion, if the subject
	   *     is a promised-value. Otherwise, the assertion is performed immediately
	   *     and nothing is returned.
	   */
	  isFalse(opt_message) {
	    return this.isEqualTo(false, opt_message);
	  }
	}


	// PUBLIC API


	/**
	 * Creates an assertion about the given `value`.
	 * @return {!Assertion} the new assertion.
	 */
	module.exports = function assertThat(value) {
	  return new Assertion(value);
	};
	module.exports.Assertion = Assertion;  // Exported to help generated docs


/***/ }),
/* 289 */
/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';

	// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
	// original notice:

	/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	function compare(a, b) {
	  if (a === b) {
	    return 0;
	  }

	  var x = a.length;
	  var y = b.length;

	  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
	    if (a[i] !== b[i]) {
	      x = a[i];
	      y = b[i];
	      break;
	    }
	  }

	  if (x < y) {
	    return -1;
	  }
	  if (y < x) {
	    return 1;
	  }
	  return 0;
	}
	function isBuffer(b) {
	  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
	    return global.Buffer.isBuffer(b);
	  }
	  return !!(b != null && b._isBuffer);
	}

	// based on node assert, original notice:

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	var util = __webpack_require__(71);
	var hasOwn = Object.prototype.hasOwnProperty;
	var pSlice = Array.prototype.slice;
	var functionsHaveNames = (function () {
	  return function foo() {}.name === 'foo';
	}());
	function pToString (obj) {
	  return Object.prototype.toString.call(obj);
	}
	function isView(arrbuf) {
	  if (isBuffer(arrbuf)) {
	    return false;
	  }
	  if (typeof global.ArrayBuffer !== 'function') {
	    return false;
	  }
	  if (typeof ArrayBuffer.isView === 'function') {
	    return ArrayBuffer.isView(arrbuf);
	  }
	  if (!arrbuf) {
	    return false;
	  }
	  if (arrbuf instanceof DataView) {
	    return true;
	  }
	  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
	    return true;
	  }
	  return false;
	}
	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	var regex = /\s*function\s+([^\(\s]*)\s*/;
	// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
	function getName(func) {
	  if (!util.isFunction(func)) {
	    return;
	  }
	  if (functionsHaveNames) {
	    return func.name;
	  }
	  var str = func.toString();
	  var match = str.match(regex);
	  return match && match[1];
	}
	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  } else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = getName(stackStartFunction);
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function truncate(s, n) {
	  if (typeof s === 'string') {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}
	function inspect(something) {
	  if (functionsHaveNames || !util.isFunction(something)) {
	    return util.inspect(something);
	  }
	  var rawname = getName(something);
	  var name = rawname ? ': ' + rawname : '';
	  return '[Function' +  name + ']';
	}
	function getMessage(self) {
	  return truncate(inspect(self.actual), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(inspect(self.expected), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
	  }
	};

	function _deepEqual(actual, expected, strict, memos) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;
	  } else if (isBuffer(actual) && isBuffer(expected)) {
	    return compare(actual, expected) === 0;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if ((actual === null || typeof actual !== 'object') &&
	             (expected === null || typeof expected !== 'object')) {
	    return strict ? actual === expected : actual == expected;

	  // If both values are instances of typed arrays, wrap their underlying
	  // ArrayBuffers in a Buffer each to increase performance
	  // This optimization requires the arrays to have the same type as checked by
	  // Object.prototype.toString (aka pToString). Never perform binary
	  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
	  // bit patterns are not identical.
	  } else if (isView(actual) && isView(expected) &&
	             pToString(actual) === pToString(expected) &&
	             !(actual instanceof Float32Array ||
	               actual instanceof Float64Array)) {
	    return compare(new Uint8Array(actual.buffer),
	                   new Uint8Array(expected.buffer)) === 0;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else if (isBuffer(actual) !== isBuffer(expected)) {
	    return false;
	  } else {
	    memos = memos || {actual: [], expected: []};

	    var actualIndex = memos.actual.indexOf(actual);
	    if (actualIndex !== -1) {
	      if (actualIndex === memos.expected.indexOf(expected)) {
	        return true;
	      }
	    }

	    memos.actual.push(actual);
	    memos.expected.push(expected);

	    return objEquiv(actual, expected, strict, memos);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b, strict, actualVisitedObjects) {
	  if (a === null || a === undefined || b === null || b === undefined)
	    return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b))
	    return a === b;
	  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
	    return false;
	  var aIsArgs = isArguments(a);
	  var bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b, strict);
	  }
	  var ka = objectKeys(a);
	  var kb = objectKeys(b);
	  var key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length !== kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] !== kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
	      return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, false)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	assert.notDeepStrictEqual = notDeepStrictEqual;
	function notDeepStrictEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected, true)) {
	    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
	  }
	}


	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  }

	  try {
	    if (actual instanceof expected) {
	      return true;
	    }
	  } catch (e) {
	    // Ignore.  The instanceof check doesn't work for arrow functions.
	  }

	  if (Error.isPrototypeOf(expected)) {
	    return false;
	  }

	  return expected.call({}, actual) === true;
	}

	function _tryBlock(block) {
	  var error;
	  try {
	    block();
	  } catch (e) {
	    error = e;
	  }
	  return error;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (typeof block !== 'function') {
	    throw new TypeError('"block" argument must be a function');
	  }

	  if (typeof expected === 'string') {
	    message = expected;
	    expected = null;
	  }

	  actual = _tryBlock(block);

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  var userProvidedMessage = typeof message === 'string';
	  var isUnwantedException = !shouldThrow && util.isError(actual);
	  var isUnexpectedException = !shouldThrow && actual && !expected;

	  if ((isUnwantedException &&
	      userProvidedMessage &&
	      expectedException(actual, expected)) ||
	      isUnexpectedException) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws(true, block, error, message);
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
	  _throws(false, block, error, message);
	};

	assert.ifError = function(err) { if (err) throw err; };

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Manager for command target: current tab/window
	 * Target has several properties:
	 * - handle
	 * - tabId
	 * - attached debugger
	 * - root nodeId
	 * - execution context id
	 * - ...
	 *
	 */

	const thenChrome = __webpack_require__(1);
	const Debugger = __webpack_require__(291);
	const filter = __webpack_require__(292);
	const tabLoader = __webpack_require__(293);
	const logger = __webpack_require__(88).create('Targets');

	const TAB_PREFIX = 'tab-';
	const EXTENSION_PREFIX = 'extension-';

	const currentTarget = {
	  handle: null,
	  tabId: null,
	  debugger: null,
	  rootId: null,
	  contextId: null,
	};
	const usedTabIds = new Set();
	const debuggers = [];

	const Targets = module.exports = {
	  // todo: refactor - move to somewhere else
	  dontCloseTabs: false,

	  // session id is constant for loopback chrome
	  SESSION_ID: 'loopback',

	  get handle() {
	    return currentTarget.handle;
	  },

	  get tabId() {
	    return currentTarget.tabId;
	  },

	  get debugger() {
	    return currentTarget.debugger;
	  },

	  get rootId() {
	    return currentTarget.rootId;
	  },

	  set rootId(value) {
	    currentTarget.rootId = value;
	  },

	  reset() {
	    clearCurrentTargetProps();
	    // detach debuggers and close tabs that can hang from prev session
	    return Promise.resolve()
	      .then(detachDebuggers)
	      .then(closeUsedTabs);
	  },

	  getAllTargets() {
	    // chrome has several build-in hidden event-page extensions that may appear as targets, e.g.:
	    // - CryptoTokenExtension (kmendfapggjehodndflmmgagdbamhnfd)
	    // - Google Network Speech (neajdppkdcdipfabeoofebfddakdcjhd)
	    // - Google Hangouts (nkeimhogjdpnpccoofpliimaahmaaome)
	    // so filter targets by `management.getAll` result.
	    // todo: add inactive background event pages
	    const getTargets = thenChrome.debugger.getTargets();
	    const getEnabledExtensions = thenChrome.management.getAll()
	      .then(items => items.filter(item => item.enabled && item.type === 'extension'));
	    return Promise.all([getTargets, getEnabledExtensions])
	      .then(([targets, enabledExtensions]) => {
	        return targets
	          .filter(target => filter.isCorrectTarget(target, enabledExtensions))
	          .map(addHandle);
	      });
	  },

	  getByProp(prop, value) {
	    return this.getAllTargets()
	      .then(targets => {
	          const target = targets.filter(target => target[prop] === value)[0];
	          return target || Promise.reject(`Target with ${prop} = '${value}' does not exist`);
	      });
	  },

	  switchByTabId(tabId) {
	    return this.switchByProp('tabId', tabId);
	  },

	  switchByHandle(handle) {
	    return this.switchByProp('handle', handle);
	  },

	  switchByExtensionId(extensionId) {
	    if (extensionId) {
	      return this.switchByProp('extensionId', extensionId);
	    } else {
	      return this._getFirstExtensionTarget()
	        .then(target => switchToTarget(target))
	    }
	  },

	  switchByProp(prop, value) {
	    return this.getByProp(prop, value)
	      .then(target => switchToTarget(target))
	  },

	  /**
	   * If current target tab is loading, wait for complete
	   */
	  ensureComplete() {
	    return currentTarget.tabId
	      ? tabLoader.wait(currentTarget.tabId)
	      : Promise.resolve();
	  },

	  /**
	   * Registers target
	   * @param {Number} tabId
	   */
	  registerTabId(tabId) {
	    usedTabIds.add(tabId);
	  },

	  /**
	   * Close current target (only for tabs)
	   * After this command current target is not set
	   */
	  close() {
	    if (!currentTarget.tabId) {
	      throw new Error('Can not close non-tab target');
	    }
	    return Promise.resolve()
	      .then(() => currentTarget.debugger.detach())
	      .then(() => closeTabSafe(currentTarget.tabId))
	      .then(() => {
	        const index = debuggers.findIndex(d => d === currentTarget.debugger);
	        debuggers.splice(index, 1);
	        usedTabIds.delete(currentTarget.tabId);
	        clearCurrentTargetProps();
	      })
	  },

	  quit() {
	    return this.reset();
	  },

	  _getFirstExtensionTarget() {
	    return this.getAllTargets()
	      .then(targets => {
	        const target = targets.filter(target => target.extensionId)[0];
	        return target || Promise.reject(`No available extensions found`);
	      });
	  }
	};

	function attachDebugger(target) {
	  const existingDebugger = debuggers.filter(d => d.isAttachedTo(target))[0];
	  if (existingDebugger) {
	    currentTarget.debugger = existingDebugger;
	    return Promise.resolve();
	  } else {
	    currentTarget.debugger = new Debugger();
	    debuggers.push(currentTarget.debugger);
	    return currentTarget.debugger.attach(target);
	  }
	}

	function detachDebuggers() {
	  const tasks = debuggers.map(d => d.detach());
	  return Promise.all(tasks)
	    .then(() => debuggers.length = 0);
	}

	function closeUsedTabs() {
	  // dont use chrome.tabs.remove(<array of tab ids>)
	  // as it fails on first non-existent tab
	  const tasks = Targets.dontCloseTabs ? [] : [...usedTabIds].map(closeTabSafe);
	  return Promise.all(tasks)
	    .then(() => usedTabIds.clear());
	}

	function closeTabSafe(tabId) {
	  // dont throw errors as tab maybe closed by user
	  return thenChrome.tabs.remove(tabId).catch(() => {});
	}

	function addHandle(target) {
	  if (target.type === 'page') {
	    target.handle = TAB_PREFIX + target.id;
	  }
	  if (target.type === 'background_page') {
	    target.handle = EXTENSION_PREFIX + target.extensionId;
	  }
	  return target;
	}

	function switchToTarget(target) {
	  clearCurrentTargetProps();
	  currentTarget.handle = target.handle;
	  return target.extensionId
	    ? switchToExtensionTarget(target)
	    : switchToTabTarget(target);
	}

	function switchToTabTarget(target) {
	  logger.log('Switching to tab', target.tabId, target.url);
	  currentTarget.tabId = target.tabId;
	  Targets.registerTabId(target.tabId);
	  return Promise.resolve()
	    .then(() => thenChrome.tabs.update(target.tabId, {active: true}))
	    .then(() => attachDebugger({tabId: target.tabId}));
	}

	function switchToExtensionTarget(target) {
	  logger.log('Switching to extension', target.extensionId);
	  currentTarget.tabId = null;
	  return Promise.resolve()
	    .then(() => attachDebugger({extensionId: target.extensionId}));
	}

	// function switchToFrame(frameId) {
	//   // todo
	// }

	function clearCurrentTargetProps() {
	  Object.keys(currentTarget).forEach(key => currentTarget[key] = null);
	}


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Debugger attached to particular target
	 */

	const thenChrome = __webpack_require__(1);
	const Channel = __webpack_require__(30);
	const logger = __webpack_require__(88).create('Debugger');

	// see: https://chromedevtools.github.io/debugger-protocol-viewer/1-2/
	const PROTOCOL_VERSION = '1.2';

	module.exports = class Debugger {

	  constructor () {
	    this._target = null;
	    this._onEvent = this._onEvent.bind(this);
	    this._onDetach = this._onDetach.bind(this);
	    this.onEvent = new Channel();
	  }

	  attach(target) {
	    return thenChrome.debugger.attach(target, PROTOCOL_VERSION)
	      .then(() => this._afterAttach(target))
	      .catch(e => prettyError(e, 'attach'));
	  }

	  sendCommand(name, params = {}) {
	    logger.log(`Debugger command ${name}`, params);
	    return thenChrome.debugger.sendCommand(this._target, name, params)
	      .then(res => {
	        logger.log(`Response to '${name}'`, res);
	        return res;
	      })
	      .catch(e => prettyError(e, name, params));
	  }

	  detach() {
	    // debugger can be automatically detached when target closes.
	    // In that case second call of detach() should not fail
	    if (this._target) {
	      return thenChrome.debugger.detach(this._target)
	        .then(() => this._afterDetach('self'))
	        .catch(e => prettyError(e, 'detach'));
	    } else {
	      return Promise.resolve();
	    }
	  }

	  getTarget() {
	    return this._target;
	  }

	  isAttachedTo(target) {
	    if (!this._target || !target) {
	      return false;
	    }
	    const sameTabId = this._target.tabId && this._target.tabId === target.tabId;
	    const sameExtensionId = this._target.extensionId && this._target.extensionId === target.extensionId;
	    return sameTabId || sameExtensionId;
	  }

	  _getTargetStr() {
	    return JSON.stringify(this._target);
	  }

	  _afterAttach(target) {
	    this._target = target;
	    logger.log(`Attached to ${this._getTargetStr()}`);
	    chrome.debugger.onEvent.addListener(this._onEvent);
	    chrome.debugger.onDetach.addListener(this._onDetach);
	  }

	  _afterDetach(reason) {
	    logger.log(`Detached from ${this._getTargetStr()} with reason '${reason}'`);
	    this._target = null;
	    chrome.debugger.onEvent.removeListener(this._onEvent);
	    chrome.debugger.onDetach.removeListener(this._onDetach);
	  }

	  _onDetach(target, reason) {
	    if (this.isAttachedTo(target)) {
	      this._afterDetach(reason);
	    }
	  }

	  _onEvent(target, method, params) {
	    if (this.isAttachedTo(target)) {
	      this.onEvent.dispatch(method, params);
	    }
	  }
	};

	function prettyError(e, command, params) {
	  // convert debugger error into pretty one
	  // debugger error is object with single key 'message'
	  const isDebuggerError = typeof e === 'object' && Object.keys(e).length === 1 && e.message;
	  if (isDebuggerError) {
	    let prettyMessage = e.message;
	    try {
	      const parsed = JSON.parse(e.message);
	      const data = parsed.data === undefined ? '' : ` ${parsed.data}`;
	      prettyMessage = `${parsed.message}${data}`;
	    } catch (e) {
	      // if can not parse, just return error message as is
	    }
	    const commandInfo = command ? ` Command: ${command} ${stringifyParams(params)}` : '';
	    const error = new Error(`Debugger error '${prettyMessage}'${commandInfo}`);
	    return Promise.reject(error);
	  } else {
	    return Promise.reject(e);
	  }
	}

	function stringifyParams(params = []) {
	  try {
	    return JSON.stringify(params);
	  } catch (e) {
	    return `${params}`;
	  }
	}


/***/ }),
/* 292 */
/***/ (function(module, exports) {

	/**
	 * Filters debugger targets that we can use
	 */

	/**
	 * We also exclude chromedriver internal extension from available targets
	 * See: https://chromium.googlesource.com/chromium/src.git/+/master/chrome/test/chromedriver/extension/
	 */
	const CHROMEDRIVER_EXTENSION_ID = 'aapnijgdinlhnhlmodcfapnahmbfebeb';

	exports.isCorrectTarget = function (target, enabledExtensions) {
	  return isSuitableType(target)
	    && !isDevtools(target)
	    && !isAutotesterBg(target)
	    && !isChromedriverExtensionBg(target)
	    && !isAutotesterUi(target)
	    && isEnabledExtension(target, enabledExtensions)
	};

	function isSuitableType(target) {
	  // allowing 'background_page' type is extra feature to test chrome extensions
	  return target.type === 'page' || target.type === 'background_page';
	}

	function isDevtools(target) {
	  return target.url.startsWith('chrome-devtools://');
	}

	function isAutotesterBg(target) {
	  return target.type === 'background_page' && target.extensionId === chrome.runtime.id;
	}

	function isChromedriverExtensionBg(target) {
	  return target.type === 'background_page' && target.extensionId === CHROMEDRIVER_EXTENSION_ID;
	}

	function isAutotesterUi(target) {
	  return target.type === 'page' && target.url === chrome.runtime.getURL('core/ui/ui.html');
	}

	function isEnabledExtension(target, enabledExtensions) {
	  return target.type === 'background_page'
	    ? Boolean(enabledExtensions.filter(e => e.id === target.extensionId).length)
	    : true
	}


/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Creates/updates tabs and waits for process finished (returns Promise)
	 * Saves initial and final urls.
	 */

	const thenChrome = __webpack_require__(1);

	// map of tabs that are currently loading (waiting "complete" status)
	const tabs = new Map();

	/**
	 * Creates new tab
	 * @param {Object} info
	 * @returns {Promise}
	 */
	exports.create = function (info) {
	  ensureListeners();
	  return Promise.resolve()
	    .then(() => thenChrome.tabs.create(info))
	    .then(createLoadingTab);
	};

	/**
	 * Updates tab
	 * @param {Number} tabId
	 * @param {Object} info
	 * @returns {Promise}
	 */
	exports.update = function (tabId, info) {
	  ensureListeners();
	  return Promise.resolve()
	    .then(() => thenChrome.tabs.update(tabId, info))
	    .then(createLoadingTab);
	};

	/**
	 * Waits for existing tab to get loaded (receive 'complete' status)
	 *
	 * @param {Number} tabId
	 * @param {Boolean} force - wait for complete event even if tab in complete status now
	 * @returns {Promise}
	 */
	exports.wait = function (tabId, force = false) {
	  ensureListeners();
	  return thenChrome.tabs.get(tabId)
	    .then(tab => {
	      if (tab.status === 'loading' || force) {
	        return createLoadingTab(tab);
	      }
	    });
	};

	function ensureListeners() {
	  if (!chrome.tabs.onUpdated.hasListener(onTabUpdated)) {
	    chrome.tabs.onUpdated.addListener(onTabUpdated);
	  }
	}

	function onTabUpdated(tabId, changeInfo, tab) {
	  if (tabs.has(tabId) && changeInfo.status === 'complete') {
	    const info = tabs.get(tabId);
	    tab.initialUrl = info.initialUrl;
	    info.resolve(tab);
	    tabs.delete(tabId);
	  }
	}

	function createLoadingTab(tab) {
	  if (tabs.has(tab.id)) {
	    const tabInfo = tabs.get(tab.id);
	    // reject previous promise
	    tabInfo.reject();
	    tabs.delete(tab.id);
	  }
	  return new Promise((resolve, reject) => {
	    const tabInfo = {resolve, reject, initialUrl: tab.url};
	    tabs.set(tab.id, tabInfo);
	  });
	}


/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Setup loopback
	 */

	const fakeHttp = __webpack_require__(82);
	const extensionDriver = __webpack_require__(295);

	// remember server for that handler already set
	let doneForServerUrl = '';

	exports.setup = function (serverUrl) {
	  if (!doneForServerUrl || doneForServerUrl !== serverUrl) {
	    const handler = extensionDriver.getHandler(serverUrl);
	    fakeHttp.setHandler(handler);
	    doneForServerUrl = serverUrl;
	  }
	};


/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Extensions driver executes webdriver http commands using extension debugger API
	 *
	 * See: https://developer.chrome.com/extensions/debugger
	 * See: https://chromedevtools.github.io/debugger-protocol-viewer/
	 * See: https://w3c.github.io/webdriver/webdriver-spec.html#list-of-endpoints
	 */

	const Router = __webpack_require__(296);
	const routes = __webpack_require__(305);
	const Targets = __webpack_require__(290);
	const errors = __webpack_require__(312);

	/**
	 * Main handler
	 *
	 * @param {Object} serverUrl supposed for requests (actually we take only pathname from it)
	 */
	exports.getHandler = function (serverUrl) {
	  const basePath = serverUrl ? new URL(serverUrl).pathname : '/';
	  const router = getRouter(basePath);
	  return function (req) {
	    return Promise.resolve()
	      .then(() => router.handle(req))
	      .then(
	        formatSuccess,
	        formatError
	      );
	  };
	};

	function getRouter(basePath) {
	  const router = new Router(basePath);
	  router.use(bodyParser);
	  routes.forEach(route => router.addRoute(route[0], route[1], route[2]));
	  return router;
	}

	function bodyParser(req) {
	  if (req.body && typeof req.body === 'string') {
	    req.body = JSON.parse(req.body);
	  }
	}

	function formatSuccess(result) {
	  const data = {
	    sessionId: Targets.SESSION_ID,
	    value: result !== undefined ? result : null,
	  };
	  return {
	    statusCode: 200,
	    data: JSON.stringify(data),
	  };
	}

	function formatError(e) {
	  const data = {
	    stacktrace: e.stack,
	    sessionId: Targets.SESSION_ID,
	  };
	  if (e instanceof errors.WebDriverError) {
	    const errorObj = errors.encodeError(e);
	    data.error = errorObj.error;
	    data.message = errorObj.message;
	  } else if (e instanceof Error) {
	    data.error = e.name;
	    data.message = e.message;
	  } else {
	    data.error = 'error';
	    data.message = String(e);
	  }
	  return {
	    statusCode: 500,
	    data: JSON.stringify(data)
	  };
	}


/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Express-like router
	 *
	 * See: http://expressjs.com/en/4x/api.html#router.METHOD
	 */

	const path = __webpack_require__(117);
	const RouteParser = __webpack_require__(297);

	module.exports = class Router {
	  constructor(basePath = '/') {
	    this._basePath = basePath;
	    this._routes = [];
	    this._middleware = [];
	  }
	  handle(req) {
	    for (let route of this._routes) {
	      if (req.method === route.method) {
	        const matched = route.parser.match(req.path);
	        if (matched) {
	          this._applyMiddleware(req);
	          const params = Object.assign({}, matched, req.body);
	          return route.handler(params);
	        }
	      }
	    }
	    throw new Error(`Unsupported route command: ${req.method} ${req.path}`);
	  }
	  use(fn) {
	    this._middleware.push(fn);
	  }
	  get(routePath, handler) {
	    this.addRoute('get', routePath, handler);
	  }
	  post(routePath, handler) {
	    this.addRoute('post', routePath, handler);
	  }
	  put(routePath, handler) {
	    this.addRoute('put', routePath, handler);
	  }
	  del(routePath, handler) {
	    this.addRoute('delete', routePath, handler);
	  }
	  addRoute(method, routePath, handler) {
	    const fullPath = path.join(this._basePath, routePath);
	    this._routes.push({
	      method: method.toUpperCase(),
	      handler,
	      parser: new RouteParser(fullPath),
	    });
	  }
	  _applyMiddleware(req) {
	    this._middleware.forEach(fn => fn(req));
	  }
	};


/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @module Passage
	 */
	'use strict';

	var Route = __webpack_require__(298);


	module.exports = Route;

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	var Parser = __webpack_require__(299),
	    RegexpVisitor = __webpack_require__(302),
	    ReverseVisitor = __webpack_require__(304);

	Route.prototype = Object.create(null)

	/**
	 * Match a path against this route, returning the matched parameters if
	 * it matches, false if not.
	 * @example
	 * var route = new Route('/this/is/my/route')
	 * route.match('/this/is/my/route') // -> {}
	 * @example
	 * var route = new Route('/:one/:two')
	 * route.match('/foo/bar/') // -> {one: 'foo', two: 'bar'}
	 * @param  {string} path the path to match this route against
	 * @return {(Object.<string,string>|false)} A map of the matched route
	 * parameters, or false if matching failed
	 */
	Route.prototype.match = function(path) {
	  var re = RegexpVisitor.visit(this.ast),
	      matched = re.match(path);

	  return matched ? matched : false;

	};

	/**
	 * Reverse a route specification to a path, returning false if it can't be
	 * fulfilled
	 * @example
	 * var route = new Route('/:one/:two')
	 * route.reverse({one: 'foo', two: 'bar'}) -> '/foo/bar'
	 * @param  {Object} params The parameters to fill in
	 * @return {(String|false)} The filled in path
	 */
	Route.prototype.reverse = function(params) {
	  return ReverseVisitor.visit(this.ast, params);
	};

	/**
	 * Represents a route
	 * @example
	 * var route = Route('/:foo/:bar');
	 * @example
	 * var route = Route('/:foo/:bar');
	 * @param {string} spec -  the string specification of the route.
	 *     use :param for single portion captures, *param for splat style captures,
	 *     and () for optional route branches
	 * @constructor
	 */
	function Route(spec) {
	  var route;
	  if (this) {
	    // constructor called with new
	    route = this;
	  } else {
	    // constructor called as a function
	    route = Object.create(Route.prototype);
	  }
	  if( typeof spec === 'undefined' ) {
	    throw new Error('A route spec is required');
	  }
	  route.spec = spec;
	  route.ast = Parser.parse(spec);
	  return route;
	}

	module.exports = Route;

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @module route/parser
	 */
	'use strict';

	/** Wrap the compiled parser with the context to create node objects */
	var parser = __webpack_require__(300).parser;
	parser.yy = __webpack_require__(301);
	module.exports = parser;


/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

	/* parser generated by jison 0.4.17 */
	/*
	  Returns a Parser object of the following structure:

	  Parser: {
	    yy: {}
	  }

	  Parser.prototype: {
	    yy: {},
	    trace: function(),
	    symbols_: {associative list: name ==> number},
	    terminals_: {associative list: number ==> name},
	    productions_: [...],
	    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
	    table: [...],
	    defaultActions: {...},
	    parseError: function(str, hash),
	    parse: function(input),

	    lexer: {
	        EOF: 1,
	        parseError: function(str, hash),
	        setInput: function(input),
	        input: function(),
	        unput: function(str),
	        more: function(),
	        less: function(n),
	        pastInput: function(),
	        upcomingInput: function(),
	        showPosition: function(),
	        test_match: function(regex_match_array, rule_index),
	        next: function(),
	        lex: function(),
	        begin: function(condition),
	        popState: function(),
	        _currentRules: function(),
	        topState: function(),
	        pushState: function(condition),

	        options: {
	            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
	            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
	            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
	        },

	        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
	        rules: [...],
	        conditions: {associative list: name ==> set},
	    }
	  }


	  token location info (@$, _$, etc.): {
	    first_line: n,
	    last_line: n,
	    first_column: n,
	    last_column: n,
	    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
	  }


	  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
	    text:        (matched text)
	    token:       (the produced terminal token, if any)
	    line:        (yylineno)
	  }
	  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
	    loc:         (yylloc)
	    expected:    (string describing the set of expected tokens)
	    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
	  }
	*/
	var parser = (function(){
	var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,9],$V1=[1,10],$V2=[1,11],$V3=[1,12],$V4=[5,11,12,13,14,15];
	var parser = {trace: function trace() { },
	yy: {},
	symbols_: {"error":2,"root":3,"expressions":4,"EOF":5,"expression":6,"optional":7,"literal":8,"splat":9,"param":10,"(":11,")":12,"LITERAL":13,"SPLAT":14,"PARAM":15,"$accept":0,"$end":1},
	terminals_: {2:"error",5:"EOF",11:"(",12:")",13:"LITERAL",14:"SPLAT",15:"PARAM"},
	productions_: [0,[3,2],[3,1],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[7,3],[8,1],[9,1],[10,1]],
	performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
	/* this == yyval */

	var $0 = $$.length - 1;
	switch (yystate) {
	case 1:
	return new yy.Root({},[$$[$0-1]])
	break;
	case 2:
	return new yy.Root({},[new yy.Literal({value: ''})])
	break;
	case 3:
	this.$ = new yy.Concat({},[$$[$0-1],$$[$0]]);
	break;
	case 4: case 5:
	this.$ = $$[$0];
	break;
	case 6:
	this.$ = new yy.Literal({value: $$[$0]});
	break;
	case 7:
	this.$ = new yy.Splat({name: $$[$0]});
	break;
	case 8:
	this.$ = new yy.Param({name: $$[$0]});
	break;
	case 9:
	this.$ = new yy.Optional({},[$$[$0-1]]);
	break;
	case 10:
	this.$ = yytext;
	break;
	case 11: case 12:
	this.$ = yytext.slice(1);
	break;
	}
	},
	table: [{3:1,4:2,5:[1,3],6:4,7:5,8:6,9:7,10:8,11:$V0,13:$V1,14:$V2,15:$V3},{1:[3]},{5:[1,13],6:14,7:5,8:6,9:7,10:8,11:$V0,13:$V1,14:$V2,15:$V3},{1:[2,2]},o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6]),o($V4,[2,7]),o($V4,[2,8]),{4:15,6:4,7:5,8:6,9:7,10:8,11:$V0,13:$V1,14:$V2,15:$V3},o($V4,[2,10]),o($V4,[2,11]),o($V4,[2,12]),{1:[2,1]},o($V4,[2,3]),{6:14,7:5,8:6,9:7,10:8,11:$V0,12:[1,16],13:$V1,14:$V2,15:$V3},o($V4,[2,9])],
	defaultActions: {3:[2,2],13:[2,1]},
	parseError: function parseError(str, hash) {
	    if (hash.recoverable) {
	        this.trace(str);
	    } else {
	        function _parseError (msg, hash) {
	            this.message = msg;
	            this.hash = hash;
	        }
	        _parseError.prototype = Error;

	        throw new _parseError(str, hash);
	    }
	},
	parse: function parse(input) {
	    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
	    var args = lstack.slice.call(arguments, 1);
	    var lexer = Object.create(this.lexer);
	    var sharedState = { yy: {} };
	    for (var k in this.yy) {
	        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
	            sharedState.yy[k] = this.yy[k];
	        }
	    }
	    lexer.setInput(input, sharedState.yy);
	    sharedState.yy.lexer = lexer;
	    sharedState.yy.parser = this;
	    if (typeof lexer.yylloc == 'undefined') {
	        lexer.yylloc = {};
	    }
	    var yyloc = lexer.yylloc;
	    lstack.push(yyloc);
	    var ranges = lexer.options && lexer.options.ranges;
	    if (typeof sharedState.yy.parseError === 'function') {
	        this.parseError = sharedState.yy.parseError;
	    } else {
	        this.parseError = Object.getPrototypeOf(this).parseError;
	    }
	    function popStack(n) {
	        stack.length = stack.length - 2 * n;
	        vstack.length = vstack.length - n;
	        lstack.length = lstack.length - n;
	    }
	    _token_stack:
	        var lex = function () {
	            var token;
	            token = lexer.lex() || EOF;
	            if (typeof token !== 'number') {
	                token = self.symbols_[token] || token;
	            }
	            return token;
	        };
	    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
	    while (true) {
	        state = stack[stack.length - 1];
	        if (this.defaultActions[state]) {
	            action = this.defaultActions[state];
	        } else {
	            if (symbol === null || typeof symbol == 'undefined') {
	                symbol = lex();
	            }
	            action = table[state] && table[state][symbol];
	        }
	                    if (typeof action === 'undefined' || !action.length || !action[0]) {
	                var errStr = '';
	                expected = [];
	                for (p in table[state]) {
	                    if (this.terminals_[p] && p > TERROR) {
	                        expected.push('\'' + this.terminals_[p] + '\'');
	                    }
	                }
	                if (lexer.showPosition) {
	                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
	                } else {
	                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
	                }
	                this.parseError(errStr, {
	                    text: lexer.match,
	                    token: this.terminals_[symbol] || symbol,
	                    line: lexer.yylineno,
	                    loc: yyloc,
	                    expected: expected
	                });
	            }
	        if (action[0] instanceof Array && action.length > 1) {
	            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
	        }
	        switch (action[0]) {
	        case 1:
	            stack.push(symbol);
	            vstack.push(lexer.yytext);
	            lstack.push(lexer.yylloc);
	            stack.push(action[1]);
	            symbol = null;
	            if (!preErrorSymbol) {
	                yyleng = lexer.yyleng;
	                yytext = lexer.yytext;
	                yylineno = lexer.yylineno;
	                yyloc = lexer.yylloc;
	                if (recovering > 0) {
	                    recovering--;
	                }
	            } else {
	                symbol = preErrorSymbol;
	                preErrorSymbol = null;
	            }
	            break;
	        case 2:
	            len = this.productions_[action[1]][1];
	            yyval.$ = vstack[vstack.length - len];
	            yyval._$ = {
	                first_line: lstack[lstack.length - (len || 1)].first_line,
	                last_line: lstack[lstack.length - 1].last_line,
	                first_column: lstack[lstack.length - (len || 1)].first_column,
	                last_column: lstack[lstack.length - 1].last_column
	            };
	            if (ranges) {
	                yyval._$.range = [
	                    lstack[lstack.length - (len || 1)].range[0],
	                    lstack[lstack.length - 1].range[1]
	                ];
	            }
	            r = this.performAction.apply(yyval, [
	                yytext,
	                yyleng,
	                yylineno,
	                sharedState.yy,
	                action[1],
	                vstack,
	                lstack
	            ].concat(args));
	            if (typeof r !== 'undefined') {
	                return r;
	            }
	            if (len) {
	                stack = stack.slice(0, -1 * len * 2);
	                vstack = vstack.slice(0, -1 * len);
	                lstack = lstack.slice(0, -1 * len);
	            }
	            stack.push(this.productions_[action[1]][0]);
	            vstack.push(yyval.$);
	            lstack.push(yyval._$);
	            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
	            stack.push(newState);
	            break;
	        case 3:
	            return true;
	        }
	    }
	    return true;
	}};
	/* generated by jison-lex 0.3.4 */
	var lexer = (function(){
	var lexer = ({

	EOF:1,

	parseError:function parseError(str, hash) {
	        if (this.yy.parser) {
	            this.yy.parser.parseError(str, hash);
	        } else {
	            throw new Error(str);
	        }
	    },

	// resets the lexer, sets new input
	setInput:function (input, yy) {
	        this.yy = yy || this.yy || {};
	        this._input = input;
	        this._more = this._backtrack = this.done = false;
	        this.yylineno = this.yyleng = 0;
	        this.yytext = this.matched = this.match = '';
	        this.conditionStack = ['INITIAL'];
	        this.yylloc = {
	            first_line: 1,
	            first_column: 0,
	            last_line: 1,
	            last_column: 0
	        };
	        if (this.options.ranges) {
	            this.yylloc.range = [0,0];
	        }
	        this.offset = 0;
	        return this;
	    },

	// consumes and returns one char from the input
	input:function () {
	        var ch = this._input[0];
	        this.yytext += ch;
	        this.yyleng++;
	        this.offset++;
	        this.match += ch;
	        this.matched += ch;
	        var lines = ch.match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno++;
	            this.yylloc.last_line++;
	        } else {
	            this.yylloc.last_column++;
	        }
	        if (this.options.ranges) {
	            this.yylloc.range[1]++;
	        }

	        this._input = this._input.slice(1);
	        return ch;
	    },

	// unshifts one char (or a string) into the input
	unput:function (ch) {
	        var len = ch.length;
	        var lines = ch.split(/(?:\r\n?|\n)/g);

	        this._input = ch + this._input;
	        this.yytext = this.yytext.substr(0, this.yytext.length - len);
	        //this.yyleng -= len;
	        this.offset -= len;
	        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
	        this.match = this.match.substr(0, this.match.length - 1);
	        this.matched = this.matched.substr(0, this.matched.length - 1);

	        if (lines.length - 1) {
	            this.yylineno -= lines.length - 1;
	        }
	        var r = this.yylloc.range;

	        this.yylloc = {
	            first_line: this.yylloc.first_line,
	            last_line: this.yylineno + 1,
	            first_column: this.yylloc.first_column,
	            last_column: lines ?
	                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
	                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
	              this.yylloc.first_column - len
	        };

	        if (this.options.ranges) {
	            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
	        }
	        this.yyleng = this.yytext.length;
	        return this;
	    },

	// When called from action, caches matched text and appends it on next action
	more:function () {
	        this._more = true;
	        return this;
	    },

	// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
	reject:function () {
	        if (this.options.backtrack_lexer) {
	            this._backtrack = true;
	        } else {
	            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
	                text: "",
	                token: null,
	                line: this.yylineno
	            });

	        }
	        return this;
	    },

	// retain first n characters of the match
	less:function (n) {
	        this.unput(this.match.slice(n));
	    },

	// displays already matched input, i.e. for error messages
	pastInput:function () {
	        var past = this.matched.substr(0, this.matched.length - this.match.length);
	        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
	    },

	// displays upcoming input, i.e. for error messages
	upcomingInput:function () {
	        var next = this.match;
	        if (next.length < 20) {
	            next += this._input.substr(0, 20-next.length);
	        }
	        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
	    },

	// displays the character position where the lexing error occurred, i.e. for error messages
	showPosition:function () {
	        var pre = this.pastInput();
	        var c = new Array(pre.length + 1).join("-");
	        return pre + this.upcomingInput() + "\n" + c + "^";
	    },

	// test the lexed token: return FALSE when not a match, otherwise return token
	test_match:function (match, indexed_rule) {
	        var token,
	            lines,
	            backup;

	        if (this.options.backtrack_lexer) {
	            // save context
	            backup = {
	                yylineno: this.yylineno,
	                yylloc: {
	                    first_line: this.yylloc.first_line,
	                    last_line: this.last_line,
	                    first_column: this.yylloc.first_column,
	                    last_column: this.yylloc.last_column
	                },
	                yytext: this.yytext,
	                match: this.match,
	                matches: this.matches,
	                matched: this.matched,
	                yyleng: this.yyleng,
	                offset: this.offset,
	                _more: this._more,
	                _input: this._input,
	                yy: this.yy,
	                conditionStack: this.conditionStack.slice(0),
	                done: this.done
	            };
	            if (this.options.ranges) {
	                backup.yylloc.range = this.yylloc.range.slice(0);
	            }
	        }

	        lines = match[0].match(/(?:\r\n?|\n).*/g);
	        if (lines) {
	            this.yylineno += lines.length;
	        }
	        this.yylloc = {
	            first_line: this.yylloc.last_line,
	            last_line: this.yylineno + 1,
	            first_column: this.yylloc.last_column,
	            last_column: lines ?
	                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
	                         this.yylloc.last_column + match[0].length
	        };
	        this.yytext += match[0];
	        this.match += match[0];
	        this.matches = match;
	        this.yyleng = this.yytext.length;
	        if (this.options.ranges) {
	            this.yylloc.range = [this.offset, this.offset += this.yyleng];
	        }
	        this._more = false;
	        this._backtrack = false;
	        this._input = this._input.slice(match[0].length);
	        this.matched += match[0];
	        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
	        if (this.done && this._input) {
	            this.done = false;
	        }
	        if (token) {
	            return token;
	        } else if (this._backtrack) {
	            // recover context
	            for (var k in backup) {
	                this[k] = backup[k];
	            }
	            return false; // rule action called reject() implying the next rule should be tested instead.
	        }
	        return false;
	    },

	// return next match in input
	next:function () {
	        if (this.done) {
	            return this.EOF;
	        }
	        if (!this._input) {
	            this.done = true;
	        }

	        var token,
	            match,
	            tempMatch,
	            index;
	        if (!this._more) {
	            this.yytext = '';
	            this.match = '';
	        }
	        var rules = this._currentRules();
	        for (var i = 0; i < rules.length; i++) {
	            tempMatch = this._input.match(this.rules[rules[i]]);
	            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
	                match = tempMatch;
	                index = i;
	                if (this.options.backtrack_lexer) {
	                    token = this.test_match(tempMatch, rules[i]);
	                    if (token !== false) {
	                        return token;
	                    } else if (this._backtrack) {
	                        match = false;
	                        continue; // rule action called reject() implying a rule MISmatch.
	                    } else {
	                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	                        return false;
	                    }
	                } else if (!this.options.flex) {
	                    break;
	                }
	            }
	        }
	        if (match) {
	            token = this.test_match(match, rules[index]);
	            if (token !== false) {
	                return token;
	            }
	            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
	            return false;
	        }
	        if (this._input === "") {
	            return this.EOF;
	        } else {
	            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
	                text: "",
	                token: null,
	                line: this.yylineno
	            });
	        }
	    },

	// return next match that has a token
	lex:function lex() {
	        var r = this.next();
	        if (r) {
	            return r;
	        } else {
	            return this.lex();
	        }
	    },

	// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
	begin:function begin(condition) {
	        this.conditionStack.push(condition);
	    },

	// pop the previously active lexer condition state off the condition stack
	popState:function popState() {
	        var n = this.conditionStack.length - 1;
	        if (n > 0) {
	            return this.conditionStack.pop();
	        } else {
	            return this.conditionStack[0];
	        }
	    },

	// produce the lexer rule set which is active for the currently active lexer condition state
	_currentRules:function _currentRules() {
	        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
	            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
	        } else {
	            return this.conditions["INITIAL"].rules;
	        }
	    },

	// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
	topState:function topState(n) {
	        n = this.conditionStack.length - 1 - Math.abs(n || 0);
	        if (n >= 0) {
	            return this.conditionStack[n];
	        } else {
	            return "INITIAL";
	        }
	    },

	// alias for begin(condition)
	pushState:function pushState(condition) {
	        this.begin(condition);
	    },

	// return the number of states currently on the stack
	stateStackSize:function stateStackSize() {
	        return this.conditionStack.length;
	    },
	options: {},
	performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
	var YYSTATE=YY_START;
	switch($avoiding_name_collisions) {
	case 0:return "(";
	break;
	case 1:return ")";
	break;
	case 2:return "SPLAT";
	break;
	case 3:return "PARAM";
	break;
	case 4:return "LITERAL";
	break;
	case 5:return "LITERAL";
	break;
	case 6:return "EOF";
	break;
	}
	},
	rules: [/^(?:\()/,/^(?:\))/,/^(?:\*+\w+)/,/^(?::+\w+)/,/^(?:[\w%\-~\n]+)/,/^(?:.)/,/^(?:$)/],
	conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6],"inclusive":true}}
	});
	return lexer;
	})();
	parser.lexer = lexer;
	function Parser () {
	  this.yy = {};
	}
	Parser.prototype = parser;parser.Parser = Parser;
	return new Parser;
	})();


	if (true) {
	exports.parser = parser;
	exports.Parser = parser.Parser;
	exports.parse = function () { return parser.parse.apply(parser, arguments); };
	}

/***/ }),
/* 301 */
/***/ (function(module, exports) {

	'use strict';
	/** @module route/nodes */


	/**
	 * Create a node for use with the parser, giving it a constructor that takes
	 * props, children, and returns an object with props, children, and a
	 * displayName.
	 * @param  {String} displayName The display name for the node
	 * @return {{displayName: string, props: Object, children: Array}}
	 */
	function createNode(displayName) {
	  return function(props, children) {
	    return {
	      displayName: displayName,
	      props: props,
	      children: children || []
	    };
	  };
	}

	module.exports = {
	  Root: createNode('Root'),
	  Concat: createNode('Concat'),
	  Literal: createNode('Literal'),
	  Splat: createNode('Splat'),
	  Param: createNode('Param'),
	  Optional: createNode('Optional')
	};


/***/ }),
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createVisitor  = __webpack_require__(303),
	    escapeRegExp = /[\-{}\[\]+?.,\\\^$|#\s]/g;

	/**
	 * @class
	 * @private
	 */
	function Matcher(options) {
	  this.captures = options.captures;
	  this.re = options.re;
	}

	/**
	 * Try matching a path against the generated regular expression
	 * @param  {String} path The path to try to match
	 * @return {Object|false}      matched parameters or false
	 */
	Matcher.prototype.match = function (path) {
	  var match = this.re.exec(path),
	      matchParams = {};

	  if( !match ) {
	    return;
	  }

	  this.captures.forEach( function(capture, i) {
	    if( typeof match[i+1] === 'undefined' ) {
	      matchParams[capture] = undefined;
	    }
	    else {
	      matchParams[capture] = decodeURIComponent(match[i+1]);
	    }
	  });

	  return matchParams;
	};

	/**
	 * Visitor for the AST to create a regular expression matcher
	 * @class RegexpVisitor
	 * @borrows Visitor-visit
	 */
	var RegexpVisitor = createVisitor({
	  'Concat': function(node) {
	    return node.children
	      .reduce(
	        function(memo, child) {
	          var childResult = this.visit(child);
	          return {
	            re: memo.re + childResult.re,
	            captures: memo.captures.concat(childResult.captures)
	          };
	        }.bind(this),
	        {re: '', captures: []}
	      );
	  },
	  'Literal': function(node) {
	    return {
	      re: node.props.value.replace(escapeRegExp, '\\$&'),
	      captures: []
	    };
	  },

	  'Splat': function(node) {
	    return {
	      re: '([^?]*?)',
	      captures: [node.props.name]
	    };
	  },

	  'Param': function(node) {
	    return {
	      re: '([^\\/\\?]+)',
	      captures: [node.props.name]
	    };
	  },

	  'Optional': function(node) {
	    var child = this.visit(node.children[0]);
	    return {
	      re: '(?:' + child.re + ')?',
	      captures: child.captures
	    };
	  },

	  'Root': function(node) {
	    var childResult = this.visit(node.children[0]);
	    return new Matcher({
	      re: new RegExp('^' + childResult.re + '(?=\\?|$)' ),
	      captures: childResult.captures
	    });
	  }
	});

	module.exports = RegexpVisitor;

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	/**
	 * @module route/visitors/create_visitor
	 */

	var nodeTypes = Object.keys(__webpack_require__(301));

	/**
	 * Helper for creating visitors. Take an object of node name to handler
	 * mappings, returns an object with a "visit" method that can be called
	 * @param  {Object.<string,function(node,context)>} handlers A mapping of node
	 * type to visitor functions
	 * @return {{visit: function(node,context)}}  A visitor object with a "visit"
	 * method that can be called on a node with a context
	 */
	function createVisitor(handlers) {
	  nodeTypes.forEach(function(nodeType) {
	    if( typeof handlers[nodeType] === 'undefined') {
	      throw new Error('No handler defined for ' + nodeType.displayName);
	    }

	  });

	  return {
	    /**
	     * Call the given handler for this node type
	     * @param  {Object} node    the AST node
	     * @param  {Object} context context to pass through to handlers
	     * @return {Object}
	     */
	    visit: function(node, context) {
	      return this.handlers[node.displayName].call(this,node, context);
	    },
	    handlers: handlers
	  };
	}

	module.exports = createVisitor;

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var createVisitor  = __webpack_require__(303);

	/**
	 * Visitor for the AST to construct a path with filled in parameters
	 * @class ReverseVisitor
	 * @borrows Visitor-visit
	 */
	var ReverseVisitor = createVisitor({
	  'Concat': function(node, context) {
	    var childResults =  node.children
	      .map( function(child) {
	        return this.visit(child,context);
	      }.bind(this));

	    if( childResults.some(function(c) { return c === false; }) ) {
	      return false;
	    }
	    else {
	      return childResults.join('');
	    }
	  },

	  'Literal': function(node) {
	    return decodeURI(node.props.value);
	  },

	  'Splat': function(node, context) {
	    if( context[node.props.name] ) {
	      return context[node.props.name];
	    }
	    else {
	      return false;
	    }
	  },

	  'Param': function(node, context) {
	    if( context[node.props.name] ) {
	      return context[node.props.name];
	    }
	    else {
	      return false;
	    }
	  },

	  'Optional': function(node, context) {
	    var childResult = this.visit(node.children[0], context);
	    if( childResult ) {
	      return childResult;
	    }
	    else {
	      return '';
	    }
	  },

	  'Root': function(node, context) {
	    context = context || {};
	    var childResult = this.visit(node.children[0], context);
	    if( !childResult ) {
	      return false;
	    }
	    return encodeURI(childResult);
	  }
	});

	module.exports = ReverseVisitor;

/***/ }),
/* 305 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Map of available routes (endpoints) to commands
	 *
	 * See: https://w3c.github.io/webdriver/webdriver-spec.html#list-of-endpoints
	 */

	const session = __webpack_require__(306);
	const switchTo = __webpack_require__(307);
	const windowCommand = __webpack_require__(308);
	const navigation = __webpack_require__(309);
	const mouse = __webpack_require__(316);
	const keyboard = __webpack_require__(319);
	const elementSearch = __webpack_require__(321);
	const element = __webpack_require__(322);
	const evaluate = __webpack_require__(310);
	const timeouts = __webpack_require__(323);
	const requests = __webpack_require__(324);
	const dialog = __webpack_require__(329);

	// lodash added for equal length to visually indent
	const GET_ = 'get';
	const POST = 'post';
	const PUT_ = 'put';
	const DEL_ = 'delete';

	module.exports = [
	  [POST, '/session', session.newSession],
	  [DEL_, '/session/:sessionId', session.deleteSession],
	  [POST, '/session/:sessionId/url', navigation.go],
	  [GET_, '/session/:sessionId/url', navigation.getCurrentUrl],
	  [GET_, '/session/:sessionId/title', navigation.getTitle],

	  [POST, '/session/:sessionId/element', elementSearch.findElement],
	  [POST, '/session/:sessionId/elements', elementSearch.findElements],
	  [POST, '/session/:sessionId/element/:id/value', keyboard.sendKeysToElement],
	  [GET_, '/session/:sessionId/element/:id/name', element.getElementTagName],
	  [GET_, '/session/:sessionId/element/:id/text', element.getElementText],
	  // actually these commands are performed via execute atom script
	  // see: https://github.com/SeleniumHQ/selenium/blob/master/javascript/node/selenium-webdriver/lib/http.js#L39
	  //[GET_, '/session/:sessionId/element/:id/attribute/:name', element.getAttribute],
	  //[GET_, '/session/:sessionId/element/:id/displayed', element.isDisplayed],
	  [POST, '/session/:sessionId/element/:id/click', mouse.clickElement],
	  [POST, '/session/:sessionId/element/:id/submit', element.submit],
	  [GET_, '/session/:sessionId/element/:id/enabled', element.isEnabled],
	  [POST, '/session/:sessionId/element/:id/element', elementSearch.findChildElement],
	  [POST, '/session/:sessionId/element/:id/elements', elementSearch.findChildElements],

	  [POST, '/session/:sessionId/execute', evaluate.execute],
	  [POST, '/session/:sessionId/execute_async', evaluate.executeAsync],
	  [POST, '/session/:sessionId/timeouts', timeouts.setTimeout],

	  [DEL_, '/session/:sessionId/window', windowCommand.close],
	  [POST, '/session/:sessionId/window', switchTo.window],
	  [GET_, '/session/:sessionId/window_handle', windowCommand.getCurrentWindowHandle],
	  [GET_, '/session/:sessionId/window_handles', windowCommand.getAllWindowHandles],

	  // todo: this seems to be obsolete routes, current spec is /alert/*
	  [GET_, '/session/:sessionId/alert_text', dialog.getText],
	  // [POST, '/session/:sessionId/alert_text', dialog.setText],
	  [POST, '/session/:sessionId/accept_alert', dialog.accept],
	  [POST, '/session/:sessionId/dismiss_alert', dialog.dismiss],

	  // extra autotester routes: live over `autotester` vendor prefix
	  [POST, '/session/:sessionId/autotester/newtab', switchTo.newTab],
	  [POST, '/session/:sessionId/autotester/extension', switchTo.extension],

	  [PUT_, '/session/:session/autotester/requests', requests.collect],
	  [DEL_, '/session/:session/autotester/requests', requests.stop],
	  [POST, '/session/:session/autotester/requests', requests.get],
	];


/***/ }),
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Session commands
	 */

	const Targets = __webpack_require__(290);
	const switchTo = __webpack_require__(307);

	exports.newSession = function () {
	  return Promise.resolve()
	    .then(() => Targets.reset())
	    .then(() => switchTo.newTab())
	    .then(() => {});
	};

	exports.deleteSession = function () {
	  return Targets.quit();
	};


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands for switching between windows (tabs).
	 * For selenium window === tab.
	 */

	const TabLoader = __webpack_require__(293);
	const Targets = __webpack_require__(290);

	// initial url when opening new tab
	const INITIAL_URL = 'about:blank';

	/**
	 * Switch to window, tab or extension background page
	 *
	 * @param {Object} params
	 * @param {String} params.name
	 */
	exports.window = function (params) {
	  return Targets.switchByHandle(params.name);
	};

	/**
	 * Switch new tab
	 *
	 * @param {Object} params
	 * @param {String} params.url
	 * @returns {Promise}
	 */
	exports.newTab = function (params = {}) {
	  return Promise.resolve()
	    .then(() => TabLoader.create({url: params.url || INITIAL_URL}))
	    .then(tab => Targets.switchByTabId(tab.id));
	};

	/**
	 * Switch extension with specified id or first found extension if id is empty
	 *
	 * @param {Object} params
	 * @param {String} [params.id]
	 * @returns {Promise}
	 */
	exports.extension = function (params = {}) {
	  return Targets.switchByExtensionId(params.id);
	};


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands to get info and manipulate window(s) and tabs(s)
	 * For selenium window === tab.
	 */

	const Targets = __webpack_require__(290);

	exports.getCurrentWindowHandle = function () {
	  return Promise.resolve(Targets.handle);
	};

	exports.getAllWindowHandles = function () {
	  return Promise.resolve()
	    .then(() => Targets.getAllTargets())
	    .then(targets => targets.map(target => target.handle));
	};

	/**
	 * Close current window
	 *
	 */
	exports.close = function () {
	  return Promise.resolve()
	    .then(() => Targets.getAllTargets())
	    .then(targets => targets.map(target => target.handle));
	};


/***/ }),
/* 309 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands to manipulate page navigation
	 */

	const TabLoader = __webpack_require__(293);
	const Targets = __webpack_require__(290);
	const evaluate = __webpack_require__(310);

	exports.go = function (params) {
	  return TabLoader.update(Targets.tabId, {url: params.url}).then(() => {});
	};

	exports.getTitle = function () {
	  return evaluate.execute({
	    script: 'return document.title',
	    args: [],
	  });
	};

	exports.getCurrentUrl = function () {
	  return evaluate.execute({
	    script: 'return document.URL',
	    args: [],
	  });
	};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands for executing script
	 */

	const helper = __webpack_require__(311);
	const RemoteObject = __webpack_require__(313);
	const prepareArgs = __webpack_require__(314);
	const prepareScript = __webpack_require__(315);

	/**
	 * Executes sync script
	 *
	 * @param {Object} params
	 * @param {String} params.script
	 * @param {Array} params.args
	 */
	exports.execute = function (params) {
	  return execute(params.script, params.args)
	    .then(
	      handleSuccess,
	      handleError
	    );
	};

	/**
	 * Executes async script
	 *
	 * @param {Object} params
	 * @param {String} params.script
	 * @param {Array} params.args
	 */
	exports.executeAsync = function (params) {
	  return execute(params.script, params.args, true)
	    .then(
	      handleSuccess,
	      handleError
	    );
	    // .then(result => {
	    //   return remotePromise.wait(result.objectId)
	    //     .then(
	    //       handleSuccess,
	    //       handleError
	    //     );
	    // })
	};

	/**
	 * Helper object
	 */
	exports.helper = helper;

	/**
	 * Common execute part for sync and async evaluates
	 * When where are no arguments it's cheaper to call `evaluate` instead of `callFunctionOn`
	 *
	 * @param {String} script
	 * @param {Array} args
	 * @param {Boolean} isAsync
	 * @returns {Promise}
	 */
	function execute(script, args, isAsync) {
	  return Promise.resolve()
	    .then(() => prepareArgs(args))
	    .then(args => {
	      let wrappedScript = isAsync ? prepareScript.asPromise(script) : script;
	      if (args.length) {
	        const fnBody = prepareScript.asFunction(wrappedScript);
	        return helper.callFunctionOn(fnBody, args, isAsync)
	      } else {
	        const expression = prepareScript.asSelfCallFunction(wrappedScript);
	        return helper.evaluate(expression, isAsync);
	      }
	    })
	}

	function handleSuccess(result) {
	  return new RemoteObject(result).value();
	}

	function handleError(err) {
	  // if error came as remoteObject --> resolve it first
	  if (err.objectId) {
	    return Promise.resolve()
	      .then(() => new RemoteObject(err).value())
	      .then(value => Promise.reject(value))
	  } else {
	    return Promise.reject(err);
	  }
	}


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Helper functions
	 */

	const WebElement = __webpack_require__(101).WebElement;
	const errors = __webpack_require__(312);
	const Targets = __webpack_require__(290);

	/**
	 * Evaluate expression in current target
	 *
	 * @param {String} expression
	 * @param {Boolean} [isAsync=false]
	 * @returns {Promise}
	 */
	exports.evaluate = function (expression, isAsync = false) {
	  return Promise.resolve()
	    .then(() => Targets.ensureComplete())
	    .then(() => {
	      return Targets.debugger.sendCommand('Runtime.evaluate', {
	        expression: expression,
	        returnByValue: false,
	        awaitPromise: isAsync,
	      });
	    })
	    .then(res => {
	      checkThrownError(res);
	      return res.result;
	    });
	};

	/**
	 * This method is preferred over 'evaluate' as it allows to pass arguments as RemoteObjectId
	 * that will be converted to js objects when function called.
	 * But this method requires objectId even if we want to call function on 'window',
	 * so we need to get 'window' as RemoteObjectId every time.
	 *
	 * @param {String} fnBody
	 * @param {Array} args
	 * @param {Boolean} [isAsync=false]
	 * @returns {*}
	 */
	exports.callFunctionOn = function (fnBody, args, isAsync = false) {
	  return Promise.resolve()
	    .then(() => Targets.ensureComplete())
	    .then(() => exports.evaluate('window'))
	    .then(result => {
	      return Targets.debugger.sendCommand('Runtime.callFunctionOn', {
	        objectId: result.objectId,
	        functionDeclaration: fnBody,
	        arguments: args,
	        returnByValue: false,
	        awaitPromise: isAsync,
	      })
	    })
	    .then(res => {
	      checkThrownError(res);
	      return res.result;
	    });
	};

	exports.getOwnProperties = function (objectId) {
	  return Targets.debugger.sendCommand('Runtime.getProperties', {
	    objectId: objectId,
	    ownProperties: true,
	  })
	    .then(res => res.result);
	};

	exports.getInternalProperties = function (objectId) {
	  return Targets.debugger.sendCommand('Runtime.getProperties', {
	    objectId: objectId,
	    ownProperties: true,
	  })
	    .then(res => res.internalProperties)
	};

	exports.getWebElement = function (objectId) {
	  // todo: yet not clear why we need getDocument before each request node
	  return Targets.debugger.sendCommand('DOM.getDocument', {})
	    .then(() => Targets.debugger.sendCommand('DOM.requestNode', {
	      objectId: objectId,
	    }))
	    .then(res => WebElement.buildId(String(res.nodeId)));
	};

	/**
	 * Resolves nodeId of WebElement to ObjectId
	 * @param {String} id
	 */
	exports.resolveNode = function (id) {
	  return Targets.debugger.sendCommand('DOM.resolveNode', {
	      nodeId: Number(id)
	    })
	    .then(res => res.object.objectId);
	};

	// todo: move to common utils
	exports.wait = function (ms) {
	  return new Promise(resolve => setTimeout(resolve, ms));
	};

	/**
	 * Creates error meaning error in executed javascript
	 * @param {String} message
	 */
	exports.createError = function (message) {
	  return new errors.JavascriptError(message);
	};

	function checkThrownError(res) {
	  if (res && res.exceptionDetails) {
	    throw exports.createError(res.result.description || res.exceptionDetails.text);
	  }
	}


/***/ }),
/* 312 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Webdriver error is one of errors listed here:
	 * https://w3c.github.io/webdriver/webdriver-spec.html#handling-errors
	 */

	// todo: add httpStatus (currently send 500 for all, but it works)

	module.exports = __webpack_require__(38);


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Wrapper around debugger RemoteObject result
	 * Resolves useful value instead of entries like {"injectedScriptId":2,"id":1}
	 */

	const helper = __webpack_require__(311);

	class RemoteObject {
	  constructor(data) {
	    this._data = data;
	  }

	  /**
	   * Resolves remote object into actual value
	   *
	   * @returns {*|Promise}
	   */
	  value() {
	    return this._resolveByType();
	  }
	  _resolveByType() {
	    switch (this._data.type) {
	      case 'object':
	        return this._resolveBySubtype();
	      case 'function':
	        return this._data.description;
	      case 'undefined':
	        return null;
	      case 'string':
	      case 'number':
	      case 'boolean':
	      default:
	        return this._data.value;
	    }
	  }
	  _resolveBySubtype() {
	    switch (this._data.subtype) {
	      case 'array':
	        return this._resolveArray();
	      case 'null':
	        return null;
	      case 'node':
	        return this._resolveNode();
	      case 'regexp':
	        return this._resolveRegexp();
	      case 'date':
	        return this._resolveDate();
	      case 'error':
	        return helper.createError(this._data.description);
	      default:
	        return this._resolvePlainObject();
	    }
	  }
	  _resolveArray() {
	    return helper.getOwnProperties(this._data.objectId)
	      .then(props => {
	        const tasks = props
	          // keep only props that are indexes
	          .filter(prop => !Number.isNaN(Number(prop.name)))
	          .map(prop => new RemoteObject(prop.value).value());
	        return Promise.all(tasks);
	      });
	  }
	  _resolveNode() {
	    return helper.getWebElement(this._data.objectId);
	  }
	  _resolveRegexp() {
	    throw new Error('_resolveRegexp not implemented yet');
	  }
	  _resolveDate() {
	    throw new Error('_resolveDate not implemented yet');
	  }
	  _resolvePlainObject() {
	    return helper.getOwnProperties(this._data.objectId)
	      .then(props => {
	        const tasks = props
	          // keep only props that are enumerable (Object.keys())
	          .filter(prop => prop.enumerable)
	          .map(prop => new RemoteObject(prop.value).value());
	        return Promise.all(tasks)
	          .then(results => {
	            return props.reduce((out, prop, index) => {
	              out[prop.name] = results[index];
	              return out;
	            }, {});
	          })
	      });
	  }
	}

	module.exports = RemoteObject;


/***/ }),
/* 314 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Prepare arguments to be passed into `Runtime.callFunctionOn`:
	 * - convert objects and WebElements to {objectId: <objectId>};
	 * - convert primitives to {value: <value>}
	 */

	const WebElement = __webpack_require__(101).WebElement;
	const helper = __webpack_require__(311);

	module.exports = function (args) {
	  const tasks = args.map(arg => {
	    if (WebElement.isId(arg)) {
	      return processWebElement(arg);
	    } else if (typeof arg === 'object' && arg !== null) {
	      return processObject(arg);
	    } else {
	      return processPrimitive(arg);
	    }
	  });
	  return Promise.all(tasks);
	};

	function processWebElement(arg) {
	  const nodeId = WebElement.extractId(arg);
	  return helper.resolveNode(nodeId)
	    .then(objectId => {
	      return {objectId};
	    });
	}

	function processObject(arg) {
	  const strArg = JSON.stringify(arg);
	  const expression = `(function() { return ${strArg} })()`;
	  return helper.evaluate(expression)
	    .then(result => {
	      return {objectId: result.objectId};
	    });
	}

	function processPrimitive(arg) {
	  return {value: arg};
	}


/***/ }),
/* 315 */
/***/ (function(module, exports) {

	/**
	 * Prepare script for evaluation
	 */

	exports.asFunction = function (code) {
	  // for some reason callFunctionOn converts {value: null} to undefined
	  // todo: create issue
	  // todo: remember arguments that are really null and transform only them,
	  // todo: as in current case real undefined will be also converted to null
	  return `function() {
	    for (let i=0; i<arguments.length; i++) {
	      if (arguments[i] === undefined) {
	        arguments[i] = null;
	      }
	    }
	    ${code}
	  }`;
	};

	exports.asPromise = function (code) {
	  // add `resolve` as last argument
	  return `
	    return new Promise(callback => {
	      [].push.call(arguments, callback);
	      ${code}
	    });`;
	};

	exports.asSelfCallFunction = function (code) {
	  return `(function() {
	    ${code}
	  }())`;
	};


/***/ }),
/* 316 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Mouse commands
	 * All coordinates are relative to scrolled position (viewport).
	 * If coordinates are out of viewport - events will not be dispatched.
	 */

	const input = __webpack_require__(103);
	const Targets = __webpack_require__(290);
	const modifiers = __webpack_require__(317);

	// map selenium buttons to debugger buttons
	const BUTTONS = {
	  [input.Button.LEFT]: 'left',
	  [input.Button.MIDDLE]: 'middle',
	  [input.Button.RIGHT]: 'right',
	};

	// store last moveTo coords as selenium does not send it in 'click' command
	const lastMoveTo = {
	  x: 0,
	  y: 0,
	};

	const highlight = false;

	exports.clickElement = function (params) {
	  return Promise.resolve()
	     // .then(() => getScrollXY())
	    // temp: scroll to top for correct coords
	    // todo: scroll to element in center layout
	    // todo: check element is visible!
	    // see also: getNodeForLocation
	    .then(() => scrollToXY(0, 0))
	    .then(() => getElementCenter(params.id))
	    .then(center => scrollToXY(center.x, center.y))
	    .then(() => getElementCenter(params.id))
	    //.then(() => new Promise(r => setTimeout(r, 1000)))
	    .then(center => {
	      return Promise.resolve()
	        .then(() => moveAndClickXY(center.x, center.y))
	        .then(() => highlight ? highlightClick(center.x, center.y) : null)
	    });
	};

	/**
	 * Click particular button on current location
	 *
	 * @param {Object} params
	 * @param {Number} params.button
	 * @returns {Promise}
	 */
	exports.click = function (params) {
	  const button = BUTTONS[params.button];
	  return clickXY(lastMoveTo.x, lastMoveTo.y, button);
	};

	exports.doubleClick = function (params) {
	  const button = BUTTONS[params.button];
	  return clickXY(lastMoveTo.x, lastMoveTo.y, button, 2);
	};

	exports.moveTo = function (params) {
	  // todo: opt_offset
	  const position =  params.element
	    ? getElementCenter(params.element)
	    : Promise.resolve({x: params.x, y: params.y});
	  return position
	    .then(p => moveToXY(p.x, p.y));
	};

	// todo: Point class

	function clickXY(x, y, button = 'left', count = 1) {
	  return Promise.resolve()
	    .then(() => buttonAction(x, y, 'mousePressed', button, count))
	    .then(() => buttonAction(x, y, 'mouseReleased', button, count));
	}

	function moveToXY(x, y) {
	  return dispatchMouseEvent({
	    button: 'none',
	    clickCount: 0,
	    type: 'mouseMoved',
	    x: x,
	    y: y
	  })
	  .then(() => Object.assign(lastMoveTo, {x, y}));
	}

	function moveAndClickXY(x, y) {
	  return Promise.resolve()
	    .then(() => moveToXY(x, y))
	    .then(() => clickXY(x, y));
	}

	function buttonAction(x, y, type, button, count) {
	  return dispatchMouseEvent({
	    button: button,
	    clickCount: count,
	    type: type,
	    x: x,
	    y: y
	  });
	}

	function dispatchMouseEvent(options) {
	  options.modifiers = modifiers.get();
	  return Targets.debugger.sendCommand('Input.dispatchMouseEvent', options);
	}

	function getElementCenter(id) {
	  return Targets.debugger.sendCommand('DOM.getBoxModel', {
	      nodeId: Number(id)
	    })
	    .then(res => getQuadCenter(res.model.content));
	}

	function getQuadCenter(quad) {
	  return {
	    x: quad[0] + Math.round((quad[2] - quad[0]) / 2),
	    y: quad[3] + Math.round((quad[5] - quad[3]) / 2),
	  };
	}

	// function to scroll
	// temp as it can be used in several other commands
	function scrollToXY(x, y) {
	  return Targets.debugger.sendCommand('Runtime.evaluate', {
	    expression: `window.scrollTo(${x}, ${y})`
	  });
	}

	function highlightXY(x, y, frame) {
	  const size = Math.round(5 + 50 * frame);
	  return Targets.debugger.sendCommand('DOM.highlightRect', {
	    x: x - Math.round(size / 2),
	    y: y - Math.round(size / 2),
	    width: size,
	    height: size,
	    color: {r: Math.round(255 * (1 - frame)), g: 0, b: 0, a: 1 - frame}
	  });
	}


	function highlightClick(x, y) {
	  const duration = 500;
	  const interval = 40; // 25 frames per second
	  const framesCount = Math.ceil(duration / interval);
	  const frames = [];
	  for (let i = 0; i <= framesCount; i++) {
	    frames.push(i / framesCount);
	  }
	  return frames.reduce((res, frame) => {
	    return res
	      .then(() => highlightXY(x, y, frame))
	      .then(() => new Promise(resolve => setTimeout(resolve, interval)))
	  }, Promise.resolve());

	}
	//
	// function getScrollXY() {
	//   return Targets.debugger.sendCommand('Runtime.evaluate', {
	//     // expression: `(function() {return {y: window.scrollY}}())`
	//     expression: `window.scrollY`
	//   });
	// }



/***/ }),
/* 317 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Manage modifiers state (Alt, Ctrl, Shift, Command/Meta).
	 * State is shared between all windows
	 */

	const Key = __webpack_require__(103).Key;
	const dispatcher = __webpack_require__(318);

	// modifiers info
	const MODIFIERS = {
	  [Key.ALT]: {debuggerValue: 1, keyCode: 18},
	  [Key.CONTROL]: {debuggerValue: 2, keyCode: 17},
	  [Key.SHIFT]: {debuggerValue: 8, keyCode: 16},
	  [Key.COMMAND]: {debuggerValue: 4, keyCode: 91},
	};

	// current state of modifiers
	const state = {
	  [Key.ALT]: false,
	  [Key.CONTROL]: false,
	  [Key.SHIFT]: false,
	  [Key.COMMAND]: false,
	};

	/**
	 * Is passed char modifier
	 *
	 * @param {String} char
	 * @returns {Boolean}
	 */
	exports.isModifier = function (char) {
	  return MODIFIERS.hasOwnProperty(char);
	};

	/**
	 * Toggles modifier
	 *
	 * @param {String} char
	 * @returns {Promise}
	 */
	exports.toggle = function (char) {
	  const modifier = MODIFIERS[char];
	  const isReleasing = state[char];
	  state[char] = !state[char];
	  return isReleasing
	    ? dispatcher.dispatchKeyUp(modifier.keyCode, exports.get())
	    : dispatcher.dispatchKeyDown(modifier.keyCode, exports.get());
	};

	/**
	 * Release all needed modifiers by sending 'keyUp'
	 */
	exports.release = function () {
	  const tasks = Object.keys(MODIFIERS)
	    .filter(char => state[char])
	    .map(char => exports.toggle(char));
	  return Promise.all(tasks);
	};

	/**
	 * Special selemium char to release modifiers
	 *
	 * @param {String} char
	 * @returns {Boolean}
	 */
	exports.isReleaseChar = function (char) {
	  return char === Key.NULL;
	};

	/**
	 * Returns current modifiers bit sum for debugger 'dispatchKeyEvent' command
	 * See: https://chromedevtools.github.io/debugger-protocol-viewer/tot/Input/
	 *
	 * @returns {Number}
	 */
	exports.get = function () {
	  return Object.keys(MODIFIERS).reduce((res, char) => {
	    return state[char] ? res + MODIFIERS[char].debuggerValue : res;
	  }, 0);
	};

	/**
	 * If shift pressed now
	 * @returns {Boolean}
	 */
	exports.hasShift = function () {
	  return state[Key.SHIFT];
	};

	/**
	 * Dispatch shift event without saving to state
	 * @param {String} phase keydown|keyup
	 */
	exports.dispatchShift = function (phase) {
	  const modifier = MODIFIERS[Key.SHIFT];
	  return phase === 'keyup'
	    ? dispatcher.dispatchKeyUp(modifier.keyCode, exports.get())
	    : dispatcher.dispatchKeyDown(modifier.keyCode, exports.get());
	};


/***/ }),
/* 318 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Helper to dispatch keyboard commands
	 */

	const Targets = __webpack_require__(290);

	exports.dispatchChar = function (char, modifiers = 0) {
	  return dispatchKeyEvent({
	    modifiers: modifiers,
	    nativeVirtualKeyCode: 0,
	    text: char,
	    type: 'char',
	    unmodifiedText: char,
	    windowsVirtualKeyCode: 0
	  });
	};

	exports.dispatchKeyDown = function (keyCode, modifiers = 0) {
	  return dispatchKeyEvent({
	    modifiers: modifiers,
	    nativeVirtualKeyCode: keyCode,
	    text: '',
	    type: 'rawKeyDown',
	    unmodifiedText: '',
	    windowsVirtualKeyCode: keyCode
	  });
	};

	exports.dispatchKeyUp = function (keyCode, modifiers = 0) {
	  return dispatchKeyEvent({
	    modifiers: modifiers,
	    nativeVirtualKeyCode: keyCode,
	    text: '',
	    type: 'keyUp',
	    unmodifiedText: '',
	    windowsVirtualKeyCode: keyCode
	  });
	};

	function dispatchKeyEvent(options) {
	  return Targets.debugger.sendCommand('Input.dispatchKeyEvent', options);
	}


/***/ }),
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Keyboard commands
	 */

	const Targets = __webpack_require__(290);
	const modifiers = __webpack_require__(317);
	const dispatcher = __webpack_require__(318);

	// temp solution to support enter
	const keycodes = __webpack_require__(320);
	const Key = __webpack_require__(103).Key;

	/**
	 * @param {Object} params
	 * @param {String} params.id
	 * @param {Array} params.value
	 */
	exports.sendKeysToElement = function (params) {
	  // todo: scroll
	  return Promise.resolve()
	    .then(() => {
	      // try to set focus if possible
	      return focus(params.id)
	        .catch(e => e.message.indexOf('Element is not focusable') ? null : Promise.reject(e))
	    })
	    .then(() => exports.sendKeysToActiveElement(params))
	    .then(() => modifiers.release());
	};

	/**
	 * @param {Object} params
	 * @param {Array} params.value
	 */
	exports.sendKeysToActiveElement = function (params) {
	  return params.value.reduce((res, char) => res.then(() => sendKey(char)), Promise.resolve());
	};

	function sendKey(char) {
	  if (modifiers.isModifier(char)) {
	    return modifiers.toggle(char);
	  }

	  if (modifiers.isReleaseChar(char)) {
	    return modifiers.release();
	  }

	  // todo: non-printable keys (keyboard commands)

	  // taken from firefox driver
	  // https://github.com/SeleniumHQ/selenium/blob/master/javascript/firefox-driver/js/utils.js#L441
	  // todo: what about non-latin chars?
	  const isShiftedChar = /[A-Z\!\$\^\*\(\)\+\{\}\:\?\|~@#%&_"<>]/.test(char);
	  const dispatchShift = isShiftedChar && !modifiers.hasShift();
	  // todo: find true way to get keyCode
	  const indexOfChar = keycodes.indexOf(char.toLocaleUpperCase());
	  const keyCode = indexOfChar >= 0 ? indexOfChar : 0;

	  if (char === Key.ENTER) {
	    char = '\r';
	  }


	  // todo: get text/unmodified text
	  return Promise.resolve()
	    .then(() => dispatchShift ? modifiers.dispatchShift('keydown') : null)
	    .then(() => dispatcher.dispatchKeyDown(keyCode, modifiers.get()))
	    .then(() => dispatcher.dispatchChar(char, modifiers.get()))
	    .then(() => dispatcher.dispatchKeyUp(keyCode, modifiers.get()))
	    .then(() => dispatchShift ? modifiers.dispatchShift('keyup') : null);
	}

	function focus(id) {
	  return Targets.debugger.sendCommand('DOM.focus', {
	    nodeId: Number(id)
	  });
	}


/***/ }),
/* 320 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * It is a problem to convert char to virtualKeyCode
	 * The only solution seems to map all keycodes
	 * Actually they are here:
	 * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode
	 *
	 * But one great man collected it in js array:
	 * http://stackoverflow.com/questions/1772179/get-character-value-from-keycode-in-javascript-then-trim
	 *
	 * Important issue for keyCode=0 in chromium:
	 * https://bugs.chromium.org/p/chromium/issues/detail?id=327853
	 * But even with flag it does not work.
	 *
	 * See firefox driver!
	 * https://github.com/SeleniumHQ/selenium/blob/23a24f5d98b2aa0e4537437bdeda6a6bf5d3b527/javascript/firefox-driver/js/utils.js#L457
	 */

	/**
	 * We map to selenium chars.
	 * Not all still mapped.
	 */

	// todo: https://www.w3.org/TR/uievents-code/#code-value-tables

	const Key = __webpack_require__(103).Key;

	module.exports = [
	  '', // [0]
	  '', // [1]
	  '', // [2]
	  'CANCEL', // [3]
	  '', // [4]
	  '', // [5]
	  'HELP', // [6]
	  '', // [7]
	  'BACK_SPACE', // [8]
	  'TAB', // [9]
	  '', // [10]
	  '', // [11]
	  'CLEAR', // [12]
	  Key.ENTER, // [13]
	  'ENTER_SPECIAL', // [14]
	  '', // [15]
	  Key.SHIFT, // [16]
	  Key.CONTROL, // [17]
	  Key.ALT, // [18]
	  'PAUSE', // [19]
	  'CAPS_LOCK', // [20]
	  'KANA', // [21]
	  'EISU', // [22]
	  'JUNJA', // [23]
	  'FINAL', // [24]
	  'HANJA', // [25]
	  '', // [26]
	  'ESCAPE', // [27]
	  'CONVERT', // [28]
	  'NONCONVERT', // [29]
	  'ACCEPT', // [30]
	  'MODECHANGE', // [31]
	  'SPACE', // [32]
	  'PAGE_UP', // [33]
	  'PAGE_DOWN', // [34]
	  'END', // [35]
	  'HOME', // [36]
	  Key.LEFT, // [37]
	  Key.UP, // [38]
	  Key.RIGHT, // [39]
	  Key.DOWN, // [40]
	  'SELECT', // [41]
	  'PRINT', // [42]
	  'EXECUTE', // [43]
	  'PRINTSCREEN', // [44]
	  'INSERT', // [45]
	  'DELETE', // [46]
	  '', // [47]
	  '0', // [48]
	  '1', // [49]
	  '2', // [50]
	  '3', // [51]
	  '4', // [52]
	  '5', // [53]
	  '6', // [54]
	  '7', // [55]
	  '8', // [56]
	  '9', // [57]
	  'COLON', // [58]
	  'SEMICOLON', // [59]
	  'LESS_THAN', // [60]
	  'EQUALS', // [61]
	  'GREATER_THAN', // [62]
	  'QUESTION_MARK', // [63]
	  'AT', // [64]
	  'A', // [65]
	  'B', // [66]
	  'C', // [67]
	  'D', // [68]
	  'E', // [69]
	  'F', // [70]
	  'G', // [71]
	  'H', // [72]
	  'I', // [73]
	  'J', // [74]
	  'K', // [75]
	  'L', // [76]
	  'M', // [77]
	  'N', // [78]
	  'O', // [79]
	  'P', // [80]
	  'Q', // [81]
	  'R', // [82]
	  'S', // [83]
	  'T', // [84]
	  'U', // [85]
	  'V', // [86]
	  'W', // [87]
	  'X', // [88]
	  'Y', // [89]
	  'Z', // [90]
	  Key.COMMAND, // [91] Windows Key (Windows) or Command Key (Mac)
	  '', // [92]
	  'CONTEXT_MENU', // [93]
	  '', // [94]
	  'SLEEP', // [95]
	  'NUMPAD0', // [96]
	  'NUMPAD1', // [97]
	  'NUMPAD2', // [98]
	  'NUMPAD3', // [99]
	  'NUMPAD4', // [100]
	  'NUMPAD5', // [101]
	  'NUMPAD6', // [102]
	  'NUMPAD7', // [103]
	  'NUMPAD8', // [104]
	  'NUMPAD9', // [105]
	  'MULTIPLY', // [106]
	  'ADD', // [107]
	  'SEPARATOR', // [108]
	  'SUBTRACT', // [109]
	  'DECIMAL', // [110]
	  'DIVIDE', // [111]
	  'F1', // [112]
	  'F2', // [113]
	  'F3', // [114]
	  'F4', // [115]
	  'F5', // [116]
	  'F6', // [117]
	  'F7', // [118]
	  'F8', // [119]
	  'F9', // [120]
	  'F10', // [121]
	  'F11', // [122]
	  'F12', // [123]
	  'F13', // [124]
	  'F14', // [125]
	  'F15', // [126]
	  'F16', // [127]
	  'F17', // [128]
	  'F18', // [129]
	  'F19', // [130]
	  'F20', // [131]
	  'F21', // [132]
	  'F22', // [133]
	  'F23', // [134]
	  'F24', // [135]
	  '', // [136]
	  '', // [137]
	  '', // [138]
	  '', // [139]
	  '', // [140]
	  '', // [141]
	  '', // [142]
	  '', // [143]
	  'NUM_LOCK', // [144]
	  'SCROLL_LOCK', // [145]
	  'WIN_OEM_FJ_JISHO', // [146]
	  'WIN_OEM_FJ_MASSHOU', // [147]
	  'WIN_OEM_FJ_TOUROKU', // [148]
	  'WIN_OEM_FJ_LOYA', // [149]
	  'WIN_OEM_FJ_ROYA', // [150]
	  '', // [151]
	  '', // [152]
	  '', // [153]
	  '', // [154]
	  '', // [155]
	  '', // [156]
	  '', // [157]
	  '', // [158]
	  '', // [159]
	  'CIRCUMFLEX', // [160]
	  'EXCLAMATION', // [161]
	  'DOUBLE_QUOTE', // [162]
	  'HASH', // [163]
	  'DOLLAR', // [164]
	  'PERCENT', // [165]
	  'AMPERSAND', // [166]
	  'UNDERSCORE', // [167]
	  'OPEN_PAREN', // [168]
	  'CLOSE_PAREN', // [169]
	  'ASTERISK', // [170]
	  'PLUS', // [171]
	  'PIPE', // [172]
	  'HYPHEN_MINUS', // [173]
	  'OPEN_CURLY_BRACKET', // [174]
	  'CLOSE_CURLY_BRACKET', // [175]
	  'TILDE', // [176]
	  '', // [177]
	  '', // [178]
	  '', // [179]
	  '', // [180]
	  'VOLUME_MUTE', // [181]
	  'VOLUME_DOWN', // [182]
	  'VOLUME_UP', // [183]
	  '', // [184]
	  '', // [185]
	  'SEMICOLON', // [186]
	  'EQUALS', // [187]
	  'COMMA', // [188]
	  'MINUS', // [189]
	  'PERIOD', // [190]
	  'SLASH', // [191]
	  'BACK_QUOTE', // [192]
	  '', // [193]
	  '', // [194]
	  '', // [195]
	  '', // [196]
	  '', // [197]
	  '', // [198]
	  '', // [199]
	  '', // [200]
	  '', // [201]
	  '', // [202]
	  '', // [203]
	  '', // [204]
	  '', // [205]
	  '', // [206]
	  '', // [207]
	  '', // [208]
	  '', // [209]
	  '', // [210]
	  '', // [211]
	  '', // [212]
	  '', // [213]
	  '', // [214]
	  '', // [215]
	  '', // [216]
	  '', // [217]
	  '', // [218]
	  'OPEN_BRACKET', // [219]
	  'BACK_SLASH', // [220]
	  'CLOSE_BRACKET', // [221]
	  'QUOTE', // [222]
	  '', // [223]
	  'META', // [224]
	  'ALTGR', // [225]
	  '', // [226]
	  'WIN_ICO_HELP', // [227]
	  'WIN_ICO_00', // [228]
	  '', // [229]
	  'WIN_ICO_CLEAR', // [230]
	  '', // [231]
	  '', // [232]
	  'WIN_OEM_RESET', // [233]
	  'WIN_OEM_JUMP', // [234]
	  'WIN_OEM_PA1', // [235]
	  'WIN_OEM_PA2', // [236]
	  'WIN_OEM_PA3', // [237]
	  'WIN_OEM_WSCTRL', // [238]
	  'WIN_OEM_CUSEL', // [239]
	  'WIN_OEM_ATTN', // [240]
	  'WIN_OEM_FINISH', // [241]
	  'WIN_OEM_COPY', // [242]
	  'WIN_OEM_AUTO', // [243]
	  'WIN_OEM_ENLW', // [244]
	  'WIN_OEM_BACKTAB', // [245]
	  'ATTN', // [246]
	  'CRSEL', // [247]
	  'EXSEL', // [248]
	  'EREOF', // [249]
	  'PLAY', // [250]
	  'ZOOM', // [251]
	  '', // [252]
	  'PA1', // [253]
	  'WIN_OEM_CLEAR', // [254]
	  '' // [255]
	];


/***/ }),
/* 321 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands to search element on page
	 */

	const WebElement = __webpack_require__(101).WebElement;
	const Targets = __webpack_require__(290);
	const errors = __webpack_require__(312);

	exports.findElement = function (params) {
	  return Promise.resolve()
	    .then(() => getRootNodeId())
	    .then(rootNodeId => new Finder(params.using, params.value, rootNodeId).find());
	};

	exports.findElements = function (params) {
	  return Promise.resolve()
	    .then(() => getRootNodeId())
	    .then(rootNodeId => new Finder(params.using, params.value, rootNodeId, true).find());
	};

	exports.findChildElement = function (params) {
	  return new Finder(params.using, params.value, params.id).find();
	};

	exports.findChildElements = function (params) {
	  return new Finder(params.using, params.value, params.id, true).find();
	};

	function getRootNodeId() {
	  // todo: save rootId in targets and update after navigations and switchto commands
	  // todo: chromedriver seems to do it after DEVTOOLS EVENT DOM.documentUpdated
	  /*
	  if (typeof Targets.rootId === 'number') {
	    return Promise.resolve(Targets.rootId);
	  } else {
	    return Targets.debugger.sendCommand('DOM.getDocument', {})
	      .then(res => Targets.rootId = res.root.nodeId);
	  }
	  */
	  return Targets.debugger.sendCommand('DOM.getDocument', {})
	    .then(res => Targets.rootId = res.root.nodeId);
	}

	class Finder {
	  constructor(strategy, value, startNodeId, all = false) {
	    this._strategy = strategy;
	    this._value = value;
	    this._startNodeId = startNodeId;
	    this._all = all;
	  }

	  find() {
	    return this._query()
	      .then(res => this._processResult(res));
	  }

	  _query() {
	    switch (this._strategy) {
	      case 'css selector':
	        return this._queryByCss();
	      default:
	        throw new Error(`Unsupported strategy ${this._strategy}`);
	    }
	  }

	  _queryByCss() {
	    const queryCommand = this._all ? 'DOM.querySelectorAll' : 'DOM.querySelector';
	    return Targets.debugger.sendCommand(queryCommand, {
	      nodeId: Number(this._startNodeId),
	      selector: this._value
	    });
	  }

	  _processResult(res) {
	    if (this._all) {
	      return res.nodeIds.map(Finder.toSeleniumElement);
	    } else {
	      return res.nodeId
	        ? Finder.toSeleniumElement(res.nodeId)
	        : Promise.reject(new errors.NoSuchElementError(`Element not found by ${this._value}`));
	    }
	  }

	  static toSeleniumElement(nodeId) {
	    return WebElement.buildId(String(nodeId));
	  }
	}


/***/ }),
/* 322 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands for getting element props
	 */

	const WebElement = __webpack_require__(101).WebElement;
	const Targets = __webpack_require__(290);
	const evaluate = __webpack_require__(310);

	/**
	 * Returns element tag name
	 * @param {Object} params
	 * @param {String} params.id
	 * @returns {Promise}
	 */
	exports.getElementTagName = function (params) {
	  return exports.getProp(params.id, 'tagName')
	    .then(tagName => tagName.toLowerCase());
	};

	/**
	 * Returns element text
	 * @param {Object} params
	 * @param {String} params.id
	 * @returns {Promise}
	 */
	exports.getElementText = function (params) {
	  return exports.getProp(params.id, 'textContent');
	};

	/**
	 * Returns props of node
	 * @param {String} id
	 * @returns {Promise}
	 */
	exports.getProps = function (id) {
	  return Promise.resolve()
	    .then(() => evaluate.helper.resolveNode(id))
	    .then(objectId => {
	      return Targets.debugger.sendCommand('Runtime.getProperties', {
	        objectId: objectId,
	      })
	    })
	    .then(res => res.result);
	};

	/**
	 * Returns prop of node
	 * @param {String} id
	 * @param {String} propName
	 * @returns {Promise}
	 */
	exports.getProp = function (id, propName) {
	  return exports.getProps(id)
	    .then(props => props.filter(prop => prop.name === propName)[0].value.value)
	};

	/**
	 * Submit form or element
	 * @param {Object} params
	 * @param {String} params.id
	 * @returns {Promise}
	 */
	exports.submit = function (params) {
	  const args = [WebElement.buildId(params.id)];
	  const script = `
	    const el = arguments[0];
	    if (el.tagName === 'FORM') {
	      el.submit();
	    } else {
	      el.form.submit();
	    }
	  `;
	  return evaluate.execute({script, args});
	};

	/**
	 * Is enabled
	 * @param {Object} params
	 * @param {String} params.id
	 * @returns {Promise}
	 */
	exports.isEnabled = function (params) {
	  const args = [WebElement.buildId(params.id)];
	  const script = `
	    const el = arguments[0];
	    return !el.disabled;
	  `;
	  return evaluate.execute({script, args});
	};


/***/ }),
/* 323 */
/***/ (function(module, exports) {

	/**
	 * Commands for managing timeouts
	 * http://seleniumhq.github.io/selenium/docs/api/javascript/module/selenium-webdriver/lib/webdriver_exports_Timeouts.html
	 */

	// const Targets = require('../targets');
	//
	// const TYPES = [
	//   'script',
	//   'page load',
	// ];

	/**
	 * Set timeout for some type
	 *
	 * @param {Object} params
	 * @param {String} params.type
	 * @param {Number} params.ms
	 */
	exports.setTimeout = function () {
	  return Promise.resolve();
	};


/***/ }),
/* 324 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Requests module for webdriver
	 * Collects network requests
	 */

	const Collector = __webpack_require__(325);

	let collector;

	exports.collect = function () {
	  return Promise.resolve()
	    .then(() => collector ? collector.stop() : null)
	    .then(() => {
	      collector = new Collector();
	      return collector.start();
	    });
	};

	exports.stop = function () {
	  return Promise.resolve()
	    .then(() => collector ? collector.stop() : null)
	};

	exports.get = function (params) {
	  return Promise.resolve()
	    .then(() => collector ? collector.get(params.filter) : Promise.reject('Collector was not started'))
	};



/***/ }),
/* 325 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Collect network requests from current tab and urls of new opened tabs.
	 */

	const Filter = __webpack_require__(326);
	const RequestCatcher = __webpack_require__(327);
	const NewTabCatcher = __webpack_require__(328);
	const logger = __webpack_require__(88).create('Requests collector');

	const DEFAULT_REQUESTS_LIMIT = 1000;

	module.exports = class Collector {

	  constructor() {
	    this._requests = [];
	    this._collecting = false;
	    this._requestCatcher = new RequestCatcher();
	    this._newTabCatcher = new NewTabCatcher();
	    this._setOnCatchedListeners();
	  }

	  start() {
	    if (this._collecting) {
	      throw new Error('Collector already in collecting state');
	    }
	    this._requests.length = 0;
	    return Promise.resolve()
	      .then(() => this._requestCatcher.start())
	      .then(() => this._newTabCatcher.start())
	      .then(() => {
	        this._collecting = true;
	        logger.log('start collecting');
	      })
	  }

	  stop() {
	    if (!this._collecting) {
	      return Promise.resolve();
	    }
	    return Promise.resolve()
	      .then(() => this._newTabCatcher.stop())
	      .then(() => this._requestCatcher.stop())
	      .then(() => {
	        this._collecting = false;
	        logger.log('stop collecting');
	      })
	  }

	  /**
	   * Returns catched requests passing filter
	   *
	   * @param {Object} filter
	   */
	  get(filter) {
	    const requestFilter = new Filter(filter);
	    return this._requests.filter(request => requestFilter.match(request));
	  }

	  _setOnCatchedListeners() {
	    this._requestCatcher.onCatched.addListener(this._onRequestCatched, this);
	    this._newTabCatcher.onCatched.addListener(this._onNewTabCatched, this);
	  }

	  _onRequestCatched(data) {
	    if (this._collecting) {
	      const request = {
	        type: data.type,
	        method: data.request.method,
	        url: data.request.url,
	      };
	      this._addRequest(request);
	    }
	  }

	  _onNewTabCatched(data) {
	    if (this._collecting) {
	      const request = {
	        type: 'Newtab',
	        method: 'GET',
	        url: data.url,
	      };
	      this._addRequest(request);
	    }
	  }

	  _addRequest(request) {
	    if (this._requests.length >= DEFAULT_REQUESTS_LIMIT) {
	      this._requests.shift();
	    }
	    this._requests.push(request);
	  }

	};


/***/ }),
/* 326 */
/***/ (function(module, exports) {

	/**
	 * Easy filter requests by different params
	 */

	class RequestsFilter {
	  /**
	   * Constructor
	   * @param {String|RegExp|Object} [filter]
	   * @param {String|RegExp} [filter.url]
	   * @param {String} [filter.urlStarts]
	   * @param {String} [filter.urlContains]
	   * @param {String} [filter.type]
	   * @param {Object} [filter.urlParams]
	   * @param {Boolean} [filter.inverse = false]
	   */
	  constructor(filter) {
	    this._filter = {};

	    if (!filter) {
	      return;
	    }

	    if (typeof filter === 'string' || filter instanceof RegExp ) {
	      this._filter.url = filter;
	    }

	    if (typeof filter === 'object') {
	      this._filter = filter;
	    }
	  }

	  match(request) {
	    const matches = [
	      this._matchType,
	      this._matchUrl,
	      this._matchUrlStarts,
	      this._matchUrlContains,
	      this._matchUrlParams
	    ];
	    const isMatched = matches.every(fn => fn.call(this, request));
	    return this._filter.inverse ? !isMatched : isMatched;
	  }

	  toString() {
	    return JSON.stringify(this._filter, (key, value) => {
	      return value instanceof RegExp ? value.toString() : value;
	    }, 2);
	  }

	  _hasField(field) {
	    return this._filter[field] !== undefined;
	  }

	  _matchType(request) {
	    if (this._hasField('type')) {
	      const filterType = this._filter.type.toLowerCase();
	      const requestType = request.type.toLowerCase();
	      return filterType === requestType;
	    } else {
	      return true;
	    }
	  }

	  _matchUrl(request) {
	    return !this._hasField('url') || (this._filter.url instanceof RegExp
	        ? this._filter.url.test(request.url)
	        : this._filter.url === request.url);
	  }

	  _matchUrlStarts(request) {
	    return !this._hasField('urlStart') || request.url.startsWith(this._filter.urlStart);
	  }

	  _matchUrlContains(request) {
	    return !this._hasField('urlContain') || request.url.indexOf(this._filter.urlContain) >= 0;
	  }

	  _matchUrlParams(request) {
	    if (!this._hasField('urlParams')) {
	      return true;
	    }
	    const urlInstance = new URL(request.url);
	    return Object.keys(this._filter.urlParams).every(name => {
	      return urlInstance.searchParams.get(name) === this._filter.urlParams[name];
	    });
	  }
	}

	module.exports = RequestsFilter;


/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Catch network requests via debugger requestWillBeSent event and notify listeners.
	 */

	const Channel = __webpack_require__(30);
	const Targets = __webpack_require__(290);

	class RequestCatcher {

	  constructor() {
	    this.onCatched = new Channel();
	    this._debugger = null;
	  }

	  start() {
	    this._debugger = Targets.debugger;
	    this._listeners = new Channel.Subscription([
	      {
	        channel: this._debugger.onEvent,
	        listener: this._onDebuggerEvent.bind(this)
	      }
	    ]);
	    return this._setNetworkState('enable')
	      .then(() => this._listeners.on())
	  }

	  stop() {
	    if (!this._debugger) {
	      throw new Error('RequestCatcher already stopped');
	    }
	    this._listeners.off();
	    return this._setNetworkState('disable')
	      .then(() => this._debugger = null)
	  }

	  _setNetworkState(state) {
	    return this._debugger.sendCommand(`Network.${state}`);
	  }

	  _onDebuggerEvent(method, params) {
	    if (method === 'Network.requestWillBeSent') {
	      this.onCatched.dispatch(params);
	    }
	  }
	}

	module.exports = RequestCatcher;


/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Catch new tabs, get it's url and notify listeners
	 * WebNavigation module is required to get url of new tab as tab.onCreated not always has it.
	 */

	const Channel = __webpack_require__(30);

	class NewTabCatcher {

	  constructor() {
	    this.onCatched = new Channel();
	    this._tabs = new Set();
	    this._listeners = new Channel.Subscription([
	      {
	        channel: chrome.tabs.onCreated,
	        listener: this._onTabCreated.bind(this)
	      },
	      {
	        channel: chrome.webNavigation.onBeforeNavigate,
	        listener: this._onBeforeNavigate.bind(this)
	      },
	    ]);
	  }

	  start() {
	    this._tabs.clear();
	    this._listeners.on();
	  }

	  stop() {
	    this._listeners.off();
	  }

	  _onTabCreated(tab) {
	    this._tabs.add(tab.id);
	  }

	  _onBeforeNavigate(info) {
	    if (info.frameId === 0 && this._tabs.has(info.tabId)) {
	      this._tabs.delete(info.tabId);
	      const eventData = {
	        tabId: info.tabId,
	        url: info.url,
	      };
	      this.onCatched.dispatch(eventData);
	    }
	  }
	}

	module.exports = NewTabCatcher;


/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Commands for page dialogs: alert/confirm/prompt/onbeforeunload
	 */

	const Targets = __webpack_require__(290);

	/**
	 * Gets dialog text
	 *
	 * @returns {Promise}
	 */
	exports.getText = function () {
	  // todo: use Page.javascriptDialogOpening event to store dialog text. currently return dummy text
	  return Promise.resolve('dialog text');
	};

	/**
	 * Accepts dialog
	 *
	 * @returns {Promise}
	 */
	exports.accept = function () {
	  return action(true);
	};

	/**
	 * Dismiss dialog
	 *
	 * @returns {Promise}
	 */
	exports.dismiss = function () {
	  return action(false);
	};

	function action(accept = true) {
	  return Targets.debugger.sendCommand('Page.handleJavaScriptDialog', {accept});
	}


/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Extra custom commands
	 */

	let done = false;

	exports.setup = function () {
	  if (!done) {
	    done = true;
	    __webpack_require__(331).setup();
	    __webpack_require__(332).setup();
	  }
	};


/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Switch to newtab and extension background
	 */

	const TargetLocator = __webpack_require__(101).TargetLocator;
	const command = __webpack_require__(97);
	const engines = __webpack_require__(92);

	const commands = {
	  SWITCH_TO_NEW_TAB: 'SWITCH_TO_NEW_TAB',
	  SWITCH_TO_EXTENSION: 'SWITCH_TO_EXTENSION',
	};

	/**
	 * Setup
	 * Should be called once
	 */
	exports.setup = function () {
	  registerCommands();
	  addNewtabMethod();
	  addExtensionMethod();
	};

	function registerCommands() {
	  engines.selenium.registerCommand(commands.SWITCH_TO_NEW_TAB, 'POST', '/session/:sessionId/autotester/newtab');
	  engines.selenium.registerCommand(commands.SWITCH_TO_EXTENSION, 'POST', '/session/:sessionId/autotester/extension');
	}

	function addNewtabMethod() {
	  /**
	   * Schedules a command to switch the focus of all future commands to new tab.
	   * @param {string} url The URL of new tab.
	   * @return {!promise.Promise<void>} A promise that will be resolved when the driver has changed focus to the new tab.
	   */
	  TargetLocator.prototype.newTab = function (url) {
	    const cmd = new command.Command(commands.SWITCH_TO_NEW_TAB).setParameter('url', url);
	    return this.driver_.schedule(cmd, 'WebDriver.switchTo().newTab(' + url + ')');
	  };
	}

	function addExtensionMethod() {
	  /**
	   * Schedules a command to switch the focus of all future commands to extension background page.
	   * @param {string} [id] extension id. If empty - first available extension will be used
	   * @return {!promise.Promise<void>} A promise that will be resolved when the driver has changed focus to the new tab.
	   */
	  TargetLocator.prototype.extension = function (id) {
	    const cmd = new command.Command(commands.SWITCH_TO_EXTENSION).setParameter('id', id);
	    return this.driver_.schedule(cmd, 'WebDriver.switchTo().extension(' + id + ')');
	  };
	}


/***/ }),
/* 332 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Network requests collector
	 */

	const WebDriver = __webpack_require__(107).WebDriver;
	const engines = __webpack_require__(92);
	const Collector = __webpack_require__(333);
	const commands = __webpack_require__(334);

	/**
	 * Setup
	 * Should be called once
	 */
	exports.setup = function () {
	  registerCommands();
	  addRequestsMethod();
	};

	/**
	 * Use PUT & POST here as we may need to pass filter in body
	 */
	function registerCommands() {
	  engines.selenium.registerCommand(commands.REQUESTS_COLLECT, 'PUT', '/session/:sessionId/autotester/requests');
	  engines.selenium.registerCommand(commands.REQUESTS_STOP, 'DELETE', '/session/:sessionId/autotester/requests');
	  engines.selenium.registerCommand(commands.REQUESTS_GET, 'POST', '/session/:sessionId/autotester/requests');
	}

	function addRequestsMethod() {
	  WebDriver.prototype.requests = function () {
	    if (!this.collector_) {
	      this.collector_ = new Collector(this);
	    }
	    return this.collector_;
	  };
	}



/***/ }),
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

	
	const command = __webpack_require__(97);
	const commands = __webpack_require__(334);

	module.exports = class Collector {

	  constructor(driver) {
	    this._driver = driver;
	    this._flow = this._driver.controlFlow();
	    // todo: think about it: if
	    // this._listenFlowEvents();
	  }

	  collect() {
	    const cmd = new command.Command(commands.REQUESTS_COLLECT);
	    return this._driver.schedule(cmd, 'WebDriver.requests().collect()');
	  }

	  stop() {
	    const cmd = new command.Command(commands.REQUESTS_STOP);
	    return this._driver.schedule(cmd, 'WebDriver.requests().stop()');
	  }

	  /**
	   * Returns catched requests passing filter
	   *
	   * @param {Object} filter
	   */
	  get(filter) {
	    const cmd = new command.Command(commands.REQUESTS_GET).setParameter('filter', filter);
	    return this._driver.schedule(cmd, 'WebDriver.requests().get()');
	  }

	  getCount(filter) {
	    return this.get(filter)
	      .then(requests => requests.length);
	  }

	  /**
	   * Convenient way to view collected requests:
	   * driver.requests().dump(console);
	   *
	   * @param {Object} [logging] object with .log() method. Optional because we may need result as string to log ourself
	   * @returns {!ManagedPromise.<*>}
	   */
	  dump(logging) {
	    return this.get().then(requests => {
	      const result = requests.map(r => `${r.type}: ${r.method} ${r.url}`);
	      result.unshift(`Collected ${requests.length} request(s):`);
	      const resultStr = result.join('\n');
	      if (logging && logging.log) {
	        logging.log(resultStr);
	      }
	      return resultStr;
	    });
	  }

	  /**
	   * Stop listening requests in case flow gets idle or throws exception
	   */
	  // _listenFlowEvents() {
	  //   this._flow.on(IDLE, () => super.stop());
	  //   this._flow.on(UNCAUGHT_EXCEPTION, () => super.stop());
	  // }
	};


/***/ }),
/* 334 */
/***/ (function(module, exports) {

	
	module.exports = {
	  REQUESTS_COLLECT: 'REQUESTS_COLLECT',
	  REQUESTS_STOP: 'REQUESTS_STOP',
	  REQUESTS_GET: 'REQUESTS_GET',
	};


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Logs real and fake http requests
	 */

	const httpAlias = __webpack_require__(41);
	const logger = __webpack_require__(88).create('Network');

	/**
	 * Set listeners (once)
	 */
	exports.init = function () {
	  if (!httpAlias.onRequest.hasListener(onRequest)) {
	    httpAlias.onRequest.addListener(onRequest);
	    httpAlias.onRequestData.addListener(onRequestData);
	    httpAlias.onResponse.addListener(onResponse);
	  }
	};

	function onRequest({request, options}) {
	  logger.log(`${getPrefix(request)} request`, options.method, getUrl(options));
	}

	function onRequestData({request, data}) {
	  logger.log(`${getPrefix(request)} request data`, data);
	}

	function onResponse({response, data}) {
	  // copied from selenium-webdriver
	  data = data.replace(/\0/g, '');
	  // strip big 'screen' prop with encoded screenshot
	  if (response.statusCode !== 200) {
	    data = stripScreenshot(data);
	  }
	  logger.log(`${getPrefix(response)} response`, response.statusCode, data);
	}

	function getPrefix(obj) {
	  return obj.isFake ? 'LOOPBACK' : 'REAL';
	}

	function getUrl(options) {
	  const {protocol, hostname, port, path} = options;
	  return `${protocol}//${hostname}${port ? ':' + port : ''}${path}`;
	}

	function stripScreenshot(body) {
	  return body.replace(/"screen":"[^"]+"/, '"screen":"_stripped_"');
	}


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	/**
	 * Internal channels
	 */

	const Channel = __webpack_require__(30);

	exports.onReady = new Channel();
	exports.onTestsDone = new Channel();
	exports.onSessionStarted = new Channel();
	exports.onFileStarted = new Channel();
	exports.onTestStarted = new Channel();


/***/ })
/******/ ]);